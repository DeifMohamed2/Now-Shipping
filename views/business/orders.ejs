<%- contentFor('HeaderCss') %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.7.6/lottie.min.js"></script>

<link href="/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
<%- contentFor('body') %>
<style>
  /* Fix for dropdown menus in tables */
  .dropdown-fix .dropdown-menu {
    /* position: fixed !important; */
    z-index: 1050 !important;
  }

  /* Ensure the table doesn't constrain the dropdown */
  #orderTable {
    overflow: visible !important;
  }

      .table-responsive{
      overflow: scroll !important;
      }
  /* Make sure parent containers don't clip the dropdown */
  .card-body,
  .card {
    overflow: visible !important;
  }
</style>
<style>
  .paper-size-container {
    margin-bottom: 15px;
  }

  .paper-size-option {
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    padding: 15px 10px;
    border-radius: 8px;
    background-color: #f8f9fa;
    border: 2px solid transparent;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .paper-size-option:hover {
    transform: translateY(-3px);
    background-color: #e9ecef;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .paper-size-option.selected {
    background-color: rgba(13, 110, 253, 0.1);
    border-color: #0d6efd;
    color: #0d6efd;
  }

  .paper-icon {
    margin-bottom: 10px;
    position: relative;
  }

  .paper-icon i {
    font-size: 2.5rem;
    display: block;
    margin: 0 auto;
  }

  .size-label {
    font-weight: bold;
    font-size: 1.1rem;
    display: block;
    margin-top: 5px;
  }

  .paper-details {
    font-size: 0.8rem;
    color: #6c757d;
  }

  /* Fix for dropdown menus in tables */
  .dropdown-menu {
    position: fixed !important;
    z-index: 1050 !important;
    margin-top: 0 !important;
  }

  /* Ensure dropdowns stay visible when scrolling */
  .dropdown-menu.show {
    display: block !important;
  }

  /* Prevent table scroll from hiding dropdowns */
  .table-responsive {
    overflow: visible !important;
  }

  /* Only apply scroll when needed */
  @media (max-width: 992px) {
    .table-responsive {
      overflow-x: auto !important;
    }
  }

  /* Make sure parent containers don't clip the dropdown */
  .card-body,
  .card {
    overflow: visible !important;
  }
</style>
<div class="row">
  <div class="col-lg-12">
    <div class="card" id="orderList">
      <div class="card-header border-0">
        <div class="row align-items-center gy-3">
          <div class="col-sm">
            <h5 class="card-title mb-0">Orders</h5>
          </div>
          <div class="col-sm-auto">
            <div class="d-flex gap-1 flex-wrap">
              <button type="button" class="btn btn-success add-btn" onClick='window.location.href="/business/create-order"'><i class="ri-add-line align-bottom me-1"></i> Create Order</button>
              <button type="button" class="btn btn-info"><i class="ri-file-download-line align-bottom me-1"></i> Import</button>
              <button class="btn btn-soft-danger" id="remove-actions" onClick="deleteMultiple()"><i class="ri-delete-bin-2-line"></i></button>
            </div>
          </div>
        </div>
      </div>
      <div class="card-body border border-dashed border-end-0 border-start-0">
        <form>
          <div class="row g-3">
            <div class="col-xxl-5 col-sm-6">
              <div class="search-box">
                <input type="text" class="form-control search" placeholder="Search for order ID, customer, order status or something...">
                <i class="ri-search-line search-icon"></i>
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-2 col-sm-6">
              <div>
                <input type="text" class="form-control" data-provider="flatpickr" data-date-format="d M, Y" data-range-date="true" id="demo-datepicker" placeholder="Select date">
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-2 col-sm-4">
              <div>
                <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="idStatus">
                  <option value="">Status</option>
                  <option value="all" selected>All</option>
                  <option value="Pending">Pending</option>
                  <option value="Inprogress">Inprogress</option>
                  <option value="Cancelled">Cancelled</option>
                  <option value="Pickups">Pickups</option>
                  <option value="Returns">Returns</option>
                  <option value="Delivered">Delivered</option>
                </select>
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-2 col-sm-4">
              <div>
                <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="idPayment">
                  <option value="">Select Payment</option>
                  <option value="all" selected>All</option>
                  <option value="Mastercard">Mastercard</option>
                  <option value="Paypal">Paypal</option>
                  <option value="Visa">Visa</option>
                  <option value="COD">COD</option>
                </select>
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-1 col-sm-4">
              <div>
                <button type="button" class="btn btn-primary w-100" onclick="SearchData();"> <i class="ri-equalizer-fill me-1 align-bottom"></i>
                  Filters
                </button>
              </div>
            </div>
            <!--end col-->
          </div>
          <!--end row-->
        </form>
      </div>
      <div class="card-body pt-0">
        <div>
          <ul class="nav nav-tabs nav-tabs-custom nav-success mb-3" role="tablist">
            <li class="nav-item">
              <button class="btn btn-link nav-link active All py-3" data-bs-toggle="tab" id="All" role="tab" aria-selected="true" onClick="filterOrders('All')">
                <i class="ri-store-2-fill me-1 align-bottom"></i> All Orders
              </button>
            </li>
            <li class="nav-item">
              <button class="btn btn-link nav-link py-3 Delivered" data-bs-toggle="tab" id="Delivered" role="tab" aria-selected="false" onClick="filterOrders('Deliver')">
                <i class="ri-checkbox-circle-line me-1 align-bottom"></i> Delivered
              </button>
            </li>
            <li class="nav-item">
              <button class="btn btn-link nav-link py-3 Returns" data-bs-toggle="tab" id="Returns" role="tab" aria-selected="false" onClick="filterOrders('Return')">
                <i class="ri-arrow-left-right-fill me-1 align-bottom"></i> Returns
              </button>
            </li>
            <li class="nav-item">
              <button class="btn btn-link nav-link py-3 CashCollection" data-bs-toggle="tab" id="CashCollection" role="tab" aria-selected="false" onClick="filterOrders('Exchange')">
                <i class="ri-exchange-line me-1 align-bottom"></i> Exchange
              </button>
            </li>

            <li class="nav-item">
              <button class="btn btn-link nav-link py-3 CashCollection" data-bs-toggle="tab" id="CashCollection" role="tab" aria-selected="false" onClick="filterOrders('CashCollection')">
                <i class="ri-money-dollar-circle-line me-1 align-bottom"></i> Cash Collection
              </button>
            </li>

          </ul>

          <div class="table-responsive table-card mb-1">
            <table class="table table-nowrap align-middle" id="orderTable">
              <thead class="text-muted table-light">
                <tr class="text-uppercase">
                  <th scope="col" style="width: 25px;">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" id="checkAll" value="option">
                    </div>
                  </th>
                  <th  data-sort="id">Order ID</th>
                  <th  data-sort="customer_name">Customer</th>
                  <th  data-sort="order-type">Order Type</th>
                  <th  data-sort="order-Location">Order Location</th>
                  <th  data-sort="amount">Amount</th>
                  <th  data-sort="status">Delivery Status</th>
                  <th  data-sort="status">Delivery Tries</th>
                  <th  data-sort="date">Order Date</th>
                  <th data-sort="city">Action</th>
                </tr>
              </thead>
           <tbody class="list form-check-all" id="ordersTable">
             <!-- Orders will be inserted here dynamically -->
           </tbody>
            </table>


            <div class="noresult" id="NoResult" style="display: none">
              <div class="text-center">
                <lord-icon src="https://cdn.lordicon.com/msoeawqm.json" trigger="loop" colors="primary:#405189,secondary:#0ab39c" style="width:75px;height:75px"></lord-icon>
                <h5 class="mt-2">Sorry! No Result Found</h5>
              </div>
            </div>
          </div>
        </div>
        <div class="d-flex justify-content-end">
          <div class="pagination-wrap hstack gap-2">
            <a class="page-item pagination-prev disabled" href="javascript:void(0);">
              Previous
            </a>
            <ul class="pagination listjs-pagination mb-0"></ul>
            <a class="page-item pagination-next" href="javascript:void(0);">
              Next
            </a>
          </div>
        </div>
      </div>



      <!-- Print Policy Modal -->
    <div class="modal fade" id="printPolicyModal" tabindex="-1" aria-labelledby="printPolicyModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header bg-light">
            <h5 class="modal-title" id="printPolicyModalLabel">
              <i class="ri-printer-fill me-2 text-primary"></i>Print Delivery Policy
            </h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p class="text-muted mb-4">Select the paper size for printing the delivery policy:</p>
            <form id="printPolicyForm">
              <input type="hidden" id="orderId" name="orderId" value="">
              <div class="row paper-size-container">
                <div class="col-4">
                  <div class="paper-size-option" onclick="selectPaperSize('A4')">
                    <div class="paper-icon">
                      <i class="ri-file-text-line"></i>
                      <span class="size-label">A4</span>
                    </div>
                    <div class="paper-details">
                      <span>210 × 297 mm</span>
                    </div>
                  </div>
                </div>
                <div class="col-4">
                  <div class="paper-size-option" onclick="selectPaperSize('A5')">
                    <div class="paper-icon">
                      <i class="ri-file-reduce-line"></i>
                      <span class="size-label">A5</span>
                    </div>
                    <div class="paper-details">
                      <span>148 × 210 mm</span>
                    </div>
                  </div>
                </div>
                <div class="col-4">
                  <div class="paper-size-option" onclick="selectPaperSize('A6')">
                    <div class="paper-icon">
                      <i class="ri-file-paper-2-line"></i>
                      <span class="size-label">A6</span>
                    </div>
                    <div class="paper-details">
                      <span>105 × 148 mm</span>
                    </div>
                  </div>
                </div>
              </div>
              <input type="hidden" id="paperSize" name="paperSize" value="">
              <div class="d-flex justify-content-end mt-4">
                <button type="button" class="btn btn-light me-2" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="printPolicy()">
                  <i class="ri-printer-fill me-1"></i>Print
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>



    </div>
  </div>

</div>
<!--end col-->
</div>
<!--end row-->

<%- contentFor('FooterJs') %>


<!-- list.js min js -->
<script src="/assets/libs/list.js/list.min.js"></script>

<!--list pagination js-->
<script src="/assets/libs/list.pagination.js/list.pagination.min.js"></script>

<!-- ecommerce-order init js -->
<!-- <script src="/assets/js/pages/ecommerce-order.init.js"></script> -->

<script src="/assets/libs/sweetalert2/sweetalert2.min.js"></script>


<script src="/assets/rJS/business/orders.js"></script>

<script>
  // Function to select paper size
  function selectPaperSize(size) {
    // Remove selected class from all options
    document.querySelectorAll('.paper-size-option').forEach(option => {
      option.classList.remove('selected');
    });

    // Add selected class to clicked option
    const selectedOption = document.querySelector(`.paper-size-option[onclick="selectPaperSize('${size}')"]`);
    if (selectedOption) {
      selectedOption.classList.add('selected');
    }

    // Set the hidden input value
    document.getElementById('paperSize').value = size;
  }

  // Function to set order ID
  function setOrderId(id) {
    document.getElementById('orderId').value = id;
  }

  // Function to print policy
  function printPolicy() {
    const orderId = document.getElementById('orderId').value;
    const paperSize = document.getElementById('paperSize').value;

    if (!paperSize) {
      Swal.fire({
        icon: 'warning',
        title: 'Paper Size Required',
        text: 'Please select a paper size before printing.',
        confirmButtonColor: '#0d6efd'
      });
      return;
    }

    // Show loading indicator
    Swal.fire({
      title: 'Preparing document...',
      html: 'Please wait while we prepare your document.',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });

    // Send request to print policy
    fetch(`/business/print-policy/${orderId}?paperSize=${paperSize}`, {
        method: 'GET',
      })
      .then(response => {
        if (response.ok) {
          return response.blob();
        }
        throw new Error('Network response was not ok.');
      })
      .then(blob => {
        // Create URL for the blob
        const url = window.URL.createObjectURL(blob);

        // Create a link and click it to download the file
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = `delivery-policy-${orderId}.pdf`;
        document.body.appendChild(a);
        a.click();

        // Clean up
        window.URL.revokeObjectURL(url);

        // Close modal
        $('#printPolicyModal').modal('hide');

        // Show success message
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: 'Delivery policy has been prepared for printing.',
          confirmButtonColor: '#0d6efd'
        });
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Something went wrong while preparing the document.',
          confirmButtonColor: '#0d6efd'
        });
      });
  }

  // Fix dropdown positioning on scroll
  document.addEventListener('DOMContentLoaded', function() {
    const tableContainer = document.querySelector('.table-responsive');
    if (tableContainer) {
      tableContainer.addEventListener('scroll', function() {
        const openDropdowns = document.querySelectorAll('.dropdown-menu.show');
        openDropdowns.forEach(dropdown => {
          const button = dropdown.previousElementSibling;
          if (button) {
            const rect = button.getBoundingClientRect();
            dropdown.style.top = `${rect.bottom}px`;
            dropdown.style.left = `${rect.left}px`;
          }
        });
      });
    }

    // Fix dropdown positioning when dropdown is toggled
    const dropdownButtons = document.querySelectorAll('[data-bs-toggle="dropdown"]');
    dropdownButtons.forEach(button => {
      button.addEventListener('click', function() {
        setTimeout(() => {
          const dropdown = this.nextElementSibling;
          if (dropdown && dropdown.classList.contains('show')) {
            const rect = this.getBoundingClientRect();
            dropdown.style.top = `${rect.bottom}px`;
            dropdown.style.left = `${rect.left}px`;
          }
        }, 0);
      });
    });
  });
</script>
