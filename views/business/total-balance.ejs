<%- contentFor('HeaderCss') %>
<link href="/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="/assets/rCSS/business.css">
<style>
  :root {
    --primary-color: #2A3950;
    --success-color: #10B981;
    --danger-color: #EF4444;
    --warning-color: #F59E0B;
    --info-color: #3B82F6;
    --light-bg: #F9FAFB;
    --card-border: #E5E7EB;
  }

  .wallet-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
    flex-wrap: wrap;
  }

  .wallet-title {
    font-size: 24px;
    font-weight: 700;
    color: var(--primary-color);
  }

  .wallet-subtitle {
    font-size: 14px;
    color: #6B7280;
    margin-top: 5px;
  }

  .balance-card {
    background: linear-gradient(135deg, #FFFFFF 0%, #F8FAFC 100%);
    border-radius: 16px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
    padding: 24px;
    margin-bottom: 30px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 20px;
    position: relative;
    overflow: hidden;
  }

  .balance-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: #F59E0B;
  }

  @media (max-width: 992px) {
    .balance-card {
      flex-direction: column;
      align-items: flex-start;
    }

    .balance-card>div:last-child {
      align-self: flex-end;
    }
  }

  @media (max-width: 768px) {
    .balance-card {
      padding: 15px;
    }

    .balance-value {
      font-size: 28px !important;
    }

    .wallet-title {
      font-size: 20px;
    }
  }

  @media (max-width: 576px) {
    .balance-card {
      gap: 15px;
    }

    .balance-info,
    .withdrawal-info {
      width: 100%;
    }

    .balance-card>div:last-child {
      align-self: flex-start;
      width: 100%;
    }

    .balance-card>div:last-child button {
      width: 100%;
    }
  }

  .balance-info {
    display: flex;
    flex-direction: column;
  }

  .balance-label {
    font-size: 14px;
    color: #6B7280;
    margin-bottom: 5px;
  }

  .balance-value {
    font-size: 32px;
    font-weight: 700;
    color: var(--primary-color);
  }

  .withdrawal-info {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }

  .withdrawal-label {
    font-size: 14px;
    color: #6B7280;
    margin-bottom: 5px;
    display: flex;
    align-items: center;
  }

  .withdrawal-label i {
    margin-right: 5px;
    color: var(--info-color);
  }

  .withdrawal-date {
    font-size: 16px;
    font-weight: 600;
    color: var(--primary-color);
  }

  .frequency-label {
    font-size: 14px;
    color: #6B7280;
    margin-bottom: 5px;
    display: flex;
    align-items: center;
  }

  .frequency-label i {
    margin-right: 5px;
    color: var(--warning-color);
  }

  .frequency-value {
    font-size: 16px;
    font-weight: 600;
    color: var(--primary-color);
  }

  .transaction-filters {
    background-color: var(--light-bg);
    border-radius: 10px;
    padding: 15px;
    margin-bottom: 20px;
    border: 1px solid var(--card-border);
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 10px;
  }

  @media (max-width: 576px) {
    .transaction-filters {
      flex-direction: column;
      align-items: stretch;
    }

    .filter-group {
      width: 100%;
    }

    .date-filter,
    .export-btn {
      width: 100%;
      justify-content: center;
    }
  }

  .filter-group {
    display: flex;
    gap: 10px;
    align-items: center;
  }

  .date-filter,
  .status-filter,
  .type-filter {
    display: flex;
    align-items: center;
    background: white;
    border: 1px solid var(--card-border);
    border-radius: 8px;
    padding: 10px 16px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .date-filter::before,
  .status-filter::before,
  .type-filter::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s;
  }

  .date-filter:hover::before,
  .status-filter:hover::before,
  .type-filter:hover::before {
    left: 100%;
  }

  .date-filter:hover,
  .status-filter:hover,
  .type-filter:hover {
    background: #F8FAFC;
    border-color: var(--primary-color);
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .date-filter i,
  .status-filter i,
  .type-filter i {
    margin-right: 8px;
    color: #6B7280;
  }

  .filter-text {
    font-size: 13px;
    font-weight: 500;
    color: #374151;
  }

  .export-btn {
    display: flex;
    align-items: center;
    background: linear-gradient(135deg, #3B82F6 0%, #1D4ED8 100%);
    border: none;
    border-radius: 8px;
    padding: 10px 20px;
    cursor: pointer;
    color: white;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(59, 130, 246, 0.2);
  }

  .export-btn:hover {
    background: linear-gradient(135deg, #1D4ED8 0%, #1E40AF 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
  }

  .export-btn:disabled {
    background: #9CA3AF;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .export-btn i {
    margin-right: 8px;
    color: white;
  }

  .transactions-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  }

  .transactions-title {
    font-size: 18px;
    font-weight: 600;
    color: var(--primary-color);
  }

  .table-container {
    position: relative;
  }

  .table-responsive {
    max-height: 600px;
    overflow-y: auto;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }

  .table {
    margin-bottom: 0;
    width: 100%;
    border-collapse: collapse;
  }

  .table th {
    position: sticky;
    top: 0;
    background-color: #F3F4F6;
    font-weight: 600;
    font-size: 14px;
    padding: 15px;
    color: #4B5563;
    z-index: 1;
    white-space: nowrap;
  }

  .table td {
    padding: 15px;
    vertical-align: middle;
    border-bottom: 1px solid #F3F4F6;
    white-space: nowrap;
  }

  .table tbody tr:hover {
    background-color: #F9FAFB;
  }

  .transaction-id {
    font-weight: 600;
    color: #374151;
  }

  .transaction-date {
    color: #6B7280;
  }

  .transaction-type {
    color: #4B5563;
    font-weight: 500;
  }

  .transaction-amount {
    font-weight: 600;
  }

  .amount-positive {
    color: var(--success-color);
  }

  .amount-negative {
    color: var(--danger-color);
  }

  .transaction-balance {
    font-weight: 600;
    color: #374151;
  }

  .details-btn {
    background-color: #F3F4F6;
    border: none;
    border-radius: 6px;
    padding: 6px 12px;
    font-size: 13px;
    color: #4B5563;
    cursor: pointer;
    transition: all 0.2s;
    white-space: nowrap;
  }

  .details-btn:hover {
    background-color: #E5E7EB;
  }

  .transaction-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
    border-radius: 50%;
  }

  .icon-positive {
    background-color: rgba(16, 185, 129, 0.1);
    color: var(--success-color);
  }

  .icon-negative {
    background-color: rgba(239, 68, 68, 0.1);
    color: var(--danger-color);
  }

  .badge-status {
    padding: 5px 10px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
  }

  /* Status badge styles */
  .badge {
    font-size: 11px;
    padding: 4px 8px;
    border-radius: 12px;
    font-weight: 500;
  }

  .badge.bg-success {
    background-color: #10B981 !important;
    color: white;
  }

  .badge.bg-warning {
    background-color: #F59E0B !important;
    color: white;
  }

  .badge.bg-info {
    background-color: #3B82F6 !important;
    color: white;
  }

  .pagination-wrap {
    margin-top: 15px;
  }

  .pagination-wrap a,
  .pagination-wrap li a {
    padding: 8px 15px;
    border-radius: 8px;
    margin: 0 5px;
    color: #4B5563;
    font-weight: 500;
    transition: all 0.2s;
  }

  .pagination-wrap a:hover,
  .pagination-wrap li a:hover {
    background-color: #F3F4F6;
  }

  .pagination-wrap li.active a {
    background-color: var(--primary-color);
    color: white;
  }

  .noresult {
    padding: 30px 0;
  }

  /* Custom scrollbar for webkit browsers */
  .table-responsive::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  .table-responsive::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
  }

  .table-responsive::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 4px;
  }

  .table-responsive::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }

  /* For Firefox */
  .table-responsive {
    scrollbar-width: thin;
    scrollbar-color: #c1c1c1 #f1f1f1;
  }

  @media (max-width: 576px) {

    .table th,
    .table td {
      padding: 10px 8px;
      font-size: 13px;
    }

    .transaction-icon {
      width: 24px;
      height: 24px;
    }

    .details-btn {
      padding: 4px 8px;
      font-size: 12px;
    }

    .badge {
      font-size: 10px;
      padding: 3px 6px;
    }

    .status-filter {
      margin-top: 10px;
    }
  }

  /* Transaction Modal Styles */
  .transaction-modal-popup {
    border-radius: 12px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
  }

  .transaction-details-modal {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  }

  .transaction-details-modal .card {
    border: none;
    border-radius: 8px;
  }

  .transaction-details-modal .table th {
    font-size: 12px;
    font-weight: 600;
    color: #6B7280;
    padding: 8px 12px;
  }

  .transaction-details-modal .table td {
    font-size: 13px;
    padding: 8px 12px;
    border-top: 1px solid #F3F4F6;
  }

  .transaction-details-modal .alert {
    border-radius: 8px;
    border: none;
    font-size: 14px;
  }

  .transaction-details-modal .badge {
    font-size: 11px;
    padding: 4px 8px;
  }

  /* Settled transaction styles */
  .transaction-icon {
    position: relative;
  }

  .settled-transaction {
    opacity: 0.7;
    background-color: #f8f9fa !important;
  }

  .settled-transaction .transaction-icon {
    opacity: 0.6;
  }

  .settled-badge {
    background-color: #10B981;
    color: white;
    font-size: 10px;
    padding: 2px 6px;
    border-radius: 10px;
    margin-left: 5px;
  }

  /* Spinning animation for refresh button */
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>
<%- contentFor('body') %>

<div class="wallet-header">
  <div>
    <h1 class="wallet-title">Account Balance</h1>
    <p class="wallet-subtitle">View your current balance and transaction history</p>
  </div>
  <div>
    <button id="refreshBalanceBtn" class="btn btn-outline-primary btn-sm" title="Recalculate balance from unsettled transactions">
      <i data-feather="refresh-cw" style="width: 16px; height: 16px;"></i>
      Refresh Balance
    </button>
  </div>
</div>

<div class="balance-card">
  <div class="balance-info">
    <span class="balance-label">Total Balance</span>
    <h2 class="balance-value"> <%= userData.balance %> EGP</h2>
    <% if (typeof balanceRecalculated !== 'undefined' && balanceRecalculated) { %>
      <small class="text-muted">
        <i data-feather="refresh-cw" style="width: 12px; height: 12px;"></i>
        Balance recalculated from <%= balanceRecalculated.unsettledCount %> unsettled transactions
      </small>
    <% } %>
  </div>

  <div class="withdrawal-info">
    <div class="withdrawal-label">
      <i data-feather="calendar"></i> Next Withdrawal Date
    </div>
    <div class="withdrawal-date"> <%= weeklyWithdrawDate %></div>
  </div>

  <div class="withdrawal-info">
    <div class="frequency-label">
      <i data-feather="repeat"></i> Withdrawal Frequency
    </div>
    <div class="frequency-value">Weekly</div>
  </div>

 
</div>

<div class="transactions-header">
  <h2 class="transactions-title">Transaction History</h2>
  <p class="text-muted">All your financial transactions and account activities</p>
</div>

<div class="transaction-filters">
  <div class="filter-group">
    <div class="date-filter">
      <i data-feather="calendar"></i> <span class="filter-text">Last Month</span>
    </div>
    <div class="status-filter">
      <i data-feather="filter"></i> <span class="filter-text">All Status</span>
    </div>
    <div class="type-filter">
      <i data-feather="tag"></i> <span class="filter-text">All Types</span>
    </div>
  </div>
  <div class="filter-group">
    <div class="export-btn" id="clearFiltersBtn" style="background: linear-gradient(135deg, #6c757d 0%, #495057 100%); margin-right: 10px;">
      <i data-feather="x-circle"></i> Clear Filters
    </div>
    <div class="export-btn" id="exportTransactionsBtn">
      <i data-feather="download"></i> Export Excel
    </div>
  </div>
</div>

<div class="card">
  <div class="card-body">
    <div class="table-container">
      <div class="table-responsive">
        <table class="table" id="invoiceTable">
          <thead>
            <tr>
              <th scope="col" style="width: 50px;"></th>

              <th class="text-uppercase">Transaction ID</th>
              <th class="text-uppercase">Transaction Date</th>
              <th class="text-uppercase">Transaction Type</th>
              <th class="text-uppercase">Amount (EGP)</th>
              <th class="text-uppercase">Status</th>
              <th class="text-uppercase">View Details</th>
            </tr>
          </thead>
          <tbody class="list form-check-all" id="invoice-list-data">
<!-- 
            <tr>
              <td>
                <div class="transaction-icon icon-positive">
                  <i data-feather="plus" style="width: 16px; height: 16px;"></i>
                </div>
              </td>

              <td class="transaction-id">#TRX-0001</td>
              <td class="transaction-date">Jan 18, 2023</td>
              <td>
                Account Deposit
                <p class="text-muted">Initial account funding</p>
              </td>
              <td class="transaction-amount amount-positive">+$10,000.00</td>
              <td class="transaction-balance">$12,000.00</td>
              <td>
                <button class="details-btn">Show Invoice</button>
              </td>
            </tr>
             -->
            <!-- <tr>
              <td>
                <div class="transaction-icon icon-negative">
                  <i data-feather="minus" style="width: 16px; height: 16px;"></i>
                </div>
              </td>

              <td class="transaction-id">#TRX-0002</td>
              <td class="transaction-date">Jan 18, 2023</td>
              <td>
                Cash Withdrawal
                <p class="text-muted">Vendor payment</p>
              </td>
              <td class="transaction-amount amount-negative">-$19,850.00</td>
              <td class="transaction-balance">$2,000.00</td>
              <td>
                <button class="details-btn">Show Invoice</button>
              </td>
            </tr>
            <tr>
              <td>
                <div class="transaction-icon icon-negative">
                  <i data-feather="minus" style="width: 16px; height: 16px;"></i>
                </div>
              </td>

              <td class="transaction-id">#TRX-0003</td>
              <td class="transaction-date">Jan 18, 2023</td>
              <td>
                Service Fees
                <p class="text-muted">Monthly service fee</p>
              </td>
              <td class="transaction-amount amount-negative">-$2,100.00</td>
              <td class="transaction-balance">$6,550.00</td>
              <td>
                <button class="details-btn">Show Details</button>
              </td>
            </tr>
            <tr>
              <td>
                <div class="transaction-icon icon-positive">
                  <i data-feather="plus" style="width: 16px; height: 16px;"></i>
                </div>
              </td>

              <td class="transaction-id">#TRX-0004</td>
              <td class="transaction-date">Jan 18, 2023</td>
              <td>
                Refund
                <p class="text-muted">Refund for overpayment</p>
              </td>
              <td class="transaction-amount amount-positive">+$1,100.00</td>
              <td class="transaction-balance">$8,550.00</td>
              <td>
                <button class="details-btn">Download Receipt</button>
              </td>
            </tr>
            <tr>
              <td>
                <div class="transaction-icon icon-negative">
                  <i data-feather="minus" style="width: 16px; height: 16px;"></i>
                </div>
              </td>

              <td class="transaction-id">#TRX-0005</td>
              <td class="transaction-date">Jan 18, 2023</td>
              <td>
                Packaging Materials
                <p class="text-muted">Purchase of packaging supplies</p>
              </td>
              <td class="transaction-amount amount-negative">-$150.00</td>
              <td class="transaction-balance">$7,550.00</td>
              <td>
                <button class="details-btn">Show Details</button>
              </td>
            </tr> -->


          </tbody>
        </table>
        <div class="noresult" style="display: none">
          <div class="text-center py-4">
            <lord-icon src="https://cdn.lordicon.com/msoeawqm.json" trigger="loop" colors="primary:#405189,secondary:#08a88a" style="width:75px;height:75px"></lord-icon>
            <h5 class="mt-2">No Results Found</h5>
            <p class="text-muted mb-0">We couldn't find any transactions matching your search criteria.</p>
          </div>
        </div>
      </div>
      <div class="d-flex justify-content-end mt-3">
        <div class="pagination-wrap hstack gap-2">
          <a class="page-item pagination-prev disabled" href="#">
            <i class="ri-arrow-left-s-line"></i> Previous
          </a>
          <ul class="pagination listjs-pagination mb-0">
            <li class="active"><a href="#">1</a></li>
            <li><a href="#">2</a></li>
            <li><a href="#">3</a></li>
          </ul>
          <a class="page-item pagination-next" href="#">
            Next <i class="ri-arrow-right-s-line"></i>
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<%- contentFor('FooterJs') %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



<!-- App js -->

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Feather icons
    if (typeof feather !== 'undefined') {
      feather.replace();
    }


    function populateTransactions(data) {
      const tableBody = document.getElementById('invoice-list-data');
      tableBody.innerHTML = ''; // Clear existing rows

      data.forEach(transaction => {
      const isPositive = ['cashCycle', 'refund', 'deposit'].includes(transaction.transactionType);
      const settlementStatus = transaction.settlementStatus || 'pending';
      const isSettled = settlementStatus === 'settled';
      const isIncludedInRelease = settlementStatus === 'included_in_release';
      
      // Debug logging
      console.log(`Transaction ${transaction.transactionId}: settlementStatus=${settlementStatus}, settled=${transaction.settled}`);
      const row = document.createElement('tr');
      
      // Add styling based on settlement status
      if (isSettled) {
        row.style.opacity = '0.7';
        row.style.backgroundColor = '#f8f9fa';
      } else if (isIncludedInRelease) {
        row.style.backgroundColor = '#e3f2fd';
        row.style.borderLeft = '4px solid #2196f3';
      }
      
      row.innerHTML = `
        <td>
        <div class="transaction-icon ${isPositive ? 'icon-positive' : 'icon-negative'} ${isSettled ? 'opacity-50' : ''}">
          <i data-feather="${isPositive ? 'plus' : 'minus'}" style="width: 16px; height: 16px;"></i>
          ${isSettled ? '<i data-feather="check-circle" style="width: 12px; height: 12px; position: absolute; bottom: -2px; right: -2px; color: #10B981;"></i>' : ''}
        </div>
        </td>
        <td class="transaction-id">
          ${transaction.transactionId}
        </td>
        <td class="transaction-date">${new Date(transaction.createdAt).toLocaleDateString()}</td>
        <td>
        ${getTransactionTypeLabel(transaction.transactionType)}
        <p class="text-muted">${transaction.transactionNotes ? transaction.transactionNotes.replace(/\([^)]*\)/g, '').replace(/\s+/g, ' ').trim() : ''}</p>
        </td>
        <td class="transaction-amount ${isPositive ? 'amount-positive' : 'amount-negative'}">${transaction.transactionAmount > 0 ? '+' : ''}${transaction.transactionAmount} EGP</td>
        <td>
          <span class="badge ${getSettlementBadgeClass(settlementStatus)}">
            ${getSettlementStatusText(settlementStatus)}
          </span>
          ${getSettlementStatusDescription(settlementStatus)}
        </td>
        <td><button class="details-btn" data-transaction='${JSON.stringify(transaction)}'>View Details</button></td>
      `;
      tableBody.appendChild(row);
      });

      // Reinitialize Feather icons
      if (typeof feather !== 'undefined') {
      feather.replace();
      }
    }

    function getTransactionTypeLabel(type) {
      const labels = {
        'cashCycle': 'Cash Cycle',
        'fees': 'Service Fees',
        'pickupFees': 'Pickup Fees',
        'refund': 'Refund',
        'deposit': 'Deposit',
        'withdrawal': 'Withdrawal',
        'shopOrderDelivery': 'Shop Order Delivery'
      };
      return labels[type] || type;
    }

    function getSettlementStatusText(status) {
      const statusTexts = {
        'pending': 'Pending',
        'included_in_release': 'In Release',
        'settled': 'Settled'
      };
      return statusTexts[status] || 'Pending';
    }

    function getSettlementBadgeClass(status) {
      const badgeClasses = {
        'pending': 'bg-warning',
        'included_in_release': 'bg-info',
        'settled': 'bg-success'
      };
      return badgeClasses[status] || 'bg-warning';
    }

    function getSettlementStatusDescription(status) {
      const descriptions = {
        'pending': '<br><small class="text-muted">Awaiting release</small>',
        'included_in_release': '<br><small class="text-muted">Included in pending release</small>',
        'settled': '<br><small class="text-muted">Released to account</small>'
      };
      return descriptions[status] || '<br><small class="text-muted">Awaiting release</small>';
    }





    // Global variables to track current filters
    let currentTimePeriod = 'month';
    let currentStatusFilter = 'all';
    let currentTypeFilter = 'all';

    // fetch all transactions 
    async function getTransactions(timePeriod, statusFilter = 'all', typeFilter = 'all') {
      try { 
        const noResultDiv = document.querySelector('.noresult');
        const tableBody = document.querySelector('#transactionTable tbody');
        
        // Show loading state
        tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4"><i class="ri-loader-4-line ri-spin"></i> Loading transactions...</td></tr>';
        
        const response = await fetch(`/business/wallet/get-all-transactions-by-date?timePeriod=${timePeriod}`);
        const data = await response.json();
        console.log('Raw transaction data:', data);
        
        if(response.ok) {
          if (data.length > 0) {
            // Filter by status and type if needed
            let filteredData = data;
            
            // Apply status filter
            if (statusFilter !== 'all') {
              if (statusFilter === 'settled') {
                filteredData = filteredData.filter(transaction => transaction.settlementStatus === 'settled');
              } else if (statusFilter === 'pending') {
                filteredData = filteredData.filter(transaction => transaction.settlementStatus === 'pending');
              } else if (statusFilter === 'in_release') {
                filteredData = filteredData.filter(transaction => transaction.settlementStatus === 'included_in_release');
              }
            }
            
            // Apply type filter
            if (typeFilter !== 'all') {
              filteredData = filteredData.filter(transaction => transaction.transactionType === typeFilter);
            }
            
            console.log(`Filtered ${data.length} transactions to ${filteredData.length} after applying filters`);
            console.log('Applied filters:', { timePeriod, statusFilter, typeFilter });
            
            populateTransactions(filteredData);
            noResultDiv.style.display = 'none'; // Hide the no result message
          } else {
            populateTransactions([]); // Clear the table if no transactions
            noResultDiv.style.display = 'block';
          }
        } else {
          console.error('Error fetching transactions:', data.message);
          tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4 text-danger">Error loading transactions</td></tr>';
        }
      } catch (error) {
        console.error('Error in getTransactions:', error);
        const tableBody = document.querySelector('#transactionTable tbody');
        tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4 text-danger">Error loading transactions</td></tr>';
      }
    }
    getTransactions('month', 'all', 'all');


    // Add click handler for date filter
    document.querySelector('.date-filter').addEventListener('click', function() {
      Swal.fire({
        title: 'Select Date Range',
        html: `
        <div class="mb-3">
          <select class="form-select" id="dateRangeSelect">
            <option value="today" ${currentTimePeriod === 'today' ? 'selected' : ''}>Today</option>
            <option value="week" ${currentTimePeriod === 'week' ? 'selected' : ''}>This Week</option>
            <option value="month" ${currentTimePeriod === 'month' ? 'selected' : ''}>This Month</option>
            <option value="year" ${currentTimePeriod === 'year' ? 'selected' : ''}>This Year</option>
            <option value="all" ${currentTimePeriod === 'all' ? 'selected' : ''}>All Time</option>
          </select>
        </div>
        `,
        showCancelButton: true,
        confirmButtonText: 'Apply Filter',
        confirmButtonColor: '#3B82F6',
        cancelButtonText: 'Cancel',
        cancelButtonColor: '#6c757d'
      }).then((result) => {
        if (result.isConfirmed) {
          const selectedValue = document.getElementById('dateRangeSelect').value;
          currentTimePeriod = selectedValue;
          
          // Update filter button text
          const dateFilterBtn = document.querySelector('.date-filter .filter-text');
          const dateText = selectedValue === 'all' ? 'All Time' : 
                          selectedValue === 'today' ? 'Today' :
                          selectedValue === 'week' ? 'This Week' :
                          selectedValue === 'month' ? 'This Month' : 'This Year';
          dateFilterBtn.textContent = dateText;
          
          // Show loading toast
          const loadingToast = Swal.fire({
            title: 'Loading...',
            text: `Fetching transactions for ${dateText}`,
            icon: 'info',
            showConfirmButton: false,
            allowOutsideClick: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });
          
          getTransactions(selectedValue, currentStatusFilter, currentTypeFilter)
            .then(() => {
              loadingToast.close();
              Swal.fire({
                title: 'Filter Applied!',
                text: `Showing transactions for ${dateText}`,
                icon: 'success',
                timer: 1500,
                showConfirmButton: false
              });
            })
            .catch(() => {
              loadingToast.close();
            });
        }
      });
    });







    // Add click handler for Excel export button
    document.getElementById('exportTransactionsBtn').addEventListener('click', async function() {
      const button = this;
      const originalText = button.innerHTML;
      
      // Show loading state
      button.disabled = true;
      button.innerHTML = '<i data-feather="loader" style="width: 16px; height: 16px; animation: spin 1s linear infinite;"></i> Exporting...';
      
      try {
        // Build query parameters
        const params = new URLSearchParams({
          timePeriod: currentTimePeriod,
          statusFilter: currentStatusFilter,
          transactionType: currentTypeFilter
        });
        
        // Create download link
        const downloadUrl = `/business/wallet/export-transactions?${params.toString()}`;
        
        // Create temporary link and trigger download
        const link = document.createElement('a');
        link.href = downloadUrl;
        link.download = `transactions_${new Date().toISOString().split('T')[0]}.xlsx`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        // Show success message
        Swal.fire({
          title: 'Export Successful!',
          text: 'Transaction data has been exported to Excel',
          icon: 'success',
          confirmButtonColor: '#3B82F6',
          timer: 3000,
          showConfirmButton: false
        });
        
      } catch (error) {
        console.error('Error exporting transactions:', error);
        Swal.fire({
          title: 'Export Failed',
          text: 'Failed to export transactions. Please try again.',
          icon: 'error',
          confirmButtonColor: '#3B82F6'
        });
      } finally {
        // Restore button state
        button.disabled = false;
        button.innerHTML = originalText;
        feather.replace();
      }
    });

    // Add click handler for status filter
    document.querySelector('.status-filter').addEventListener('click', function() {
      Swal.fire({
        title: 'Filter by Settlement Status',
        html: `
        <div class="mb-3">
          <select class="form-select" id="statusSelect">
            <option value="all" ${currentStatusFilter === 'all' ? 'selected' : ''}>All Status</option>
            <option value="pending" ${currentStatusFilter === 'pending' ? 'selected' : ''}>Pending</option>
            <option value="in_release" ${currentStatusFilter === 'in_release' ? 'selected' : ''}>In Release</option>
            <option value="settled" ${currentStatusFilter === 'settled' ? 'selected' : ''}>Settled</option>
          </select>
        </div>
        <div class="text-muted small">
          <strong>Status Types:</strong><br>
          • <strong>Pending:</strong> Awaiting release<br>
          • <strong>In Release:</strong> Included in pending release<br>
          • <strong>Settled:</strong> Released to account
        </div>
        `,
        showCancelButton: true,
        confirmButtonText: 'Apply Filter',
        confirmButtonColor: '#3B82F6',
        cancelButtonText: 'Cancel',
        cancelButtonColor: '#6c757d'
      }).then((result) => {
        if (result.isConfirmed) {
          const selectedStatus = document.getElementById('statusSelect').value;
          currentStatusFilter = selectedStatus;
          
          // Update the filter button text
          const statusFilterBtn = document.querySelector('.status-filter .filter-text');
          const statusText = selectedStatus === 'all' ? 'All Status' : 
                           selectedStatus === 'pending' ? 'Pending Only' :
                           selectedStatus === 'in_release' ? 'In Release Only' : 'Settled Only';
          statusFilterBtn.textContent = statusText;
          
          // Show loading toast
          const loadingToast = Swal.fire({
            title: 'Loading...',
            text: `Filtering transactions by ${statusText}`,
            icon: 'info',
            showConfirmButton: false,
            allowOutsideClick: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });
          
          getTransactions(currentTimePeriod, selectedStatus, currentTypeFilter)
            .then(() => {
              loadingToast.close();
              Swal.fire({
                title: 'Filter Applied!',
                text: `Showing ${statusText} transactions`,
                icon: 'success',
                timer: 1500,
                showConfirmButton: false
              });
            })
            .catch(() => {
              loadingToast.close();
            });
        }
      });
    });

    // Add click handler for type filter
    document.querySelector('.type-filter').addEventListener('click', function() {
      Swal.fire({
        title: 'Filter by Transaction Type',
        html: `
        <div class="mb-3">
          <select class="form-select" id="typeSelect">
            <option value="all" ${currentTypeFilter === 'all' ? 'selected' : ''}>All Types</option>
            <option value="cashCycle" ${currentTypeFilter === 'cashCycle' ? 'selected' : ''}>Cash Cycle</option>
            <option value="fees" ${currentTypeFilter === 'fees' ? 'selected' : ''}>Service Fees</option>
            <option value="pickupFees" ${currentTypeFilter === 'pickupFees' ? 'selected' : ''}>Pickup Fees</option>
            <option value="shopOrderDelivery" ${currentTypeFilter === 'shopOrderDelivery' ? 'selected' : ''}>Shop Order Delivery</option>
            <option value="refund" ${currentTypeFilter === 'refund' ? 'selected' : ''}>Refund</option>
            <option value="deposit" ${currentTypeFilter === 'deposit' ? 'selected' : ''}>Deposit</option>
            <option value="withdrawal" ${currentTypeFilter === 'withdrawal' ? 'selected' : ''}>Withdrawal</option>
          </select>
        </div>
        <div class="text-muted small">
          <strong>Transaction Types:</strong><br>
          • <strong>Cash Cycle:</strong> Order earnings<br>
          • <strong>Service Fees:</strong> Platform fees<br>
          • <strong>Pickup Fees:</strong> Pickup service charges<br>
          • <strong>Shop Order Delivery:</strong> Shop order earnings<br>
          • <strong>Refund:</strong> Money returned<br>
          • <strong>Deposit:</strong> Money added<br>
          • <strong>Withdrawal:</strong> Money released
        </div>
        `,
        showCancelButton: true,
        confirmButtonText: 'Apply Filter',
        confirmButtonColor: '#3B82F6',
        cancelButtonText: 'Cancel',
        cancelButtonColor: '#6c757d'
      }).then((result) => {
        if (result.isConfirmed) {
          const selectedType = document.getElementById('typeSelect').value;
          currentTypeFilter = selectedType;
          
          // Update the filter button text
          const typeFilterBtn = document.querySelector('.type-filter .filter-text');
          const typeText = selectedType === 'all' ? 'All Types' : 
                          selectedType === 'cashCycle' ? 'Cash Cycle Only' :
                          selectedType === 'fees' ? 'Service Fees Only' :
                          selectedType === 'pickupFees' ? 'Pickup Fees Only' :
                          selectedType === 'shopOrderDelivery' ? 'Shop Orders Only' :
                          selectedType === 'refund' ? 'Refunds Only' :
                          selectedType === 'deposit' ? 'Deposits Only' : 'Withdrawals Only';
          typeFilterBtn.textContent = typeText;
          
          // Show loading toast
          const loadingToast = Swal.fire({
            title: 'Loading...',
            text: `Filtering transactions by ${typeText}`,
            icon: 'info',
            showConfirmButton: false,
            allowOutsideClick: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });
          
          getTransactions(currentTimePeriod, currentStatusFilter, selectedType)
            .then(() => {
              loadingToast.close();
              Swal.fire({
                title: 'Filter Applied!',
                text: `Showing ${typeText} transactions`,
                icon: 'success',
                timer: 1500,
                showConfirmButton: false
              });
            })
            .catch(() => {
              loadingToast.close();
            });
        }
      });
    });

    // Add click handler for clear filters button
    document.getElementById('clearFiltersBtn').addEventListener('click', function() {
      Swal.fire({
        title: 'Clear All Filters?',
        text: 'This will reset all filters and show all transactions',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Yes, Clear All',
        confirmButtonColor: '#6c757d',
        cancelButtonText: 'Cancel',
        cancelButtonColor: '#3B82F6'
      }).then((result) => {
        if (result.isConfirmed) {
          // Reset all filters
          currentTimePeriod = 'month';
          currentStatusFilter = 'all';
          currentTypeFilter = 'all';
          
          // Update filter button texts
          document.querySelector('.date-filter .filter-text').textContent = 'This Month';
          document.querySelector('.status-filter .filter-text').textContent = 'All Status';
          document.querySelector('.type-filter .filter-text').textContent = 'All Types';
          
          // Show loading toast
          const loadingToast = Swal.fire({
            title: 'Loading...',
            text: 'Clearing filters and refreshing data',
            icon: 'info',
            showConfirmButton: false,
            allowOutsideClick: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });
          
          // Refresh data
          getTransactions(currentTimePeriod, currentStatusFilter, currentTypeFilter)
            .then(() => {
              loadingToast.close();
              Swal.fire({
                title: 'Filters Cleared!',
                text: 'All filters have been reset and data refreshed',
                icon: 'success',
                timer: 1500,
                showConfirmButton: false
              });
            })
            .catch(() => {
              loadingToast.close();
            });
        }
      });
    });

    // Add click handler for refresh balance button
    document.getElementById('refreshBalanceBtn').addEventListener('click', async function() {
      const button = this;
      const originalText = button.innerHTML;
      
      // Show loading state
      button.disabled = true;
      button.innerHTML = '<i data-feather="loader" style="width: 16px; height: 16px; animation: spin 1s linear infinite;"></i> Refreshing...';
      
      try {
        const response = await fetch('/business/wallet/recalculate-balance', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        
        const data = await response.json();
        
        if (response.ok) {
          // Update the balance display
          const balanceElement = document.querySelector('.balance-value');
          balanceElement.textContent = `${data.currentBalance} EGP`;
          
          // Show success message
          Swal.fire({
            title: 'Balance Refreshed!',
            text: `Balance recalculated from ${data.balanceInfo.unsettledCount} unsettled transactions`,
            icon: 'success',
            confirmButtonColor: '#3B82F6',
            timer: 3000,
            showConfirmButton: false
          });
          
          // Refresh the transactions table
          getTransactions(currentTimePeriod, currentStatusFilter, currentTypeFilter);
        } else {
          throw new Error(data.message || 'Failed to refresh balance');
        }
      } catch (error) {
        console.error('Error refreshing balance:', error);
        Swal.fire({
          title: 'Error',
          text: 'Failed to refresh balance. Please try again.',
          icon: 'error',
          confirmButtonColor: '#3B82F6'
        });
      } finally {
        // Restore button state
        button.disabled = false;
        button.innerHTML = originalText;
        feather.replace(); // Reinitialize feather icons
      }
    });

   
    // Add click handlers for detail buttons
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('details-btn')) {
        const transactionData = JSON.parse(e.target.getAttribute('data-transaction'));
        showTransactionDetailsModal(transactionData);
      }
    });

    function showTransactionDetailsModal(transaction) {
      const isPositive = ['cashCycle', 'refund', 'deposit'].includes(transaction.transactionType);
      const amountClass = isPositive ? 'text-success' : 'text-danger';
      const amountSign = transaction.transactionAmount > 0 ? '+' : '';
      const settlementStatus = transaction.settlementStatus || 'pending';
      
      let ordersHtml = '';
      if (transaction.orderReferences && transaction.orderReferences.length > 0) {
        ordersHtml = `
          <div class="mt-3">
            <h6 class="fw-bold text-primary mb-2">
              <i data-feather="package" class="me-2"></i> Processed Orders (${transaction.orderReferences.length})
            </h6>
            <div class="table-responsive">
              <table class="table table-sm table-borderless">
                <thead>
                  <tr class="bg-light">
                    <th>Order ID</th>
                    <th>Amount</th>
                    <th>Fees</th>
                    <th>Date</th>
                  </tr>
                </thead>
                <tbody>
                  ${transaction.orderReferences.map(order => `
                    <tr>
                      <td class="fw-medium">${order.orderNumber}</td>
                      <td>${order.orderAmount} EGP</td>
                      <td>${order.orderFees} EGP</td>
                      <td class="text-muted">${new Date(order.completedDate).toLocaleDateString()}</td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            </div>
          </div>
        `;
      }

      let pickupsHtml = '';
      if (transaction.pickupReferences && transaction.pickupReferences.length > 0) {
        pickupsHtml = `
          <div class="mt-3">
            <h6 class="fw-bold text-warning mb-2">
              <i data-feather="truck" class="me-2"></i> Pickups (${transaction.pickupReferences.length})
            </h6>
            <div class="table-responsive">
              <table class="table table-sm table-borderless">
                <thead>
                  <tr class="bg-light">
                    <th>Pickup ID</th>
                    <th>Fees</th>
                    <th>Date</th>
                  </tr>
                </thead>
                <tbody>
                  ${transaction.pickupReferences.map(pickup => `
                    <tr>
                      <td class="fw-medium">${pickup.pickupNumber}</td>
                      <td>${pickup.pickupFees} EGP</td>
                      <td class="text-muted">${new Date(pickup.completedDate).toLocaleDateString()}</td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            </div>
          </div>
        `;
      }

      let summaryHtml = '';
      if (transaction.ordersDetails) {
        // Calculate total processed items based on transaction type
        let totalProcessedItems = 0;
        let itemLabel = 'Processed Items';
        
        if (transaction.transactionType === 'pickupFees') {
          totalProcessedItems = transaction.pickupReferences ? transaction.pickupReferences.length : 0;
          itemLabel = 'Processed Pickups';
        } else {
          totalProcessedItems = transaction.orderReferences ? transaction.orderReferences.length : 0;
          itemLabel = 'Processed Orders';
        }
        
        summaryHtml = `
          <div class="row mt-3">
            <div class="col-md-6">
              <div class="card bg-light">
                <div class="card-body p-3">
                  <h6 class="card-title text-primary mb-2">Transaction Summary</h6>
                  <p class="mb-1"><strong>${itemLabel}:</strong> ${totalProcessedItems}</p>
                  ${transaction.ordersDetails.pickupCount ? `<p class="mb-1"><strong>Pickups:</strong> ${transaction.ordersDetails.pickupCount}</p>` : ''}
                  ${transaction.ordersDetails.totalAmount ? `<p class="mb-1"><strong>Total Amount:</strong> ${transaction.ordersDetails.totalAmount} EGP</p>` : ''}
                  ${transaction.ordersDetails.totalFees ? `<p class="mb-1"><strong>Total Fees:</strong> ${transaction.ordersDetails.totalFees} EGP</p>` : ''}
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="card bg-light">
                <div class="card-body p-3">
                  <h6 class="card-title text-success mb-2">Date Range</h6>
                  ${transaction.ordersDetails.dateRange ? `
                    <p class="mb-1"><strong>From:</strong> ${new Date(transaction.ordersDetails.dateRange.from).toLocaleDateString()}</p>
                    <p class="mb-1"><strong>To:</strong> ${new Date(transaction.ordersDetails.dateRange.to).toLocaleDateString()}</p>
                  ` : ''}
                </div>
              </div>
            </div>
          </div>
        `;
      }

      Swal.fire({
        title: `<i data-feather="${isPositive ? 'plus-circle' : 'minus-circle'}" class="me-2"></i>Transaction Details`,
        html: `
          <div class="transaction-details-modal">
            <div class="row mb-3">
              <div class="col-md-6">
                <p class="mb-1"><strong>Transaction ID:</strong> ${transaction.transactionId}</p>
                <p class="mb-1"><strong>Date:</strong> ${new Date(transaction.createdAt).toLocaleString()}</p>
                <p class="mb-1"><strong>Type:</strong> ${getTransactionTypeLabel(transaction.transactionType)}</p>
              </div>
              <div class="col-md-6">
                <p class="mb-1"><strong>Amount:</strong> <span class="${amountClass} fw-bold">${amountSign}${transaction.transactionAmount} EGP</span></p>
                <p class="mb-1"><strong>Status:</strong> <span class="badge bg-success">Completed</span></p>
                <p class="mb-1"><strong>Settlement:</strong> <span class="badge ${getSettlementBadgeClass(settlementStatus)}">${getSettlementStatusText(settlementStatus)}</span></p>
                <p class="mb-1"><strong>Details:</strong> <small class="text-muted">${getSettlementStatusDescription(settlementStatus).replace(/<[^>]*>/g, '').trim()}</small></p>
              </div>
            </div>
            
            ${transaction.transactionNotes ? `
              <div class="alert alert-info">
                <strong>Notes:</strong> ${transaction.transactionNotes.replace(/\([^)]*\)/g, '').replace(/\s+/g, ' ').trim()}
              </div>
            ` : ''}
            
            ${summaryHtml}
            ${ordersHtml}
            ${pickupsHtml}
          </div>
        `,
        width: '800px',
        showConfirmButton: true,
        confirmButtonText: 'Close',
        confirmButtonColor: '#3B82F6',
        customClass: {
          popup: 'transaction-modal-popup'
        },
        didOpen: () => {
          // Reinitialize Feather icons in the modal
          if (typeof feather !== 'undefined') {
            feather.replace();
          }
        }
      });
    }


  });
</script>