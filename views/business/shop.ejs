<%- contentFor('HeaderCss') %>
<link href="/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="/assets/rCSS/business.css">
<link rel="stylesheet" href="/assets/rCSS/shop.css">
<style>
  .out-of-stock {
    color: #dc3545;
    font-weight: bold;
  }

  .low-stock {
    color: #ffc107;
    font-weight: bold;
  }

  .in-stock {
    color: #28a745;
    font-size: 0.85rem;
  }
</style>
<%- contentFor('body') %>

<div class="container-fluid">
  <div class="row g-0">
    <!-- Products Column -->
    <div class="col-md-7 p-3">
      <div class="products-column">
        <div class="products-header">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
              <h4 class="page-title">امور التغليف</h4>
              <p class="page-subtitle">Select packaging materials for your orders</p>
            </div>
            <div class="search-container">
              <input type="text" class="form-control" placeholder="Search products..." id="searchInput">
              <select class="form-control" id="categoryFilter">
                <option value="all">All</option>
                <option value="normal-flyers">Normal Flyers</option>
                <option value="smart-flyers">Smart Flyers</option>
                <option value="boxes">Boxes</option>
                <option value="stickers">Stickers</option>
                <option value="labels">Labels</option>
                <option value="tapes">Tapes</option>
              </select>
            </div>
          </div>

          <div class="category-tabs">
            <div class="category-tab active" data-category="all">All Products</div>
            <div class="category-tab" data-category="normal-flyers">Normal Flyers</div>
            <div class="category-tab" data-category="smart-flyers">Smart Flyers</div>
            <div class="category-tab" data-category="boxes">Boxes</div>
            <div class="category-tab" data-category="stickers">Stickers</div>
            <div class="category-tab" data-category="labels">Labels</div>
            <div class="category-tab" data-category="tapes">Tapes</div>
          </div>
        </div>

        <div class="product-grid-header">
          <span></span>
          <span>Product</span>
          <span>Price</span>
          <span>Stock</span>
          <span>Action</span>
        </div>

        <!-- Products will be rendered here from database -->
        <% if (products && products.length > 0) { %>
        <% 
          let currentCategory = '';
          products.forEach(product => { 
            // Show category header if category changes
            if (product.category !== currentCategory) {
              currentCategory = product.category;
          %>
        <div class="category-header" data-category="<%= product.category %>">
          <span><%= product.category.toUpperCase().replace(/-/g, ' ') %></span>
          <% if (product.isNew) { %>
          <span class="new-badge">NEW</span>
          <% } %>
        </div>
        <% } %>

        <div class="product-card" data-category="<%= product.category %>" data-product-id="<%= product._id %>" data-product-name="<%= product.name %>" data-price="<%= product.finalPrice %>" data-stock="<%= product.stock %>">
          <img src="<%= product.images && product.images.length > 0 ? product.images[0] : '/assets/images/product-placeholder.jpg' %>" alt="<%= product.name %>" class="product-image">
          <div class="product-info">
            <h5 class="product-title"><%= product.name %></h5>
            <% if (product.size) { %>
            <div class="product-size">Size: <%= product.size %></div>
            <% } %>
            <% if (product.packQuantity && product.packQuantity > 1) { %>
            <div class="product-pack">Pack of <%= product.packQuantity %></div>
            <% } %>
            <% if (product.stock === 0) { %>
            <div class="out-of-stock">Out of stock</div>
            <% } else if (product.stock <= 5) { %>
            <div class="low-stock">Low stock: <%= product.stock %> <%= product.unit %></div>
            <% } else { %>
            <div class="in-stock">In stock: <%= product.stock %> <%= product.unit %></div>
            <% } %>
          </div>
          <div class="price-tag">
            <% if (product.discount > 0) { %>
            <div class="original-price">EGP <%= product.price.toFixed(2) %></div>
            <% } %>
            EGP <%= product.finalPrice.toFixed(2) %>
          </div>
          <div>
            <button class="add-btn" data-product-id="<%= product._id %>" data-product-name="<%= product.name %>" data-price="<%= product.finalPrice %>" data-category="<%= product.category %>" data-pack="<%= product.packQuantity || 1 %>" <%= product.stock === 0 ? 'disabled' : '' %>>
              <i class="bi bi-plus-lg"></i>
              Add
            </button>
          </div>
        </div>
        <% }); %>
        <% } else { %>
        <div class="text-center py-5">
          <i class="bi bi-box-seam fs-1 text-muted"></i>
          <p class="mt-3 text-muted">No products available at the moment</p>
        </div>
        <% } %>
      </div>
    </div>

    <!-- Cart Column -->
    <div class="col-md-5 p-4 cart-column d-flex flex-column">
      <div class="cart-header">
        <h4 class="mb-0">Order Summary</h4>
        <div class="cart-icon-container">
          <i class="bi bi-cart3 fs-4"></i>
          <div class="cart-badge" id="cartCount">0</div>
        </div>
      </div>

      <div id="cartItems" class="flex-grow-1 overflow-auto mb-3">
        <div class="empty-cart" id="emptyCart">
          <i class="bi bi-box"></i>
          <p>Your cart is empty</p>
          <small>Add items to get started</small>
        </div>
      </div>

      <div class="total-section">
        <div class="d-flex justify-content-between mb-2">
          <span>Subtotal:</span>
          <span id="subtotalAmount">EGP 0.00</span>
        </div>
        <div class="d-flex justify-content-between mb-2">
          <span>Delivery Fee:</span>
          <span id="deliveryFee">EGP 0.00</span>
        </div>
        <hr>
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h5>Total:</h5>
          <h4 class="mb-0" id="totalAmount">EGP 0.00</h4>
        </div>
        <button class="checkout-btn w-100 py-3" onclick="proceedToCheckout()">
          Checkout (EGP <span id="displayTotal">0.00</span>)
        </button>
      </div>
    </div>
  </div>
</div>

<%- contentFor('FooterJs') %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  // Government data for delivery fee calculation
  const governmentCategories = {
    'Cairo': ['Cairo', 'Giza', 'Qalyubia'],
    'Alexandria': ['Alexandria', 'Beheira', 'Matrouh'],
    'Delta-Canal': [
      'Dakahlia', 'Sharqia', 'Monufia', 'Gharbia',
      'Kafr el-Sheikh', 'Damietta', 'Port Said', 'Ismailia', 'Suez'
    ],
    'Upper-RedSea': [
      'Fayoum', 'Beni Suef', 'Minya', 'Asyut',
      'Sohag', 'Qena', 'Luxor', 'Aswan', 'Red Sea',
      'North Sinai', 'South Sinai', 'New Valley'
    ]
  };

  const deliveryFees = {
    'Cairo': 80,
    'Alexandria': 85,
    'Delta-Canal': 91,
    'Upper-RedSea': 116
  };

  function calculateDeliveryFee(government) {
    for (const [category, govs] of Object.entries(governmentCategories)) {
      if (govs.includes(government)) {
        return deliveryFees[category] || 80;
      }
    }
    return 80; // Default to Cairo fee
  }

  document.addEventListener('DOMContentLoaded', () => {
    class CartManager {
      constructor() {
        this.cart = new Map();
        this.deliveryFee = 0;
        this.initEventListeners();
        this.updateUI();
      }

      initEventListeners() {
        // Add to cart buttons
        document.querySelectorAll('.add-btn').forEach(btn => {
          if (!btn.disabled) {
            btn.addEventListener('click', () => {
              const productId = btn.dataset.productId;
              const product = btn.dataset.productName;
              const price = parseFloat(btn.dataset.price);
              const category = btn.dataset.category;
              const pack = btn.dataset.pack;
              const stock = parseInt(btn.closest('.product-card').dataset.stock);

              if (!isNaN(price)) {
                this.addItem(productId, product, price, category, pack, stock);
                // Add animation effect
                btn.classList.add('animate__animated', 'animate__pulse');
                setTimeout(() => {
                  btn.classList.remove('animate__animated', 'animate__pulse');
                }, 500);
              }
            });
          }
        });

        // Search and filter
        document.getElementById('searchInput').addEventListener('input', this.filterProducts.bind(this));
        document.getElementById('categoryFilter').addEventListener('change', this.filterByCategory.bind(this));

        // Category tabs
        document.querySelectorAll('.category-tab').forEach(tab => {
          tab.addEventListener('click', () => {
            document.querySelectorAll('.category-tab').forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            this.filterByCategory(tab.dataset.category);
          });
        });
      }

      addItem(productId, product, price, category, pack, stock) {
        const item = this.cart.get(productId) || {
          name: product,
          qty: 0,
          price: price,
          category: category,
          pack: pack,
          stock: stock
        };

        // Check stock
        if (item.qty >= stock) {
          Swal.fire({
            icon: 'warning',
            title: 'Stock Limit',
            text: `Maximum available quantity is ${stock}`,
            confirmButtonColor: '#FF7A00'
          });
          return;
        }

        item.qty++;
        this.cart.set(productId, item);
        this.updateUI();

        // Show toast notification
        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'success',
          title: `${product} added to cart`,
          showConfirmButton: false,
          timer: 1500,
          timerProgressBar: true
        });
      }

      removeItem(productId) {
        const item = this.cart.get(productId);
        if (item && item.qty > 1) {
          item.qty--;
          this.cart.set(productId, item);
        } else {
          this.cart.delete(productId);
        }
        this.updateUI();
      }

      calculateSubtotal() {
        return Array.from(this.cart.values()).reduce((total, item) => {
          return total + (item.qty * item.price);
        }, 0);
      }

      updateUI() {
        const cartItems = document.getElementById('cartItems');
        const emptyCart = document.getElementById('emptyCart');
        const cartCount = document.getElementById('cartCount');

        // Clear current cart items
        cartItems.innerHTML = '';
        cartItems.appendChild(emptyCart);

        // Update cart count
        const totalItems = Array.from(this.cart.values()).reduce((count, item) => count + item.qty, 0);
        cartCount.textContent = totalItems;

        // Show/hide empty cart message
        if (this.cart.size === 0) {
          emptyCart.style.display = 'flex';
        } else {
          emptyCart.style.display = 'none';

          this.cart.forEach((item, productId) => {
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item mb-3 p-3';
            cartItem.innerHTML = `
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <h5 class="mb-1">${item.name}</h5>
                  <p class="text-muted mb-0">EGP ${item.price.toFixed(2)} each</p>
                  <small>${item.pack > 1 ? `Pack of ${item.pack}` : ''}</small>
                </div>
                <div class="d-flex align-items-center gap-3">
                  <div class="quantity-control">
                    <button class="btn btn-sm text-danger" 
                            onclick="cartManager.removeItem('${productId}')">−</button>
                    <span class="fw-bold mx-2">${item.qty}</span>
                    <button class="btn btn-sm text-success" 
                            onclick="cartManager.addItem('${productId}', '${item.name}', ${item.price}, '${item.category}', '${item.pack}', ${item.stock})">+</button>
                  </div>
                  <div class="text-dark fw-bold">
                    EGP ${(item.qty * item.price).toFixed(2)}
                  </div>
                </div>
              </div>
            `;
            cartItems.appendChild(cartItem);
          });
        }

        const subtotal = this.calculateSubtotal();
        const total = subtotal + this.deliveryFee;

        document.getElementById('subtotalAmount').textContent = `EGP ${subtotal.toFixed(2)}`;
        document.getElementById('deliveryFee').textContent = `EGP ${this.deliveryFee.toFixed(2)}`;
        document.getElementById('totalAmount').textContent = `EGP ${total.toFixed(2)}`;
        document.getElementById('displayTotal').textContent = total.toFixed(2);
      }

      filterProducts() {
        const searchInput = document.getElementById('searchInput').value.toLowerCase();
        const categoryFilter = document.getElementById('categoryFilter').value;

        document.querySelectorAll('.product-card').forEach(card => {
          const productName = card.querySelector('h5').textContent.toLowerCase();
          const productCategory = card.dataset.category;

          const matchesSearch = productName.includes(searchInput);
          const matchesCategory = categoryFilter === 'all' || productCategory === categoryFilter;

          if (matchesSearch && matchesCategory) {
            card.style.display = 'grid';
          } else {
            card.style.display = 'none';
          }
        });

        this.updateCategoryHeaders();
      }

      filterByCategory(category) {
        if (typeof category === 'object') {
          category = document.getElementById('categoryFilter').value;
        }

        document.querySelectorAll('.product-card').forEach(card => {
          if (category === 'all' || card.dataset.category === category) {
            card.style.display = 'grid';
          } else {
            card.style.display = 'none';
          }
        });

        this.updateCategoryHeaders();
      }

      updateCategoryHeaders() {
        document.querySelectorAll('.category-header').forEach(header => {
          const nextCategory = header.nextElementSibling;
          let hasVisibleProducts = false;

          let current = nextCategory;
          while (current && !current.classList.contains('category-header')) {
            if (current.classList.contains('product-card') &&
              current.style.display !== 'none') {
              hasVisibleProducts = true;
              break;
            }
            current = current.nextElementSibling;
          }

          header.style.display = hasVisibleProducts ? 'flex' : 'none';
        });
      }
    }

    window.cartManager = new CartManager();
  });

  async function proceedToCheckout() {
    const subtotal = cartManager.calculateSubtotal();
    if (subtotal <= 0) {
      Swal.fire({
        title: 'Empty Cart',
        text: 'Please add items to your cart before checkout',
        icon: 'info',
        confirmButtonColor: '#FF7A00',
        confirmButtonText: 'Continue Shopping'
      });
      return;
    }

    // Show delivery information form
    const {
      value: formValues
    } = await Swal.fire({
      title: 'Delivery Information',
      html: `
        <div class="text-start">
          <div class="mb-3">
            <label class="form-label">Full Name <span class="text-danger">*</span></label>
            <input type="text" id="fullName" class="swal2-input" placeholder="Enter full name" style="width: 100%;">
          </div>
          <div class="mb-3">
            <label class="form-label">Phone Number <span class="text-danger">*</span></label>
            <input type="tel" id="phoneNumber" class="swal2-input" placeholder="Enter phone number" style="width: 100%;">
          </div>
          <div class="mb-3">
            <label class="form-label">Government <span class="text-danger">*</span></label>
            <select id="government" class="swal2-input" style="width: 100%;">
              <option value="">Select Government</option>
              <option value="Cairo">Cairo</option>
              <option value="Giza">Giza</option>
              <option value="Alexandria">Alexandria</option>
              <option value="Qalyubia">Qalyubia</option>
              <option value="Dakahlia">Dakahlia</option>
              <option value="Sharqia">Sharqia</option>
              <option value="Gharbia">Gharbia</option>
              <option value="Monufia">Monufia</option>
              <option value="Beheira">Beheira</option>
              <option value="Kafr el-Sheikh">Kafr el-Sheikh</option>
              <option value="Damietta">Damietta</option>
              <option value="Port Said">Port Said</option>
              <option value="Ismailia">Ismailia</option>
              <option value="Suez">Suez</option>
              <option value="Fayoum">Fayoum</option>
              <option value="Beni Suef">Beni Suef</option>
              <option value="Minya">Minya</option>
              <option value="Asyut">Asyut</option>
              <option value="Sohag">Sohag</option>
              <option value="Qena">Qena</option>
              <option value="Luxor">Luxor</option>
              <option value="Aswan">Aswan</option>
              <option value="Red Sea">Red Sea</option>
              <option value="Matrouh">Matrouh</option>
              <option value="North Sinai">North Sinai</option>
              <option value="South Sinai">South Sinai</option>
              <option value="New Valley">New Valley</option>
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Zone <span class="text-danger">*</span></label>
            <input type="text" id="zone" class="swal2-input" placeholder="Enter zone/area" style="width: 100%;">
          </div>
          <div class="mb-3">
            <label class="form-label">Address <span class="text-danger">*</span></label>
            <textarea id="address" class="swal2-textarea" placeholder="Enter full address" style="width: 100%;"></textarea>
          </div>
          <div class="mb-3">
            <label class="form-label">Notes (Optional)</label>
            <textarea id="notes" class="swal2-textarea" placeholder="Any special instructions" style="width: 100%;"></textarea>
          </div>
        </div>
      `,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonColor: '#FF7A00',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Continue',
      cancelButtonText: 'Back to Cart',
      width: '600px',
      preConfirm: () => {
        const fullName = document.getElementById('fullName').value;
        const phoneNumber = document.getElementById('phoneNumber').value;
        const government = document.getElementById('government').value;
        const zone = document.getElementById('zone').value;
        const address = document.getElementById('address').value;
        const notes = document.getElementById('notes').value;

        if (!fullName || !phoneNumber || !government || !zone || !address) {
          Swal.showValidationMessage('Please fill all required fields');
          return false;
        }

        return {
          fullName,
          phoneNumber,
          government,
          zone,
          address,
          notes
        };
      }
    });

    if (!formValues) return;

    // Calculate delivery fee based on government
    const deliveryFee = calculateDeliveryFee(formValues.government);
    cartManager.deliveryFee = deliveryFee;
    cartManager.updateUI();

    const total = subtotal + deliveryFee;

    // Show order confirmation
    const result = await Swal.fire({
      title: 'Confirm Order',
      html: `
        <div class="text-start">
          <h5>Order Summary</h5>
          <hr>
          <div class="d-flex justify-content-between mb-2">
            <span>Subtotal:</span>
            <strong>EGP ${subtotal.toFixed(2)}</strong>
          </div>
          <div class="d-flex justify-content-between mb-2">
            <span>Delivery Fee:</span>
            <strong>EGP ${deliveryFee.toFixed(2)}</strong>
          </div>
          <hr>
          <div class="d-flex justify-content-between mb-3">
            <h5>Total:</h5>
            <h4 style="color: #FF7A00;">EGP ${total.toFixed(2)}</h4>
          </div>
          <h5 class="mt-3">Delivery To:</h5>
          <p class="mb-1"><strong>${formValues.fullName}</strong></p>
          <p class="mb-1">${formValues.phoneNumber}</p>
          <p class="mb-1">${formValues.address}</p>
          <p class="mb-1">${formValues.zone}, ${formValues.government}</p>
          ${formValues.notes ? `<p class="mt-2 text-muted"><em>Note: ${formValues.notes}</em></p>` : ''}
        </div>
      `,
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#FF7A00',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Place Order',
      cancelButtonText: 'Cancel',
      width: '600px'
    });

    if (!result.isConfirmed) return;

    // Prepare order data
    const items = [];
    cartManager.cart.forEach((item, productId) => {
      items.push({
        productId: productId,
        quantity: item.qty
      });
    });

    const orderData = {
      items: items,
      fullName: formValues.fullName,
      phoneNumber: formValues.phoneNumber,
      address: formValues.address,
      government: formValues.government,
      zone: formValues.zone,
      notes: formValues.notes
    };

    // Submit order
    try {
      const response = await fetch('/api/shop/orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(orderData)
      });

      const data = await response.json();

      if (response.ok) {
        await Swal.fire({
          title: 'Order Placed!',
          html: `
            <p>Your order has been successfully placed.</p>
            <p><strong>Order Number:</strong> ${data.order.orderNumber}</p>
            <p class="mt-3">You can track your order in the "Shop Orders" page.</p>
          `,
          icon: 'success',
          confirmButtonColor: '#FF7A00'
        });

        // Clear cart and reload page
        cartManager.cart.clear();
        cartManager.deliveryFee = 0;
        cartManager.updateUI();

        // Redirect to shop orders page
        setTimeout(() => {
          window.location.href = '/business/shop/orders';
        }, 1500);
      } else {
        throw new Error(data.error || 'Failed to place order');
      }
    } catch (error) {
      console.error('Error placing order:', error);
      Swal.fire({
        title: 'Error',
        text: error.message || 'Failed to place order. Please try again.',
        icon: 'error',
        confirmButtonColor: '#FF7A00'
      });
    }
  }
</script>