<%- contentFor('HeaderCss') %>
<link href="/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
<!-- Remix Icons -->
<link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
<!-- Flatpickr CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<%- contentFor('body') %>
<style>
  /* Fix for dropdown menus in tables */
  .dropdown-fix .dropdown-menu {
    position: fixed !important;
    z-index: 1050 !important;
  }

  /* Ensure the table doesn't constrain the dropdown */
  #orderTable {
    overflow: visible !important;
  }

    .table-responsive{
      overflow: scroll !important;
    }
  /* Make sure parent containers don't clip the dropdown */
  .card-body,
  .card {
    overflow: visible !important;
  }

  .btn-close {
    filter: brightness(0) invert(1);
  }

  .form-control:focus,
  .form-check-input:focus {
    border-color: #F39720;
    box-shadow: 0 0 0 0.25rem rgba(76, 175, 80, 0.25);
  }

  .form-label {
    font-weight: 500;
    color: #333;
  }

  .readonly-field {
    background-color: #f8f9fa;
    border-left: 4px solid #F39720;
  }

  .feature-box {
    transition: all 0.3s ease;
    border: 1px solid #dee2e6;
    border-radius: 8px;
  }

  .feature-box:hover {
    background-color: #f0f9f0 !important;
    border-color: #F39720;
  }

  .feature-box .form-check-input:checked {
    background-color: #F39720;
    border-color: #F39720;
  }

  .btn-success {
    background-color: #F39720;
    border-color: #F39720;
  }

  .btn-success:hover {
    background-color: #F39720;
    border-color: #F39720;
  }

  .order-warning {
    display: none;
    color: #ff9800;
    font-size: 0.875rem;
    margin-top: 0.25rem;
  }

  .flatpickr-input {
    background-color: white !important;
  }

  .contact-info-note {
    font-size: 0.8rem;
    color: #666;
    margin-top: 0.25rem;
  }

  .required-asterisk {
    color: #dc3545;
    margin-left: 2px;
  }

  .sort {
    cursor: pointer !important;
   
  }

    
    .sort {
      cursor: pointer ;
      position: relative ;
    }
    
    .sort:after {
      content: "â†•"  ;
      position: absolute ;
      right: 8px ;
      color: #6c757d ;
      font-size: 0.8em ;
    }
    
    .noresult {
      padding: 2rem;
      text-align: center;
    }
    
    /* Additional styling to match your design */
    .form-check {
      min-height: 1.5rem;
    }
    
    .form-check-input {
      width: 1em;
      height: 1em;
      margin-top: 0.25em;
      vertical-align: top;
    }

.table-responsive.table-card {
  max-height: 70vh;
  overflow-y: auto;
  min-height: 300px;
}
.pagination-wrap { padding-top: 10px; }
</style>
<div class="row">
  <div class="col-lg-12">
    <div class="card" id="orderList">
      <div class="card-header border-0">
        <div class="row align-items-center gy-3">
          <div class="col-sm">
            <h5 class="card-title mb-0">Pick UPs </h5>
          </div>
          <div class="col-sm-auto">
            <div class="d-flex gap-1 flex-wrap">
              <button type="button" class="btn btn-success add-btn" data-bs-toggle="modal" id="create-btn" data-bs-target="#showModal"><i class="ri-add-line align-bottom me-1"></i> Create PickUp</button>
            </div>
          </div>
        </div>
      </div>
      <div class="card-body border border-dashed border-end-0 border-start-0">
        <form>
          <div class="row g-3">
            <div class="col-xxl-5 col-sm-6">
              <div class="search-box">
                <input type="text" class="form-control search" placeholder="Search for order ID, customer, order status or something...">
                <i class="ri-search-line search-icon"></i>
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-2 col-sm-6">
              <div>
                <input type="text" class="form-control" data-provider="flatpickr" data-date-format="d M, Y" data-range-date="true" id="demo-datepicker" placeholder="Select date">
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-2 col-sm-4">
              <div>
                <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="idStatus">
                  <option value="">Status</option>
                  <option value="all" selected>All</option>
                  <option value="Pending">Pending</option>
                  <option value="Inprogress">Inprogress</option>
                  <option value="Cancelled">Cancelled</option>
                  <option value="Pickups">Pickups</option>
                  <option value="Returns">Returns</option>
                  <option value="Delivered">Delivered</option>
                </select>
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-2 col-sm-4">
              <div>
                <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="idPayment">
                  <option value="">Select Payment</option>
                  <option value="all" selected>All</option>
                  <option value="Mastercard">Mastercard</option>
                  <option value="Paypal">Paypal</option>
                  <option value="Visa">Visa</option>
                  <option value="COD">COD</option>
                </select>
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-1 col-sm-4">
              <div>
                <button type="button" class="btn btn-primary w-100" onclick="SearchData();"> <i class="ri-equalizer-fill me-1 align-bottom"></i>
                  Filters
                </button>
              </div>
            </div>
            <!--end col-->
          </div>
          <!--end row-->
        </form>
      </div>
      <div class="card-body pt-0">
        <div>
            <ul class="nav nav-tabs nav-tabs-custom nav-success mb-3" role="tablist">
            <li class="nav-item">
              <button class="btn btn-link nav-link active All py-3" data-bs-toggle="tab" id="All" role="tab" aria-selected="true" onClick="filterPickups('Upcoming')">
              <i class="ri-calendar-event-fill me-1 align-bottom"></i> Upcoming Pickups
              </button>
            </li>
            <li class="nav-item">
              <button class="btn btn-link nav-link py-3 Delivered" data-bs-toggle="tab" id="Delivered" role="tab" aria-selected="false" onClick="filterPickups('Completed')">
              <i class="ri-history-line me-1 align-bottom"></i> Past Pickups
              </button>
            </li>
            </ul>

          <div class="table-responsive table-card mb-1">
            <table class="table table-nowrap align-middle" id="orderTable">
           <thead class="text-muted table-light">
             <tr class="text-uppercase">
               <th scope="col" style="width: 25px;">
                 <div class="form-check"> <input class="form-check-input" type="checkbox" id="checkAll" value="option"> </div>
               </th>
                 <th class="sort" data-sort="pickupNumber">Pickup Number</th>
                 <th class="sort" data-sort="pickup_address">Pickup Address</th>
                 <th class="sort" data-sort="contact_info">Contact Info</th>
                 <th class="sort" data-sort="pickup_date">Pickup Date</th>
                 <th class="sort" data-sort="number_of_items">Number of Items</th>
                 <th class="sort" data-sort="pickup_fee">Pickup Fee</th>
                 <th class="sort" data-sort="status">Status</th>
                 <th class="sort" data-sort="delivery_man">Delivery Man</th>
                 <th data-sort="action">Action</th>
             </tr>
           </thead>
              <tbody class="list form-check-all " id="TBody">
            
              </tbody>
            </table>
            <div class="noresult" style="display: none">
              <div class="text-center">
                <lord-icon src="https://cdn.lordicon.com/msoeawqm.json" trigger="loop" colors="primary:#405189,secondary:#0ab39c" style="width:75px;height:75px"></lord-icon>
                <h5 class="mt-2">Sorry! No Result Found</h5>
                <p class="text-muted">We've searched more than 150+ Orders We did not find any
                  orders for you search.</p>
              </div>
            </div>
          </div>
          <div class="d-flex justify-content-end">
            <div class="pagination-wrap hstack gap-2">
              <a class="page-item pagination-prev disabled" href="javascript:void(0);">
                Previous
              </a>
              <ul class="pagination listjs-pagination mb-0"></ul>
              <a class="page-item pagination-next" href="javascript:void(0);">
                Next
              </a>
            </div>
          </div>
        </div>
      <div class="modal fade" id="showModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content shadow">
            <div class="modal-header p-3">
              <h5 class="modal-title" id="exampleModalLabel">
                <i class="ri-truck-line me-2"></i>Create PickUP
              </h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="close-modal"></button>
            </div>
            <hr>
            <form class="tablelist-form" autocomplete="off">
              <div class="modal-body p-4">
                <input type="hidden" id="id-field" />

                <div class="mb-4">
                  <label for="numberOfOrders" class="form-label">Number of Orders <span class="required-asterisk">*</span></label>
                  <input type="number" min="1" id="numberOfOrders" name="numberOfOrders" class="form-control" placeholder="Enter number of orders" required />
                  <div id="orderWarning" class="order-warning">
                    <i class="ri-information-line me-1"></i> For efficiency, we recommend at least 3 orders per pickup.
                  </div>
                  <div id="pickupFeeHint" class="mt-2 small text-muted">
                    <i class="ri-money-dollar-circle-line me-1"></i>
                    Estimated Pickup Fee: <strong id="estimatedPickupFee">--</strong>
                  </div>
                </div>

                <div class="mb-4">
                  <label for="pickup-location" class="form-label">Place of Pickup <span class="required-asterisk">*</span></label>
                  <input type="text" id="pickup-location" name="pickupLocation" value="<%= userData.pickUpAdress.adressDetails %>, <%= userData.pickUpAdress.city %>, <%= userData.pickUpAdress.country %>" class="form-control readonly-field" placeholder="Enter place of pickup" readonly required />
                  <div class="contact-info-note">
                    <i class="ri-map-pin-line me-1"></i> Your saved pickup address will be used for this order.
                  </div>
                </div>

                <div class="mb-4">
                  <label for="contact-info" class="form-label">Contact Info <span class="required-asterisk">*</span></label>
                  <div class="input-group">
                    <span class="input-group-text"><i class="ri-phone-line"></i></span>
                    <input type="text" id="contact-info" name="phoneNumber" value="<%= userData.phoneNumber %>" class="form-control" placeholder="Enter contact info" required />
                  </div>
                  <div class="contact-info-note">
                    <i class="ri-whatsapp-line me-1"></i> Please ensure this number is available on WhatsApp for delivery updates.
                  </div>
                </div>

                <div class="mb-4">
                  <label for="date-field" class="form-label">Pick Up Date <span class="required-asterisk">*</span></label>
                  <div class="input-group">
                    <span class="input-group-text"><i class="ri-calendar-line"></i></span>
                    <input type="text" id="date-field" name="pickupDate" class="form-control" data-provider="flatpickr" required placeholder="Select date" />
                  </div>
                </div>

                <div class="mb-4">
                  <label for="pickup-notes" class="form-label">Pickup Notes</label>
                  <textarea id="pickup-notes" name="pickupNotes" class="form-control" placeholder="Enter any special instructions or notes for the pickup"></textarea>
                </div>

                <div class="row justify-content-between">
                  <div class="col-md-6 mb-3">
                  <div class="feature-box p-3 bg-light h-100">
                    <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="isFragileItems" id="fragile-item" value="true">
                    <label class="form-check-label d-flex align-items-center" for="fragile-item">
                      <i class="ri-alert-line me-2 text-warning"></i>
                      <div>
                      <strong>Fragile Item</strong>
                      <div class="small text-muted">Special handling required</div>
                      </div>
                    </label>
                    </div>
                  </div>
                  </div>
                  <div class="col-md-6 mb-3">
                  <div class="feature-box p-3 bg-light h-100">
                    <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="isLargeItems" id="large-item" value="true">
                    <label class="form-check-label d-flex align-items-center" for="large-item">
                      <i class="ri-truck-line me-2 text-primary"></i>
                      <div>
                      <strong>Large Item</strong>
                      <div class="small text-muted">Requires larger vehicle</div>
                      </div>
                    </label>
                    </div>
                  </div>
                  </div>
                </div>
              </div>
              <div class="modal-footer bg-light">
                <div class="hstack gap-2 justify-content-end">
                  <button type="button" class="btn btn-light" data-bs-dismiss="modal">
                    Close
                  </button>
                  <button type="submit" class="btn btn-success" id="add-btn">
                     Create 
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>



        <!--end modal -->
      </div>
    </div>

  </div>
  <!--end col-->
</div>
<!--end row-->

<%- contentFor('FooterJs') %>

<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="/assets/libs/sweetalert2/sweetalert2.min.js"></script>

<script>
  (function initPickupFilterDate(){
    function init() {
      var el = document.getElementById('demo-datepicker');
      if (!el) return;
      try {
        flatpickr(el, { mode: 'range', dateFormat: 'd M, Y', allowInput: true });
        el.addEventListener('focus', function(){ if (el._flatpickr) { el._flatpickr.open(); } });
      } catch (e) { console.error('Flatpickr init error:', e); }
    }
    if (typeof window.flatpickr === 'undefined') {
      var s = document.createElement('script');
      s.src = '/assets/libs/flatpickr/flatpickr.min.js';
      s.onload = init;
      document.head.appendChild(s);
    } else { init(); }
  })();
</script>

<script>



  const tableBody = document.getElementById('TBody');
  const NoResult = document.querySelector('.noresult');
  const checkAll = document.getElementById('checkAll');
  const estimatedPickupFeeEl = document.getElementById('estimatedPickupFee');

  // Replace client-side listing with server-side pagination version
  const PICKUPS_PER_PAGE = 30;
  let currentPage = 1;
  let lastPaginationData = { currentPage: 1, totalPages: 1, totalCount: 0 };

  function getFiltersFromUI() {
    const searchInput = document.querySelector('.search-box .search');
    const dateInput = document.getElementById('demo-datepicker');
    const statusSelect = document.getElementById('idStatus');
    let dateFrom = '', dateTo = '';
    if (dateInput && dateInput.value) {
      if (dateInput.value.includes('to')) {
        const parts = dateInput.value.split('to').map(s => s.trim());
        dateFrom = parts[0];
        dateTo = parts[1];
      } else {
        dateFrom = dateInput.value.trim();
        dateTo = dateInput.value.trim();
      }
    }
    return {
      search: (searchInput && searchInput.value ? searchInput.value.trim() : ''),
      status: (statusSelect && statusSelect.value ? statusSelect.value : 'all'),
      dateFrom,
      dateTo
    };
  }

  async function fetchPickups(tabType = 'Upcoming', page = 1) {
    try {
      tableBody.innerHTML = `
        <tr>
          <td colspan="10" class="text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </td>
        </tr>
      `;
      const filters = getFiltersFromUI();
      const params = new URLSearchParams();
      params.append('limit', PICKUPS_PER_PAGE);
      params.append('page', page);
      params.append('pickupType', tabType);
      if (filters.status && filters.status !== 'all') params.append('status', filters.status);
      if (filters.search) params.append('search', filters.search);
      if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);
      if (filters.dateTo) params.append('dateTo', filters.dateTo);

      const url = `/business/get-pickups?${params.toString()}`;
      const response = await fetch(url);
      const data = await response.json();
      if (response.ok && data.pickups) {
        lastPaginationData = data.pagination;
        populatePickupsTable(data.pickups);
        updatePaginationBar();
      } else {
        Swal.fire({ icon: 'error', title: 'Oops...', text: `Error fetching pickups: ${data.message || 'Unknown error'}` });
      }
    } catch (error) {
      console.error('Error fetching pickups:', error);
    }
  }

  function filterPickups(tabType) {
    currentPage = 1;
    fetchPickups(tabType, currentPage);
  }

  function gotoPage(page) {
    if (page < 1 || page > lastPaginationData.totalPages) return;
    currentPage = page;
    fetchPickups('Upcoming', currentPage);
  }

  function updatePaginationBar() {
    const prev = document.querySelector('.pagination-prev');
    const next = document.querySelector('.pagination-next');
    const ul = document.querySelector('.listjs-pagination');
    if (!ul) return;
    ul.innerHTML = '';
    const { currentPage, totalPages } = lastPaginationData;
    if (totalPages > 1 || totalPages === 0) {
      let startPage = Math.max(1, currentPage - 2);
      let endPage = Math.min(totalPages, currentPage + 2);
      if (currentPage <= 3) endPage = Math.min(totalPages, 5);
      if (currentPage + 2 > totalPages) startPage = Math.max(1, totalPages - 4);
      for (let p = startPage; p <= endPage; p++) {
        const li = document.createElement('li');
        li.className = `page-item${p === currentPage ? ' active' : ''}`;
        const a = document.createElement('a');
        a.className = 'page-link';
        a.textContent = p;
        a.href = 'javascript:void(0);';
        a.onclick = () => gotoPage(p);
        li.appendChild(a);
        ul.appendChild(li);
      }
    }
    if (prev) { prev.classList.toggle('disabled', currentPage === 1); prev.onclick = () => gotoPage(currentPage - 1); }
    if (next) { next.classList.toggle('disabled', currentPage === totalPages); next.onclick = () => gotoPage(currentPage + 1); }
  }

  function SearchData() {
    currentPage = 1;
    fetchPickups('Upcoming', currentPage);
  }

  // On load
  document.addEventListener('DOMContentLoaded', () => fetchPickups('Upcoming', 1));


  document.addEventListener('DOMContentLoaded', function() {


    // Initialize flatpickr with custom formatting
    flatpickr("#date-field", {
      dateFormat: "D, d M Y",
      minDate: "today",
      altInput: true,
      altFormat: "D, d M Y",
      disableMobile: true,
      onChange: function(selectedDates, dateStr) {
        const today = new Date();
        const tomorrow = new Date();
        tomorrow.setDate(today.getDate() + 1);

        if (selectedDates[0].toDateString() === tomorrow.toDateString()) {
          this.altInput.value = "Tomorrow, " + selectedDates[0].toLocaleDateString('en-US', {
            day: 'numeric',
            month: 'short'
          });
        }
      }
    });

    // Add validation for number of orders
    const numberOfOrdersInput = document.getElementById('numberOfOrders');
    const orderWarning = document.getElementById('orderWarning');

    numberOfOrdersInput.addEventListener('input', function() {
      const value = parseInt(this.value);
      if (value < 3) {
        orderWarning.style.display = 'block';
      } else {
        orderWarning.style.display = 'none';
      }
      updateEstimatedPickupFee(value);
    });

    // Initialize estimated fee on open
    updateEstimatedPickupFee(parseInt(numberOfOrdersInput.value || '0'));

    // Form submission
    const createPickupForm = document.querySelector('.tablelist-form');
    createPickupForm.addEventListener('submit', async (e) =>{
      e.preventDefault();

      const formData = new FormData(createPickupForm);
      const data = Object.fromEntries(formData.entries());
    
      try{

        const response = await fetch('/business/pickup/create-pickup', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        if(!response.ok){
          throw new Error('Failed to create pickup');
        }else{
          Swal.fire({
            icon: 'success',
            title: 'Pickup Created',
            text: 'Your pickup has been successfully created!',
            showConfirmButton: true,
            timer: 1500
          }).then(() => {
            window.location.reload();
          });
        }

      }catch(error){
        console.error(error);
      }


    });

  });
  

  
  function getPickupStatusDetails(status) {
    let badgeClass = '';
    let statusText = '';

    if (status === 'new') {
      badgeClass = 'bg-primary-subtle text-primary';
      statusText = 'New';
    } else if (status === 'driverAssigned') {
      badgeClass = 'bg-secondary-subtle text-secondary';
      statusText = 'Driver Assigned';
    } else if (status === 'pickedUp') {
      badgeClass = 'bg-info-subtle text-info';
      statusText = 'Picked Up';
    } else if (status === 'inStock') {
      badgeClass = 'bg-warning-subtle text-warning';
      statusText = 'In Stock';
    } else if (status === 'inProgress') {
      badgeClass = 'bg-success-subtle text-success';
      statusText = 'In Progress';
    } else if (status === 'completed') {
      badgeClass = 'bg-success-subtle text-success';
      statusText = 'Completed';
    } else if (status === 'canceled') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Canceled';
    } else if (status === 'rejected') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Rejected';
    } else if (status === 'returned') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Returned';
    } else if (status === 'terminated') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Terminated';
    } else {
      statusText = 'Unknown';
    }

    return { badgeClass, statusText };
  }

  // Removed client-side base fee logic; get from server

  function formatCurrency(value){
    try { return new Intl.NumberFormat('en-EG', { style: 'currency', currency: 'EGP' }).format(value || 0); } catch { return `${value || 0} EGP`; }
  }

  async function updateEstimatedPickupFee(numOrders){
    try {
      const response = await fetch('/business/pickup/calculate-fee', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ numberOfOrders: numOrders })
      });
      const data = await response.json();
      if (response.ok && data && typeof data.fee !== 'undefined') {
        estimatedPickupFeeEl.textContent = formatCurrency(data.fee);
      } else {
        estimatedPickupFeeEl.textContent = '--';
      }
    } catch (e) {
      estimatedPickupFeeEl.textContent = '--';
    }
  }

  if (typeof populatePickupsTable !== 'function') {
    function populatePickupsTable(pickups) {
      tableBody.innerHTML = "";
      (pickups || []).forEach(pickup => {
        const row = document.createElement('tr');
        if (pickup.picikupStatus === 'new') {
          row.classList.add('table-warning');
        } else if (pickup.picikupStatus === 'rejected' || pickup.picikupStatus === 'returned') {
          row.classList.add('table-danger');
        }
        const details = typeof getPickupStatusDetails === 'function' ? getPickupStatusDetails(pickup.picikupStatus) : { badgeClass: '', statusText: pickup.statusLabel || pickup.picikupStatus };
        row.innerHTML = `
          <th scope="row">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" name="checkAll[]" value="${pickup.pickupNumber}">
            </div>
          </th>
          <td class="id"><a href="/business/pickup-details/${pickup.pickupNumber}" class="fw-medium link-primary">${pickup.pickupNumber}</a></td>
          <td class="pickup_address">
            ${pickup.business?.pickUpAdress?.adressDetails || ''}<br>
            <span class="text-muted">${pickup.business?.pickUpAdress?.city || ''}</span>
          </td>
          <td class="contact_info">${pickup.phoneNumber || ''}</td>
          <td class="pickup_date">
            ${pickup.pickupDate ? new Date(pickup.pickupDate).toLocaleDateString('en-US', { weekday: 'long' }) : ''}<br>
            ${pickup.pickupDate ? new Date(pickup.pickupDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) : ''}
          </td>
          <td class="number_of_items text-center">${pickup.numberOfOrders || 0}</td>
          <td class="pickup_fee"><strong>${(pickup.pickupFees || 0)} EGP</strong></td>
          <td class="status"><span class="badge text-uppercase fs-6 ${details.badgeClass}">${details.statusText}</span></td>
          <td class="delivery_man">${pickup.assignedDriver ? `<strong>${(pickup.assignedDriver.name || '').split(' ').slice(0, 2).join(' ')}</strong>` : 'Not Assigned'}</td>
          <td>
            <div class="dropdown dropdown-fix">
              <button class="btn btn-soft-secondary btn-sm dropdown" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="ri-more-fill align-middle"></i>
              </button>
              <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="/business/pickup-details/${pickup.pickupNumber}"><i class="ri-eye-fill align-bottom me-2 text-primary"></i> <span class="fs-6">View Details</span></a></li>
              </ul>
            </div>
          </td>`;
        tableBody.appendChild(row);
      });
    }
  }


</script>

<!-- ecommerce-order init js -->

<!-- App js -->