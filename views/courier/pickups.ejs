<%- contentFor('HeaderCss') %>
<link href="/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
<!-- Remix Icons -->
<link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
<!-- Flatpickr CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<%- contentFor('body') %>
<style>
  .zone-card {
    margin-bottom: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }

  .zone-header {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 8px 8px 0 0;
    border-bottom: 2px solid #F39720;
  }

  .business-card {
    margin: 10px;
    border-radius: 6px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.05);
  }

  .business-header {
    padding: 10px 15px;
    background-color: #f1f5f9;
    border-radius: 6px 6px 0 0;
    border-bottom: 1px solid #e0e0e0;
  }

  .pickup-item {
    padding: 12px 15px;
    border-bottom: 1px solid #eee;
    transition: background-color 0.2s;
  }

  .pickup-item:hover {
    background-color: #f9f9f9;
  }

  .pickup-item:last-child {
    border-bottom: none;
  }

  .pickup-btn {
    min-width: 120px;
  }

  /* Fix for dropdown menus */
  .dropdown-fix .dropdown-menu {
    position: fixed !important;
    z-index: 1050 !important;
  }

  /* Ensure containers don't clip the dropdown */
  .card-body,
  .card {
    overflow: visible !important;
  }

  .badge-count {
    font-size: 12px;
    padding: 3px 6px;
    border-radius: 10px;
  }

  .pickup-status {
    font-size: 0.85rem;
    padding: 4px 8px;
  }

  .empty-state {
    padding: 40px 20px;
    text-align: center;
  }

  .btn-success {
    background-color: #F39720;
    border-color: #F39720;
  }

  .btn-success:hover {
    background-color: #e08a1b;
    border-color: #e08a1b;
  }

  .btn-danger {
    background-color: #dc3545;
    border-color: #dc3545;
  }

  .btn-danger:hover {
    background-color: #c82333;
    border-color: #bd2130;
  }

  .form-control:focus,
  .form-check-input:focus {
    border-color: #F39720;
    box-shadow: 0 0 0 0.25rem rgba(243, 151, 32, 0.25);
  }

  .paper-size-option {
    text-align: center;
    cursor: pointer;
    transition: transform 0.3s, background-color 0.3s;
    padding: 10px;
    border-radius: 8px;
    background-color: #f8f9fa;
  }

  .paper-size-option:hover {
    transform: scale(1.1);
    background-color: #e9ecef;
  }

  .paper-size-option.selected {
    background-color: #F39720;
    color: white;
  }

  .paper-size-option p {
    margin-top: 10px;
  }

  .table-warining2{
    background-color: #fff3cde0;
    /* color: #664d03; */
    border-color: #ffecb5;
  }

</style>

<div class="row">
  <div class="col-lg-12">
    <div class="card" id="pickupList">
      <div class="card-header border-0">
        <div class="row align-items-center gy-3">
          <div class="col-sm">
            <h5 class="card-title mb-0">Your Assigned Pickups</h5>
          </div>
        </div>
      </div>

      <div class="card-body border border-dashed border-end-0 border-start-0">
        <form>
          <div class="row g-3">
            <div class="col-xxl-5 col-sm-6">
              <div class="search-box">
                <input type="text" class="form-control search" id="searchInput" placeholder="Search for pickup ID, business, zone...">
                <i class="ri-search-line search-icon"></i>
              </div>
            </div>
            <div class="col-xxl-2 col-sm-6">
              <div>
                <input type="text" class="form-control" data-provider="flatpickr" data-date-format="d M, Y" data-range-date="true" id="demo-datepicker" placeholder="Select date">
              </div>
            </div>
            <div class="col-xxl-2 col-sm-4">
              <div>
                <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="statusFilter">
                  <option value="all" selected>All Statuses</option>
                  <option value="new">New</option>
                  <option value="driverAssigned">Driver Assigned</option>
                  <option value="pickedUp">Picked Up</option>
                  <option value="completed">Completed</option>
                  <option value="inStock">In Stock</option>
                  <option value="canceled">Canceled</option>
                  <option value="rejected">Rejected</option>
                  <option value="returned">Returned</option>
                  <option value="terminated">Terminated</option>
                </select>
              </div>
            </div>
            <div class="col-xxl-1 col-sm-4">
              <div>
                <button type="button" class="btn btn-primary w-100" onclick="applyFilters()">
                  <i class="ri-equalizer-fill me-1 align-bottom"></i> Filters
                </button>
              </div>
            </div>
          </div>
        </form>
      </div>

      <div class="card-body pt-0">
        <div>
          <ul class="nav nav-tabs nav-tabs-custom nav-success mb-3" role="tablist">
            <li class="nav-item">
              <button class="btn btn-link nav-link active All py-3" data-bs-toggle="tab" id="All" role="tab" aria-selected="true" onClick="filterPickups('Upcoming')">
                <i class="ri-calendar-event-fill me-1 align-bottom"></i> Upcoming Pickups
              </button>
            </li>
            <li class="nav-item">
              <button class="btn btn-link nav-link py-3 Completed" data-bs-toggle="tab" id="Completed" role="tab" aria-selected="false" onClick="filterPickups('Completed')">
                <i class="ri-checkbox-circle-line me-1 align-bottom"></i> Completed
              </button>
            </li>
            <li class="nav-item">
              <button class="btn btn-link nav-link py-3 Rejected" data-bs-toggle="tab" id="Rejected" role="tab" aria-selected="false" onClick="filterPickups('Rejected')">
                <i class="ri-close-circle-line me-1 align-bottom"></i> Rejected
              </button>
            </li>
          </ul>

          <!-- Pickups Container -->
          <div id="pickupsContainer" class="mb-4">
            <!-- Pickups will be inserted here dynamically -->
            <div class="text-center p-4">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <p class="mt-2">Loading pickups...</p>
            </div>
          </div>

          <!-- No Results -->
          <div class="noresult empty-state" id="NoResult" style="display: none">
            <div class="text-center">
              <lord-icon src="https://cdn.lordicon.com/msoeawqm.json" trigger="loop" colors="primary:#405189,secondary:#F39720" style="width:75px;height:75px"></lord-icon>
              <h5 class="mt-2">Sorry! No Pickups Found</h5>
              <p class="text-muted">Try adjusting your search or filter to find what you're looking for.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Pickup Actions Modal -->
<div class="modal fade" id="pickupActionsModal" tabindex="-1" aria-labelledby="pickupActionsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="pickupActionsModalLabel">Pickup Actions</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="pickupActionsForm">
          <input type="hidden" id="actionPickupId" name="actionPickupId" value="">
          <div class="mb-3">
            <label for="actionReason" class="form-label">Reason</label>
            <select class="form-select" id="actionReason" name="actionReason">
              <option value="">Select a reason</option>
              <option value="business_closed">Business closed</option>
              <option value="no_packages_ready">No packages ready</option>
              <option value="business_refused">Business refused</option>
              <option value="wrong_address">Wrong address</option>
              <option value="other">Other</option>
            </select>
          </div>
          <div class="mb-3" id="otherReasonContainer" style="display: none;">
            <label for="otherReason" class="form-label">Specify reason</label>
            <textarea class="form-control" id="otherReason" name="otherReason" rows="3"></textarea>
          </div>
          <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" id="confirmActionBtn">Confirm</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>



<%- contentFor('FooterJs') %>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="/assets/libs/sweetalert2/sweetalert2.min.js"></script>

<script>
  // Global variables
  let allPickups = [];
  let currentFilter = 'Upcoming';
  const pickupsContainer = document.getElementById('pickupsContainer');
  const noResultElement = document.getElementById('NoResult');

  // Event Listeners
  document.addEventListener("DOMContentLoaded", () => {
    fetchPickups();

    // Initialize flatpickr
    flatpickr("#demo-datepicker", {
      mode: "range",
      dateFormat: "d M, Y",
      onClose: function(selectedDates, dateStr, instance) {
        if (selectedDates.length > 0) {
          // You can filter by date range here if needed
        }
      }
    });

    // Setup action reason dropdown change event
    document.getElementById('actionReason').addEventListener('change', function() {
      const otherReasonContainer = document.getElementById('otherReasonContainer');
      if (this.value === 'other') {
        otherReasonContainer.style.display = 'block';
      } else {
        otherReasonContainer.style.display = 'none';
      }
    });
  });

  // Fetch Pickups
  async function fetchPickups(status = "Upcoming") {
    try {
      showLoadingSpinner();
      currentFilter = status;

      const response = await fetch(`/courier/get-pickups?pickupType=${status}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        credentials: 'same-origin'
      });
      const pickups = await response.json();

      if (response.ok) {
        allPickups = pickups;
        handlePickupsResponse(pickups);
      } else {
        showError(`Error fetching pickups: ${pickups.message || 'Unknown error'}`);
      }
    } catch (error) {
      console.error("Error fetching pickups:", error);
      showError("Failed to load pickups. Please try again later.");
    }
  }

  function showLoadingSpinner() {
    pickupsContainer.innerHTML = `
      <div class="text-center p-4">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading pickups...</p>
      </div>
    `;
  }

  function showError(message) {
    pickupsContainer.innerHTML = `
      <div class="alert alert-danger" role="alert">
        ${message}
      </div>
    `;
  }

  function handlePickupsResponse(pickups) {
    if (!pickups || pickups.length === 0) {
      pickupsContainer.innerHTML = '';
      noResultElement.style.display = "block";
      return;
    }

    noResultElement.style.display = "none";
    organizeAndDisplayPickups(pickups);
  }

  function organizeAndDisplayPickups(pickups) {
    // Group pickups by zone
    const pickupsByZone = {};

    pickups.forEach(pickup => {
      const zone = pickup.business?.pickUpAdress?.city || 'Unknown Zone';
      const businessName = pickup.business?.brandInfo?.brandName || 'Unknown Business';

      if (!pickupsByZone[zone]) {
        pickupsByZone[zone] = {};
      }

      if (!pickupsByZone[zone][businessName]) {
        pickupsByZone[zone][businessName] = [];
      }

      pickupsByZone[zone][businessName].push(pickup);
    });

    // Generate HTML
    let html = '';

    // For each zone
    Object.keys(pickupsByZone).sort().forEach(zone => {
      const businesses = pickupsByZone[zone];
      const totalPickupsInZone = Object.values(businesses).flat().length;

      html += `
      <div class="zone-card">
        <div class="zone-header">
        <div class="d-flex justify-content-between align-items-center">
          <h5 class="mb-0">
          <i class="ri-map-pin-line me-1"></i> ${zone}
          <span class="badge bg-primary badge-count ms-2">${totalPickupsInZone} pickups</span>
          </h5>
          <button class="btn btn-sm btn-outline-primary" onclick="toggleZone('zone-${zone.replace(/\s+/g, '-')}')">
          <i class="ri-arrow-down-s-line"></i>
          </button>
        </div>
        </div>
        <div class="zone-content" id="zone-${zone.replace(/\s+/g, '-')}">
      `;

      // For each business in this zone
      Object.keys(businesses).sort().forEach(businessName => {
      const businessPickups = businesses[businessName];

      html += `
        <div class="business-card">
        <div class="business-header">
          <div class="d-flex justify-content-between align-items-center">
          <h6 class="mb-0">
            <i class="ri-store-2-line me-1"></i> ${businessName}
            <span class="badge bg-info badge-count ms-2">${businessPickups.length} pickups</span>
          </h6>
          <div>
            <!-- <button class="btn btn-sm btn-danger me-2" onclick="rejectAllBusinessPickups('${businessName}', '${zone}')">
            <i class="ri-close-circle-line me-1"></i> Reject All
            </button> -->
            <button class="btn btn-sm btn-outline-secondary" onclick="toggleBusiness('business-${businessName.replace(/\s+/g, '-')}-${zone.replace(/\s+/g, '-')}')">
            <i class="ri-arrow-down-s-line"></i>
            </button>
          </div>
          </div>
        </div>
        <div class="business-pickups" id="business-${businessName.replace(/\s+/g, '-')}-${zone.replace(/\s+/g, '-')}">
      `;

      // For each pickup in this business
      businessPickups.forEach(pickup => {
        const statusDetails = getPickupStatusDetails(pickup.picikupStatus);
          
        // Add table-warning class for assigned pickups, similar to orders.js
        const rowClass = pickup.picikupStatus && pickup.picikupStatus.toLowerCase() === 'driverassigned' ? 'table-warining2' : '';
        // Add table-danger class for rejected/returned pickups
        const isDanger = pickup.picikupStatus && ['rejected', 'returned'].includes(pickup.picikupStatus.toLowerCase());
        const rowDangerClass = isDanger ? 'table-danger' : '';

        html += `
        <div class="pickup-item ${rowClass} ${rowDangerClass}" data-pickup-id="${pickup.pickupNumber}">
          <div class="row align-items-center">
          <div class="col-md-2 col-sm-6">
            <div class="d-flex align-items-center">
            <div class="form-check me-2">
              <input class="form-check-input" type="checkbox" value="${pickup.pickupNumber}" name="pickupCheckbox">
            </div>
            <div>
              <a href="/courier/pickup-details/${pickup.pickupNumber}" class="fw-medium link-primary">#${pickup.pickupNumber}</a>
              <div class="text-muted small">${new Date(pickup.pickupDate).toLocaleDateString()}</div>
            </div>
            </div>
          </div>
          <div class="col-md-3 col-xs-6">
            <div>
            <div class="fw-medium">${pickup.business?.pickUpAdress?.adressDetails || 'No address'}</div>
            <div class="text-muted small">${pickup.phoneNumber || 'No phone'}</div>
            </div>
          </div>
          <div class="col-md-2 col-sm-6">
            <div>
            <span class="badge ${statusDetails.badgeClass} pickup-status">${statusDetails.statusText}</span>
            </div>
          </div>
          <div class="col-md-1 col-sm-6">
            <div class="">Expected:<br><strong>${pickup.numberOfOrders || 0}</strong> orders</div>
          </div>
          <div class="col-md-1 col-sm-6">
            <div class="">Picked up:<br><strong>${pickup.ordersPickedUp.length || 0}</strong> orders</div>
          </div>
          <div class="col-md-2 col-sm-6">
            <div class="fw-medium">${new Date(pickup.pickupDate).toLocaleDateString('en-US', { weekday: 'short' })}</div>
            <div class="text-muted small">${new Date(pickup.pickupDate).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</div>
          </div>
          ${pickup.picikupStatus !== 'completed' && pickup.picikupStatus !== 'inStock' && pickup.picikupStatus !== 'canceled' && pickup.picikupStatus !== 'rejected' && pickup.picikupStatus !== 'returned' && pickup.picikupStatus !== 'terminated' ? `        
          <div class="col-md-1 col-sm-12">
            <div class="d-flex gap-2 justify-content-end">
          
            <div class="dropdown dropdown-fix">
              <button class="btn btn-light btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
              <i class="ri-more-2-fill"></i>
              </button>
              <ul class="dropdown-menu">
              <li>
                <button class="dropdown-item" onclick="showPickupActions('${pickup._id}', '${pickup.pickupNumber}', 'business_closed')">
                <i class="ri-close-circle-line me-2 text-danger"></i> Reject Pickup
                </button>
              </li>
              <li>
                <a class="dropdown-item" href="/courier/pickup-details/${pickup.pickupNumber}">
                <i class="ri-information-line me-2 text-info"></i> View Details
                </a>
              </li>
              <li>
                <a class="dropdown-item" href="https://maps.google.com/?q=${encodeURIComponent(pickup.business?.pickUpAdress?.adressDetails || '')}" target="_blank">
                <i class="ri-map-pin-line me-2 text-success"></i> Navigate
                </a>
              </li>
              </ul>
            </div>
            </div>
          </div>
          ` : ''}
          </div>
        </div>
        `;
      });

      html += `
        </div>
        </div>
      `;
      });

      html += `
        </div>
      </div>
      `;
    });

    pickupsContainer.innerHTML = html;
  }

  function getPickupStatusDetails(status) {
    let badgeClass = '';
    let statusText = '';

    if (!status) {
      status = 'unknown';
    }

    switch (status.toLowerCase()) {
      case 'new':
        badgeClass = 'bg-primary-subtle text-primary';
        statusText = 'New';
        break;
      case 'driverassigned':
        badgeClass = 'bg-secondary-subtle text-secondary';
        statusText = 'Assigned';
        break;
      case 'pickedup':
        badgeClass = 'bg-success-subtle text-success';
        statusText = 'Picked Up';
        break;
      case 'instock':
        badgeClass = 'bg-info-subtle text-info';
        statusText = 'In Stock';
        break;
      case 'inprogress':
        badgeClass = 'bg-warning-subtle text-warning';
        statusText = 'In Progress';
        break;
      case 'completed':
        badgeClass = 'bg-success-subtle text-success';
        statusText = 'Completed';
        break;
      case 'canceled':
      case 'cancelled':
        badgeClass = 'bg-danger-subtle text-danger';
        statusText = 'Canceled';
        break;
      case 'rejected':
        badgeClass = 'bg-danger-subtle text-danger';
        statusText = 'Rejected';
        break;
      default:
        badgeClass = 'bg-secondary-subtle text-secondary';
        statusText = 'Unknown';
    }

    return {
      badgeClass,
      statusText
    };
  }

  // Toggle zone visibility
  function toggleZone(zoneId) {
    const zoneContent = document.getElementById(zoneId);
    if (zoneContent.style.display === 'none') {
      zoneContent.style.display = 'block';
    } else {
      zoneContent.style.display = 'none';
    }
  }

  // Toggle business visibility
  function toggleBusiness(businessId) {
    const businessContent = document.getElementById(businessId);
    if (businessContent.style.display === 'none') {
      businessContent.style.display = 'block';
    } else {
      businessContent.style.display = 'none';
    }
  }

  // Filter pickups
  function filterPickups(status) {
    console.log("Filtering pickups by status:", status);
    fetchPickups(status);
  }

  // Apply search and filters
  function applyFilters() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const statusFilter = document.getElementById('statusFilter').value;

    let filteredPickups = [...allPickups];

    // Apply status filter if not "all"
    if (statusFilter !== 'all') {
      filteredPickups = filteredPickups.filter(pickup =>
        pickup.picikupStatus && pickup.picikupStatus.toLowerCase() === statusFilter.toLowerCase()
      );
    }

    // Apply search term
    if (searchTerm) {
      filteredPickups = filteredPickups.filter(pickup =>
        (pickup.pickupNumber && pickup.pickupNumber.toLowerCase().includes(searchTerm)) ||
        (pickup.business?.brandInfo?.brandName && pickup.business.brandInfo.brandName.toLowerCase().includes(searchTerm)) ||
        (pickup.business?.pickUpAdress?.city && pickup.business.pickUpAdress.city.toLowerCase().includes(searchTerm)) ||
        (pickup.business?.pickUpAdress?.adressDetails && pickup.business.pickUpAdress.adressDetails.toLowerCase().includes(searchTerm)) ||
        (pickup.phoneNumber && pickup.phoneNumber.toLowerCase().includes(searchTerm))
      );
    }

    handlePickupsResponse(filteredPickups);
  }


  // Reject all pickups for a business
  function rejectAllBusinessPickups(businessName, zone) {
    Swal.fire({
      title: 'Reject All Pickups?',
      text: `Are you sure you want to reject all pickups for ${businessName} in ${zone}?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#dc3545',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Yes, reject all!'
    }).then((result) => {
      if (result.isConfirmed) {
        // Show reason selection
        Swal.fire({
          title: 'Select Reason',
          input: 'select',
          inputOptions: {
            'business_closed': 'Business closed',
            'no_packages_ready': 'No packages ready',
            'business_refused': 'Business refused',
            'wrong_address': 'Wrong address',
            'other': 'Other'
          },
          inputPlaceholder: 'Select a reason',
          showCancelButton: true,
          inputValidator: (value) => {
            return new Promise((resolve) => {
              if (value) {
                resolve();
              } else {
                resolve('You need to select a reason');
              }
            });
          }
        }).then((result) => {
          if (result.isConfirmed) {
            let reason = result.value;

            // If reason is "other", ask for details
            if (reason === 'other') {
              Swal.fire({
                title: 'Specify Reason',
                input: 'textarea',
                inputPlaceholder: 'Enter the reason for rejection',
                showCancelButton: true,
                inputValidator: (value) => {
                  return new Promise((resolve) => {
                    if (value) {
                      resolve();
                    } else {
                      resolve('You need to enter a reason');
                    }
                  });
                }
              }).then((result) => {
                if (result.isConfirmed) {
                  rejectBusinessPickups(businessName, zone, 'other', result.value);
                }
              });
            } else {
              rejectBusinessPickups(businessName, zone, reason);
            }
          }
        });
      }
    });
  }


    // Complete pickup
  function completePickup(pickupNumber) {
    Swal.fire({
      title: 'Confirm Pickup',
      text: `Mark pickup #${pickupNumber} as completed?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#28a745',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Yes, complete it!'
    }).then(async(result) => {
      // Show loading
      Swal.fire({
        title: 'Completing Pickup...',
        text: `Completing pickup #${pickupNumber}`,
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      if (result.isConfirmed) {
        const response = await fetch(`/courier/complete-pickup/${pickupNumber}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ status: 'completed' }),
        });

        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Pickup Completed',
            text: `Pickup #${pickupNumber} has been marked as completed.`,
            timer: 2500
          }).then(() => {
            window.location.reload();
          });
        } else {
          const result = await response.json();
          Swal.fire({
            icon: 'error',
            title: 'Completion Failed',
            text: result.message || 'Failed to complete the pickup.',
          });
        }
      } else {
       Swal.close();
      }
    });
  }







</script>