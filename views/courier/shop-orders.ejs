<%- contentFor('HeaderCss') %>
<link href="/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />

<%- contentFor('body') %>
<div class="row">
  <div class="col-12">
    <div class="page-title-box d-sm-flex align-items-center justify-content-between">
      <h4 class="mb-sm-0">Shop Deliveries</h4>
    </div>
  </div>
</div>

<!-- Stats Cards -->
<div class="row mb-3">
  <div class="col-xl-4 col-md-6">
    <div class="card card-animate">
      <div class="card-body">
        <div class="d-flex align-items-center">
          <div class="flex-grow-1">
            <p class="text-uppercase fw-medium text-muted mb-0">Assigned</p>
          </div>
          <div class="flex-shrink-0">
            <h5 class="text-warning mb-0" id="assignedCount">0</h5>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-xl-4 col-md-6">
    <div class="card card-animate">
      <div class="card-body">
        <div class="d-flex align-items-center">
          <div class="flex-grow-1">
            <p class="text-uppercase fw-medium text-muted mb-0">In Transit</p>
          </div>
          <div class="flex-shrink-0">
            <h5 class="text-primary mb-0" id="inTransitCount">0</h5>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-xl-4 col-md-6">
    <div class="card card-animate">
      <div class="card-body">
        <div class="d-flex align-items-center">
          <div class="flex-grow-1">
            <p class="text-uppercase fw-medium text-muted mb-0">Delivered Today</p>
          </div>
          <div class="flex-shrink-0">
            <h5 class="text-success mb-0" id="deliveredCount">0</h5>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Filters -->
<div class="row mb-3">
  <div class="col-12">
    <div class="card">
      <div class="card-body">
        <div class="row g-3">
          <div class="col-md-4">
            <label class="form-label">Filter by Status</label>
            <select class="form-select" id="statusFilter">
              <option value="">All Status</option>
              <option value="assigned">Assigned</option>
              <option value="picked_up">Picked Up</option>
              <option value="in_transit">In Transit</option>
              <option value="delivered">Delivered</option>
              <option value="returned">Returned</option>
            </select>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Orders List -->
<div class="row">
  <div class="col-12">
    <div class="card">
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-hover align-middle mb-0">
            <thead class="table-light">
              <tr>
                <th>Order #</th>
                <th>Business</th>
                <th>Items</th>
                <th>Amount</th>
                <th>Delivery Address</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="ordersTableBody">
              <tr>
                <td colspan="7" class="text-center">
                  <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Order Details Modal -->
<div class="modal fade" id="orderModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Delivery Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body" id="orderDetailsBody">
        <!-- Order details will be loaded here -->
      </div>
      <div class="modal-footer" id="orderActions">
        <!-- Action buttons will be added here -->
      </div>
    </div>
  </div>
</div>

<!-- Update Status Modal -->
<div class="modal fade" id="statusModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Update Delivery Status</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="statusForm">
        <div class="modal-body">
          <input type="hidden" id="updateOrderId">
          <input type="hidden" id="currentStatus">
          <div class="mb-3">
            <label class="form-label">New Status</label>
            <select class="form-select" id="newStatus" required>
              <!-- Options will be populated based on current status -->
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Notes (Optional)</label>
            <textarea class="form-control" id="statusNotes" rows="3" placeholder="Add any notes about the delivery..."></textarea>
          </div>
          <div class="form-check">
            <input class="form-check-input" type="checkbox" id="useCurrentLocation">
            <label class="form-check-label" for="useCurrentLocation">
              Use my current location for tracking
            </label>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Update Status</button>
        </div>
      </form>
    </div>
  </div>
</div>

<%- contentFor('FooterJs') %>
<script src="/assets/libs/sweetalert2/sweetalert2.min.js"></script>
<script>
  let ordersData = [];
  let currentLocation = null;

  document.addEventListener('DOMContentLoaded', function() {
    loadOrders();
    getCurrentLocation();

    // Event listeners
    document.getElementById('statusFilter').addEventListener('change', loadOrders);
    document.getElementById('statusForm').addEventListener('submit', handleStatusUpdate);
  });

  function getCurrentLocation() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          currentLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
        },
        (error) => {
          console.warn('Could not get location:', error);
        }
      );
    }
  }

  async function loadOrders() {
    const status = document.getElementById('statusFilter').value;

    const params = new URLSearchParams();
    if (status) params.append('status', status);

    try {
      const response = await fetch(`/courier/api/shop/orders?${params}`);
      const orders = await response.json();
      ordersData = orders;
      renderOrders(orders);
      updateStats(orders);
    } catch (error) {
      console.error('Error loading orders:', error);
      const errorMessage = error.message || 'Failed to load orders';
      showError(`Error: ${errorMessage}`);
    }
  }

  function renderOrders(orders) {
    const tbody = document.getElementById('ordersTableBody');

    if (orders.length === 0) {
      tbody.innerHTML = '<tr><td colspan="7" class="text-center py-4">No deliveries assigned</td></tr>';
      return;
    }

    tbody.innerHTML = orders.map(order => {
      const statusBadge = getStatusBadge(order.status);

      return `
      <tr>
        <td>
          <a href="javascript:void(0)" onclick="viewOrder('${order._id}')" class="fw-medium link-primary">
            ${order.orderNumber}
          </a>
        </td>
        <td>
          <div>
            <strong>${order.business.brandInfo.brandName}</strong>
            <br><small class="text-muted">${order.business.phone}</small>
          </div>
        </td>
        <td>
          <span class="badge badge-soft-info">${order.items.length} items</span>
        </td>
        <td>
          <strong>EGP ${order.totalAmount.toFixed(2)}</strong>
        </td>
        <td>
          <div class="text-truncate" style="max-width: 200px;">
            ${order.orderCustomer.address}
          </div>
          <small class="text-muted">${order.contactInfo.phone}</small>
        </td>
        <td>${statusBadge}</td>
        <td>
          <div class="hstack gap-1">
            <button class="btn btn-sm btn-soft-primary" onclick="viewOrder('${order._id}')" title="Quick View">
              <i class="ri-eye-line"></i>
            </button>
            <a href="/courier/shop/orders/${order._id}" class="btn btn-sm btn-soft-info" title="Full Details">
              <i class="ri-external-link-line"></i>
            </a>
            ${canUpdateStatus(order.status) ? `
              <button class="btn btn-sm btn-soft-success" onclick="updateStatus('${order._id}', '${order.status}')" title="Update Status">
                <i class="ri-refresh-line"></i>
              </button>
            ` : ''}
            <button class="btn btn-sm btn-soft-warning" onclick="callCustomer('${order.contactInfo.phone}')" title="Call Customer">
              <i class="ri-phone-line"></i>
            </button>
          </div>
        </td>
      </tr>
    `;
    }).join('');
  }

  function canUpdateStatus(status) {
    return ['assigned', 'in_transit'].includes(status);
  }

  function getStatusBadge(status) {
    const statusConfig = {
      assigned: {
        color: 'warning',
        text: 'Assigned',
        icon: 'ri-user-follow-line'
      },
      in_transit: {
        color: 'primary',
        text: 'In Transit',
        icon: 'ri-truck-line'
      },
      delivered: {
        color: 'success',
        text: 'Delivered',
        icon: 'ri-check-line'
      },
      returned: {
        color: 'warning',
        text: 'Returned',
        icon: 'ri-arrow-go-back-line'
      }
    };

    const config = statusConfig[status] || {
      color: 'secondary',
      text: status,
      icon: 'ri-information-line'
    };
    return `<span class="badge bg-${config.color}"><i class="${config.icon} me-1"></i>${config.text}</span>`;
  }

  function updateStats(orders) {
    const stats = {
      assigned: 0,
      inTransit: 0,
      delivered: 0
    };

    const today = new Date().toDateString();

    orders.forEach(order => {
      if (order.status === 'assigned') stats.assigned++;
      if (['in_transit'].includes(order.status)) stats.inTransit++;
      if (order.status === 'delivered' && new Date(order.deliveredAt).toDateString() === today) {
        stats.delivered++;
      }
    });

    document.getElementById('assignedCount').textContent = stats.assigned;
    document.getElementById('inTransitCount').textContent = stats.inTransit;
    document.getElementById('deliveredCount').textContent = stats.delivered;
  }

  async function viewOrder(orderId) {
    try {
      const response = await fetch(`/courier/api/shop/orders/${orderId}`);
      const order = await response.json();

      const detailsHtml = `
      <div class="row mb-4">
        <div class="col-md-6">
          <h6 class="text-muted mb-2">Order Information</h6>
          <p><strong>Order Number:</strong> ${order.orderNumber}</p>
          <p><strong>Status:</strong> ${getStatusBadge(order.status)}</p>
          <p><strong>Assigned:</strong> ${new Date(order.assignedAt).toLocaleString()}</p>
          ${order.pickedUpAt ? `<p><strong>Picked Up:</strong> ${new Date(order.pickedUpAt).toLocaleString()}</p>` : ''}
        </div>
        <div class="col-md-6">
          <h6 class="text-muted mb-2">Business Information</h6>
          <p><strong>Name:</strong> ${order.business.brandInfo.brandName}</p>
          <p><strong>Phone:</strong> 
            <a href="tel:${order.business.phone}" class="text-primary">
              <i class="ri-phone-line"></i> ${order.business.phone}
            </a>
          </p>
          <p><strong>Email:</strong> ${order.business.email}</p>
        </div>
      </div>
      
      <div class="alert alert-info">
        <h6 class="alert-heading"><i class="ri-map-pin-line me-2"></i>Delivery Address</h6>
        <p class="mb-1"><strong>${order.orderCustomer.address}</strong></p>
        <p class="mb-1">Contact: <strong>${order.contactInfo.name}</strong></p>
        <p class="mb-0">Phone: 
          <a href="tel:${order.contactInfo.phone}" class="text-primary">
            <i class="ri-phone-line"></i> ${order.contactInfo.phone}
          </a>
        </p>
        <p class="mb-0 mt-2"><small><i class="ri-map-pin-line me-1"></i>Zone: ${order.orderCustomer.zone}</small></p>
      </div>
      
      <h6 class="mb-3">Package Items</h6>
      <div class="table-responsive mb-4">
        <table class="table table-sm table-bordered">
          <thead class="table-light">
            <tr>
              <th>Product</th>
              <th class="text-center">Quantity</th>
            </tr>
          </thead>
          <tbody>
            ${order.items.map(item => `
              <tr>
                <td>
                  <div class="d-flex align-items-center">
                    ${item.product && item.product.images && item.product.images[0] ? 
                      `<img src="${item.product.images[0]}" alt="${item.productName}" 
                           style="width: 40px; height: 40px; object-fit: cover;" class="rounded me-2">` : ''}
                    <strong>${item.productName}</strong>
                  </div>
                </td>
                <td class="text-center">${item.quantity}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
      
      ${order.packagingDetails && order.packagingDetails.numberOfBoxes ? `
        <div class="alert alert-secondary">
          <h6 class="alert-heading">Packaging Details</h6>
          ${order.packagingDetails.numberOfBoxes ? `<p class="mb-1">Number of Boxes: <strong>${order.packagingDetails.numberOfBoxes}</strong></p>` : ''}
          ${order.packagingDetails.weight ? `<p class="mb-0">Weight: <strong>${order.packagingDetails.weight} kg</strong></p>` : ''}
        </div>
      ` : ''}
      
      <div class="alert alert-warning">
        <strong>Amount to Collect:</strong> EGP ${order.totalAmount.toFixed(2)}
      </div>
      
      ${order.notes ? `
        <div class="alert alert-info">
          <strong>Notes:</strong> ${order.notes}
        </div>
      ` : ''}
      
      ${order.trackingHistory.length > 0 ? `
        <h6 class="mb-3">Tracking History</h6>
        <div class="timeline-container">
          ${order.trackingHistory.map((track, index) => `
            <div class="timeline-item ${index === 0 ? 'timeline-item-active' : ''}">
              <div class="timeline-marker ${index === 0 ? 'timeline-marker-active' : ''}">
                <i class="ri-check-line"></i>
              </div>
              <div class="timeline-content">
                <div class="timeline-header">
                  <h6 class="timeline-title mb-1">${track.description}</h6>
                  <span class="timeline-time">
                    <i class="ri-time-line me-1"></i>${new Date(track.timestamp).toLocaleString()}
                  </span>
                </div>
                ${track.location ? `
                  <div class="timeline-location mt-2">
                    <i class="ri-map-pin-line me-1 text-primary"></i>
                    <span class="text-muted">Location: ${track.location.lat}, ${track.location.lng}</span>
                  </div>
                ` : ''}
                ${track.notes ? `
                  <div class="timeline-notes mt-2">
                    <small class="text-muted">${track.notes}</small>
                  </div>
                ` : ''}
              </div>
            </div>
          `).join('')}
        </div>
      ` : ''}
    `;

      document.getElementById('orderDetailsBody').innerHTML = detailsHtml;

      // Add action buttons
      const actionsHtml = canUpdateStatus(order.status) ? `
      <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
      <button type="button" class="btn btn-success" onclick="updateStatus('${order._id}', '${order.status}')">
        Update Status
      </button>
    ` : `
      <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
    `;

      document.getElementById('orderActions').innerHTML = actionsHtml;

      new bootstrap.Modal(document.getElementById('orderModal')).show();
    } catch (error) {
      console.error('Error loading order details:', error);
      const errorMessage = error.message || 'Failed to load order details';
      showError(`Error: ${errorMessage}`);
    }
  }

  function updateStatus(orderId, currentStatus) {
    document.getElementById('updateOrderId').value = orderId;
    document.getElementById('currentStatus').value = currentStatus;

    // Set available status options based on current status
    const statusSelect = document.getElementById('newStatus');
    const statusOptions = {
      'assigned': [{
        value: 'in_transit',
        text: 'Start Delivery (In Transit)'
      }],
      'in_transit': [{
          value: 'delivered',
          text: 'Mark as Delivered'
        },
        {
          value: 'returned',
          text: 'Mark as Returned'
        }
      ]
    };

    const options = statusOptions[currentStatus] || [];
    statusSelect.innerHTML = options.map(opt =>
      `<option value="${opt.value}">${opt.text}</option>`
    ).join('');

    // Close order modal if open
    const orderModalEl = document.getElementById('orderModal');
    const orderModal = bootstrap.Modal.getInstance(orderModalEl);
    if (orderModal) {
      orderModal.hide();
    }

    new bootstrap.Modal(document.getElementById('statusModal')).show();
  }

  async function handleStatusUpdate(e) {
    e.preventDefault();

    const orderId = document.getElementById('updateOrderId').value;
    const status = document.getElementById('newStatus').value;
    const notes = document.getElementById('statusNotes').value;
    const useLocation = document.getElementById('useCurrentLocation').checked;

    // Validate required fields
    if (!orderId) {
      showError('Order ID is required');
      return;
    }

    if (!status) {
      showError('Please select a status');
      return;
    }

    const data = {
      status,
      notes: notes.trim()
    };

    if (useLocation && currentLocation) {
      data.location = currentLocation;
    }

    // Show loading state
    const submitButton = document.querySelector('#statusForm button[type="submit"]');
    const originalText = submitButton.textContent;
    submitButton.disabled = true;
    submitButton.innerHTML = '<i class="ri-loader-4-line ri-spin"></i> Updating...';

    try {
      const response = await fetch(`/courier/api/shop/orders/${orderId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });

      const result = await response.json();

      if (response.ok) {
        showSuccess(result.message || 'Status updated successfully');
        bootstrap.Modal.getInstance(document.getElementById('statusModal')).hide();
        loadOrders();
      } else {
        const errorMessage = result.error || result.message || 'Failed to update status';
        showError(errorMessage);
      }
    } catch (error) {
      console.error('Error updating status:', error);
      showError('Failed to update status');
    } finally {
      // Reset button state
      submitButton.disabled = false;
      submitButton.textContent = originalText;
    }
  }

  function callCustomer(phone) {
    window.location.href = `tel:${phone}`;
  }

  function showSuccess(message) {
    Swal.fire({
      icon: 'success',
      title: 'Success!',
      text: message,
      timer: 2000,
      showConfirmButton: false
    });
  }

  function showError(message) {
    Swal.fire({
      icon: 'error',
      title: 'Error!',
      text: message
    });
  }
</script>

<style>
  .timeline-container {
    position: relative;
    padding-left: 40px;
  }

  .timeline-item {
    position: relative;
    padding-bottom: 25px;
    transition: all 0.3s ease;
  }

  .timeline-item:hover {
    transform: translateX(5px);
  }

  .timeline-marker {
    position: absolute;
    left: -40px;
    top: 0;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background-color: #6c757d;
    border: 3px solid #fff;
    box-shadow: 0 0 0 3px #6c757d;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 10px;
    color: white;
    transition: all 0.3s ease;
  }

  .timeline-marker-active {
    background-color: #28a745;
    box-shadow: 0 0 0 3px #28a745;
    animation: pulse 2s infinite;
  }

  .timeline-item-active .timeline-marker {
    background-color: #28a745;
    box-shadow: 0 0 0 3px #28a745;
  }

  .timeline-item:before {
    content: '';
    position: absolute;
    left: -31px;
    top: 20px;
    width: 2px;
    height: calc(100% - 5px);
    background: linear-gradient(to bottom, #28a745, #6c757d);
  }

  .timeline-item:last-child:before {
    display: none;
  }

  .timeline-content {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 15px;
    border-left: 4px solid #28a745;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
  }

  .timeline-item:hover .timeline-content {
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    transform: translateY(-2px);
  }

  .timeline-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 8px;
  }

  .timeline-title {
    color: #212529;
    font-weight: 600;
    margin: 0;
  }

  .timeline-time {
    color: #6c757d;
    font-size: 0.875rem;
    white-space: nowrap;
  }

  .timeline-location {
    background: #e3f2fd;
    padding: 8px 12px;
    border-radius: 6px;
    border-left: 3px solid #2196f3;
  }

  .timeline-notes {
    background: #fff3cd;
    padding: 8px 12px;
    border-radius: 6px;
    border-left: 3px solid #ffc107;
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 3px #28a745;
    }
    50% {
      box-shadow: 0 0 0 8px rgba(40, 167, 69, 0.3);
    }
    100% {
      box-shadow: 0 0 0 3px #28a745;
    }
  }
</style>