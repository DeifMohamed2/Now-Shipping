<%- contentFor('HeaderCss') %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.7.6/lottie.min.js"></script>
<link href="/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />

<%- contentFor('body') %>
<style>
  .zone-card {
    margin-bottom: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }

  .zone-header {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 8px 8px 0 0;
    border-bottom: 2px solid #0ab39c;
  }

  .business-card {
    margin: 10px;
    border-radius: 6px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.05);
  }

  .business-header {
    padding: 10px 15px;
    background-color: #f1f5f9;
    border-radius: 6px 6px 0 0;
    border-bottom: 1px solid #e0e0e0;
  }

  .order-item {
    padding: 12px 15px;
    border-bottom: 1px solid #eee;
    transition: background-color 0.2s;
  }

  .order-item:hover {
    background-color: #f9f9f9;
  }

  .order-item:last-child {
    border-bottom: none;
  }

  .deliver-btn {
    min-width: 120px;
  }

  /* Fix for dropdown menus */
  .dropdown-fix .dropdown-menu {
    position: fixed !important;
    z-index: 1050 !important;
  }

  /* Ensure containers don't clip the dropdown */
  .card-body,
  .card {
    overflow: visible !important;
  }

  .badge-count {
    font-size: 12px;
    padding: 3px 6px;
    border-radius: 10px;
  }

  .order-status {
    font-size: 0.85rem;
    padding: 4px 8px;
  }

  .empty-state {
    padding: 40px 20px;
    text-align: center;
  }
</style>

<div class="row">
  <div class="col-lg-12">
    <div class="card" id="orderList">
      <div class="card-header border-0">
        <div class="row align-items-center gy-3">
          <div class="col-sm">
            <h5 class="card-title mb-0">Your Assigned Orders</h5>
          </div>
        </div>
      </div>

      <div class="card-body border border-dashed border-end-0 border-start-0">
        <form>
          <div class="row g-3">
            <div class="col-xxl-5 col-sm-6">
              <div class="search-box">
                <input type="text" class="form-control search" id="searchInput" placeholder="Search for order ID, customer, zone...">
                <i class="ri-search-line search-icon"></i>
              </div>
            </div>
            <div class="col-xxl-2 col-sm-4">
              <div>
                <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="statusFilter">
                  <option value="all" selected>All Statuses</option>
                  <option value="pending">Pending</option>
                  <option value="delivered">Delivered</option>
                  <option value="returned">Returned</option>
                  <option value="exchange">Exchange</option>
                </select>
              </div>
            </div>
            <div class="col-xxl-1 col-sm-4">
              <div>
                <button type="button" class="btn btn-primary w-100" onclick="applyFilters()">
                  <i class="ri-equalizer-fill me-1 align-bottom"></i> Filters
                </button>
              </div>
            </div>
          </div>
        </form>
      </div>

      <div class="card-body pt-0">
        <div>
          <ul class="nav nav-tabs nav-tabs-custom nav-success mb-3" role="tablist">
            <li class="nav-item">
              <button class="btn btn-link nav-link active All py-3" data-bs-toggle="tab" id="All" role="tab" aria-selected="true" onClick="filterOrders('All')">
                <i class="ri-store-2-fill me-1 align-bottom"></i> All Orders
              </button>
            </li>
            <li class="nav-item">
              <button class="btn btn-link nav-link py-3 Delivered" data-bs-toggle="tab" id="Delivered" role="tab" aria-selected="false" onClick="filterOrders('Deliver')">
                <i class="ri-checkbox-circle-line me-1 align-bottom"></i> Delivered
              </button>
            </li>
            <li class="nav-item">
              <button class="btn btn-link nav-link py-3 Returns" data-bs-toggle="tab" id="Returns" role="tab" aria-selected="false" onClick="filterOrders('Return')">
                <i class="ri-arrow-left-right-fill me-1 align-bottom"></i> Returns
              </button>
            </li>
            <li class="nav-item">
              <button class="btn btn-link nav-link py-3 Exchange" data-bs-toggle="tab" id="Exchange" role="tab" aria-selected="false" onClick="filterOrders('Exchange')">
                <i class="ri-exchange-line me-1 align-bottom"></i> Exchange
              </button>
            </li>
            <li class="nav-item">
              <button class="btn btn-link nav-link py-3 CashCollection" data-bs-toggle="tab" id="CashCollection" role="tab" aria-selected="false" onClick="filterOrders('CashCollection')">
                <i class="ri-money-dollar-circle-line me-1 align-bottom"></i> Cash Collection
              </button>
            </li>
          </ul>

          <!-- Orders Container -->
          <div id="ordersContainer" class="mb-4">
            <!-- Orders will be inserted here dynamically -->
            <div class="text-center p-4">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <p class="mt-2">Loading orders...</p>
            </div>
          </div>

          <!-- No Results -->
          <div class="noresult empty-state" id="NoResult" style="display: none">
            <div class="text-center">
              <lord-icon src="https://cdn.lordicon.com/msoeawqm.json" trigger="loop" colors="primary:#405189,secondary:#0ab39c" style="width:75px;height:75px"></lord-icon>
              <h5 class="mt-2">Sorry! No Orders Found</h5>
              <p class="text-muted">Try adjusting your search or filter to find what you're looking for.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Print Policy Modal -->
<div class="modal fade" id="printPolicyModal" tabindex="-1" aria-labelledby="printPolicyModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="printPolicyModalLabel">Print Delivery Policy</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Select the paper size for printing the delivery policy:</p>
        <form id="printPolicyForm">
          <input type="hidden" id="orderId" name="orderId" value="">
          <div class="d-flex justify-content-around">
            <div class="paper-size-option" onclick="selectPaperSize('A4')">
              <img src="/assets/images/a4.png" alt="A4" style="width: 100px; height: 100px;">
              <p>A4</p>
            </div>
            <div class="paper-size-option" onclick="selectPaperSize('A6')">
              <img src="/assets/images/a6.png" alt="A6" style="width: 100px; height: 100px;">
              <p>A6</p>
            </div>
          </div>
          <input type="hidden" id="paperSize" name="paperSize" value="">
          <div class="d-flex justify-content-end mt-3">
            <button type="button" class="btn btn-primary" onclick="printPolicy()">Print</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Order Actions Modal -->
<div class="modal fade" id="orderActionsModal" tabindex="-1" aria-labelledby="orderActionsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="orderActionsModalLabel">Order Actions</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="orderActionsForm">
          <input type="hidden" id="actionOrderId" name="actionOrderId" value="">
          <div class="mb-3">
            <label for="actionReason" class="form-label">Reason</label>
            <select class="form-select" id="actionReason" name="actionReason">
              <option value="">Select a reason</option>
              <option value="customer_not_available">Customer not available</option>
              <option value="wrong_address">Wrong address</option>
              <option value="customer_refused">Customer refused</option>
              <option value="other">Other</option>
            </select>
          </div>
          <div class="mb-3" id="otherReasonContainer" style="display: none;">
            <label for="otherReason" class="form-label">Specify reason</label>
            <textarea class="form-control" id="otherReason" name="otherReason" rows="3"></textarea>
          </div>
          <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" id="confirmActionBtn">Confirm</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>



<%- contentFor('FooterJs') %>
<script src="/assets/libs/list.js/list.min.js"></script>
<script src="/assets/libs/list.pagination.js/list.pagination.min.js"></script>
<script src="/assets/libs/sweetalert2/sweetalert2.min.js"></script>

<script>
  // Global variables
  let allOrders = [];
  let currentFilter = 'All';
  const ordersContainer = document.getElementById('ordersContainer');
  const noResultElement = document.getElementById('NoResult');

  // Event Listeners
  document.addEventListener("DOMContentLoaded", () => {
    fetchOrders();

    // Setup action reason dropdown change event
    document.getElementById('actionReason').addEventListener('change', function() {
      const otherReasonContainer = document.getElementById('otherReasonContainer');
      if (this.value === 'other') {
        otherReasonContainer.style.display = 'block';
      } else {
        otherReasonContainer.style.display = 'none';
      }
    });
  });

  // Fetch Orders
  async function fetchOrders(status = "All") {
    try {
      showLoadingSpinner();
      currentFilter = status;

      const response = await fetch(`/courier/get-orders?orderType=${status}`);
      const orders = await response.json();

      if (response.ok) {
        allOrders = orders;
        handleOrdersResponse(orders);
      } else {
        showError(`Error fetching orders: ${orders.message || 'Unknown error'}`);
      }
    } catch (error) {
      console.error("Error fetching orders:", error);
      showError("Failed to load orders. Please try again later.");
    }
  }

  function showLoadingSpinner() {
    ordersContainer.innerHTML = `
      <div class="text-center p-4">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading orders...</p>
      </div>
    `;
  }

  function showError(message) {
    ordersContainer.innerHTML = `
      <div class="alert alert-danger" role="alert">
        ${message}
      </div>
    `;
  }

  function handleOrdersResponse(orders) {
    if (orders.length === 0) {
      ordersContainer.innerHTML = '';
      noResultElement.style.display = "block";
      return;
    }

    noResultElement.style.display = "none";
    organizeAndDisplayOrders(orders);
  }

  function organizeAndDisplayOrders(orders) {
    // Group orders by zone
    const ordersByZone = {};

    orders.forEach(order => {
      const zone = order.orderCustomer.zone || 'Unknown Zone';
      const businessName = order.business?.brandInfo.brandName || 'Unknown Business';

      if (!ordersByZone[zone]) {
        ordersByZone[zone] = {};
      }

      if (!ordersByZone[zone][businessName]) {
        ordersByZone[zone][businessName] = [];
      }

      ordersByZone[zone][businessName].push(order);
    });

    // Generate HTML
    let html = '';

    // For each zone
    Object.keys(ordersByZone).sort().forEach(zone => {
      const businesses = ordersByZone[zone];
      const totalOrdersInZone = Object.values(businesses).flat().length;

      html += `
        <div class="zone-card">
          <div class="zone-header">
            <div class="d-flex justify-content-between align-items-center">
              <h5 class="mb-0">
                <i class="ri-map-pin-line me-1"></i> ${zone}
                <span class="badge bg-primary badge-count ms-2">${totalOrdersInZone} orders</span>
              </h5>
              <button class="btn btn-sm btn-outline-primary" onclick="toggleZone('zone-${zone.replace(/\s+/g, '-')}')">
                <i class="ri-arrow-down-s-line"></i>
              </button>
            </div>
          </div>
          <div class="zone-content" id="zone-${zone.replace(/\s+/g, '-')}">
      `;

      // For each business in this zone
      Object.keys(businesses).sort().forEach(businessName => {
        const businessOrders = businesses[businessName];

        html += `
          <div class="business-card">
            <div class="business-header">
              <div class="d-flex justify-content-between align-items-center">
                <h6 class="mb-0">
                  <i class="ri-store-2-line me-1"></i> ${businessName}
                  <span class="badge bg-info badge-count ms-2">${businessOrders.length} orders</span>
                </h6>
                <button class="btn btn-sm btn-outline-secondary" onclick="toggleBusiness('business-${businessName.replace(/\s+/g, '-')}-${zone.replace(/\s+/g, '-')}')">
                  <i class="ri-arrow-down-s-line"></i>
                </button>
              </div>
            </div>
            <div class="business-orders" id="business-${businessName.replace(/\s+/g, '-')}-${zone.replace(/\s+/g, '-')}">
        `;

        // For each order in this business
        businessOrders.forEach(order => {
          const { statusClass, statusText } = getStatusClass(order.orderStatus);
          console.log(statusClass, statusText);
          html += `
            <div class="order-item" data-order-id="${order.orderNumber}">
              <div class="row align-items-center">
              <div class="col-md-3">
              <div class="d-flex align-items-center">
              <div class="form-check me-2">
              <input class="form-check-input" type="checkbox" value="${order.orderNumber}" name="orderCheckbox">
              </div>
              <div>
              <a href="/courier/order-details/${order.orderNumber}" class="fw-medium link-primary">#${order.orderNumber}</a>
              <div class="text-muted small">${new Date(order.orderDate).toLocaleDateString()}</div>
              </div>
              </div>
              </div>
              <div class="col-md-3">
              <div>
              <div class="fw-medium">${order.orderCustomer.fullName}</div>
              </div>
              </div>
              <div class="col-md-2">
              <div>
              <span class="badge ${statusClass} order-status">${statusText}</span>
              <div class="text-muted small">${order.orderShipping.orderType}</div>
              </div>
              </div>
              <div class="col-md-2">
              <div class="fw-medium">${order.orderShipping.amount || 0} EGP</div>
              <div class="text-muted small">${order.orderShipping.amountType}</div>
              </div>
              <div class="col-md-2">
              <div class="d-flex gap-2 justify-content-end">
              ${order.orderStatus !== 'completed' && order.orderStatus !== 'canceled' && order.orderStatus !== 'rejected' && order.orderStatus !== 'returned' && order.orderStatus !== 'terminated' ? `
              <button class="btn btn-success btn-sm deliver-btn" onclick="deliverOrder('${order._id}', '${order.orderNumber}')">
              <i class="ri-check-line me-1"></i> Deliver
              </button>
              ` : ''}
              <div class="dropdown dropdown-fix">
              <button class="btn btn-light btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
              <i class="ri-more-2-fill"></i>
              </button>
              <ul class="dropdown-menu">
              <li>
              <button class="dropdown-item" onclick="showOrderActions('${order._id}', '${order.orderNumber}', 'customer_not_available')">
              <i class="ri-user-unfollow-line me-2 text-warning"></i> Customer Not Available
              </button>
              </li>
              <li>
              <button class="dropdown-item" onclick="showOrderActions('${order._id}', '${order.orderNumber}', 'customer_refused')">
              <i class="ri-close-circle-line me-2 text-danger"></i> Customer Refused
              </button>
              </li>
              <li>
              ${order.orderStatus !== 'completed' && order.orderStatus !== 'canceled' && order.orderStatus !== 'rejected' && order.orderStatus !== 'returned' && order.orderStatus !== 'terminated' ? `
              <button class="dropdown-item" data-bs-toggle="modal" data-bs-target="#printPolicyModal" onclick="setOrderId('${order.orderNumber}')">
              <i class="ri-printer-fill me-2 text-primary"></i> Print Policy
              </button>
              ` : ''}
              </li>
              <li>
              <a class="dropdown-item" href="/business/order-details/${order.orderNumber}">
              <i class="ri-information-line me-2 text-info"></i> Order Details
              </a>
              </li>
              </ul>
              </div>
              </div>
              </div>
              </div>
              <div class="row mt-2">
              <div class="col-md-12">
              <div class="text-muted small">
              ${order.orderShipping.orderType === 'Deliver' ? `<strong>Number of Items:</strong> ${order.orderShipping.numberOfItems}` : ''}
              ${order.orderShipping.orderType === 'Exchange' ? `<strong>Current Items:</strong> ${order.orderShipping.numberOfItems}, <strong>Replacement Items:</strong> ${order.orderShipping.numberOfItemsReplacement}` : ''}
              ${order.orderShipping.orderType === 'CashCollection' ? `<strong>Amount to Collect:</strong> ${order.orderShipping.amount}` : ''}
              ${order.orderShipping.amountType === 'CD' ? `<strong>Cash Difference:</strong> ${order.orderShipping.amount}` : ''}
              ${order.orderShipping.amountType === 'COD' ? `<strong>Cash on Delivery:</strong> ${order.orderShipping.amount}` : ''}
              ${order.orderShipping.amountType === 'CC' ? `<strong>Cash Collection:</strong> ${order.orderShipping.amount}` : ''}
              </div>
              </div>
              </div>
            </div>
            `;
        });

        html += `
            </div>
          </div>
        `;
      });

      html += `
          </div>
        </div>
      `;
    });

    ordersContainer.innerHTML = html;
  }

  function getStatusClass(status) {
    switch (status.toLowerCase()) {
      case 'new':
        return {
          statusClass: 'bg-info-subtle text-info', 
          statusText: 'New'
        };
      case 'pickedup':
        return {
          statusClass: 'bg-warning-subtle text-warning',
          statusText: 'Picked Up'
        };
      case 'instock':
        return {
          statusClass: 'bg-primary-subtle text-primary',
          statusText: 'In Stock'
        };
      case 'inprogress': 
        return {
          statusClass: 'bg-info-subtle text-info',
          statusText: 'In Progress'
        };
      case 'headingtocustomer':
        return {
          statusClass: 'bg-warning-subtle text-warning',
          statusText: 'Heading to Customer'
        };
      case 'headingtoyou':
        return {
          statusClass: 'bg-warning-subtle text-warning',
          statusText: 'Heading to You'
        };
      case 'completed':
        return {
          statusClass: 'bg-success-subtle text-success',
          statusText: 'Completed'
        };
      case 'canceled':
        return {
          statusClass: 'bg-danger-subtle text-danger',
          statusText: 'Canceled'
        };
      case 'rejected':
        return {
          statusClass: 'bg-danger-subtle text-danger',
          statusText: 'Rejected'
        };
      case 'returned':
        return {
          statusClass: 'bg-danger-subtle text-danger',
          statusText: 'Returned'
        };
      case 'terminated':
        return {
          statusClass: 'bg-danger-subtle text-danger',
          statusText: 'Terminated'
        };
      default:
        return {
          statusClass: 'bg-secondary-subtle text-secondary',
          statusText: status
        };
    }
  }

  // Toggle zone visibility
  function toggleZone(zoneId) {
    const zoneContent = document.getElementById(zoneId);
    if (zoneContent.style.display === 'none') {
      zoneContent.style.display = 'block';
    } else {
      zoneContent.style.display = 'none';
    }
  }

  // Toggle business visibility
  function toggleBusiness(businessId) {
    const businessContent = document.getElementById(businessId);
    if (businessContent.style.display === 'none') {
      businessContent.style.display = 'block';
    } else {
      businessContent.style.display = 'none';
    }
  }

  // Filter orders
  function filterOrders(status) {
    console.log("Filtering orders by status:", status);
    fetchOrders(status);
  }

  // Apply search and filters
  function applyFilters() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const statusFilter = document.getElementById('statusFilter').value;

    let filteredOrders = [...allOrders];

    // Apply status filter if not "all"
    if (statusFilter !== 'all') {
      filteredOrders = filteredOrders.filter(order =>
        order.orderStatus.toLowerCase() === statusFilter.toLowerCase()
      );
    }

    // Apply search term
    if (searchTerm) {
      filteredOrders = filteredOrders.filter(order =>
        order.orderNumber.toLowerCase().includes(searchTerm) ||
        order.orderCustomer.fullName.toLowerCase().includes(searchTerm) ||
        order.orderCustomer.zone.toLowerCase().includes(searchTerm) ||
        order.orderCustomer.government.toLowerCase().includes(searchTerm) ||
        (order.orderBusiness?.name && order.orderBusiness.name.toLowerCase().includes(searchTerm))
      );
    }

    handleOrdersResponse(filteredOrders);
  }

  // Set order ID for print policy modal
  function setOrderId(orderId) {
    document.getElementById('orderId').value = orderId;
  }

  // Select paper size
  function selectPaperSize(size) {
    document.getElementById('paperSize').value = size;

    // Remove selected class from all options
    document.querySelectorAll('.paper-size-option').forEach(option => {
      option.classList.remove('selected');
    });

    // Add selected class to chosen option
    const selectedOption = Array.from(document.querySelectorAll('.paper-size-option')).find(
      option => option.querySelector('p').textContent === size
    );

    if (selectedOption) {
      selectedOption.classList.add('selected');
    }
  }

  // Print policy
  function printPolicy() {
    const orderId = document.getElementById('orderId').value;
    const paperSize = document.getElementById('paperSize').value;

    if (!paperSize) {
      Swal.fire({
        icon: 'warning',
        title: 'Select Paper Size',
        text: 'Please select a paper size before printing.',
      });
      return;
    }

    // Redirect to print page with parameters
    window.open(`/courier/print-policy/${orderId}?size=${paperSize}`, '_blank');

    // Close modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('printPolicyModal'));
    modal.hide();
  }

  // Show order actions modal
  function showOrderActions(orderId, orderNumber, defaultReason = '') {
    document.getElementById('actionOrderId').value = orderId;
    document.getElementById('orderActionsModalLabel').textContent = `Actions for Order #${orderNumber}`;

    if (defaultReason) {
      document.getElementById('actionReason').value = defaultReason;

      // Show/hide other reason field
      const otherReasonContainer = document.getElementById('otherReasonContainer');
      otherReasonContainer.style.display = defaultReason === 'other' ? 'block' : 'none';
    }

    // Set up confirm button action
    document.getElementById('confirmActionBtn').onclick = function() {
      processOrderAction(orderId, orderNumber);
    };

    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('orderActionsModal'));
    modal.show();
  }

  // Process order action
  function processOrderAction(orderId, orderNumber) {
    const reason = document.getElementById('actionReason').value;
    const otherReason = document.getElementById('otherReason').value;

    if (!reason) {
      Swal.fire({
        icon: 'warning',
        title: 'Select Reason',
        text: 'Please select a reason for this action.',
      });
      return;
    }

    if (reason === 'other' && !otherReason) {
      Swal.fire({
        icon: 'warning',
        title: 'Specify Reason',
        text: 'Please specify the reason for this action.',
      });
      return;
    }

    // Close modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('orderActionsModal'));
    modal.hide();

    // Show confirmation
    Swal.fire({
      title: 'Are you sure?',
      text: `Update status for order #${orderNumber}?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, update it!'
    }).then((result) => {
      if (result.isConfirmed) {
        updateOrderStatus(orderId, 'unavailable', reason === 'other' ? otherReason : reason);
      }
    });
  }

  // Deliver order
  function deliverOrder(orderId, orderNumber) {
    Swal.fire({
      title: 'Confirm Delivery',
      text: `Mark order #${orderNumber} as delivered?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#28a745',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, deliver it!'
    }).then((result) => {
      if (result.isConfirmed) {
        updateOrderStatus(orderId, 'delivered');
      }
    });
  }

  // Update order status
  async function updateOrderStatus(orderId, status, reason = '') {
    try {
      const response = await fetch('/courier/update-order-status', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderId,
          status,
          reason
        }),
      });

      const result = await response.json();

      if (response.ok) {
        Swal.fire({
          icon: 'success',
          title: 'Status Updated',
          text: result.message || 'Order status has been updated successfully.',
        }).then(() => {
          // Refresh orders with current filter
          fetchOrders(currentFilter);
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Update Failed',
          text: result.message || 'Failed to update order status.',
        });
      }
    } catch (error) {
      console.error('Error updating order status:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'An unexpected error occurred. Please try again.',
      });
    }
  }
</script>