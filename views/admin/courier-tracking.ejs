<%- contentFor('HeaderCss') %>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />

<%- contentFor('FooterJs') %>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
<script src="https://cdn.socket.io/4.6.0/socket.io.min.js" integrity="sha384-c79GN5VsunZvi+Q/WObgk2in0CbZsHnjEqvFxC5DxHn9lTfNce2WW6h2pH6u/kF+" crossorigin=""></script>

<%- include("../partials/title-meta", {title: title}) %>

<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <h4 class="mb-sm-0">Courier Tracking</h4>

            <div class="page-title-right">
                <ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="/admin">Dashboard</a></li>
                    <li class="breadcrumb-item active">Courier Tracking</li>
                </ol>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title mb-0">Active Couriers</h4>
            </div>
            <div class="card-body">
                <div class="d-flex justify-content-between mb-3">
                    <div>
                        <h5 class="fs-14 mb-0">Available Couriers</h5>
                    </div>
                    <div>
                        <button id="refresh-couriers" class="btn btn-sm btn-primary">
                            <i class="ri-refresh-line"></i> Refresh
                        </button>
                    </div>
                </div>
                <div class="courier-list" id="courier-list">
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading couriers...</p>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card mt-4">
            <div class="card-header">
                <h4 class="card-title mb-0">Courier Details</h4>
            </div>
            <div class="card-body">
                <div id="courier-details">
                    <p class="text-muted">Select a courier to view details</p>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title mb-0">Live Tracking Map</h4>
            </div>
            <div class="card-body">
                <div id="map" style="height: 600px; border-radius: 8px;"></div>
            </div>
        </div>
    </div>
</div>

<style>
    .courier-item {
        padding: 12px;
        border-radius: 8px;
        margin-bottom: 10px;
        border: 1px solid #e9e9ef;
        transition: all 0.3s ease;
        cursor: pointer;
    }
    
    .courier-item:hover {
        background-color: #f3f6f9;
        transform: translateY(-2px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    
    .courier-item.active {
        background-color: #f3f6f9;
        border-left: 3px solid #0ab39c;
    }
    
    .courier-status {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 5px;
    }
    
    .courier-status.available {
        background-color: #0ab39c;
    }
    
    .courier-status.unavailable {
        background-color: #f06548;
    }
    
    .courier-list {
        max-height: 400px;
        overflow-y: auto;
    }
    
    .courier-details-item {
        margin-bottom: 15px;
    }
    
    .courier-details-item h6 {
        margin-bottom: 5px;
        color: #878a99;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize map
        const map = L.map('map').setView([30.0444, 31.2357], 10); // Default to Cairo
        
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        
        // Store markers
        const markers = {};
        
        // Get courier list element
        const courierListEl = document.getElementById('courier-list');
        const courierDetailsEl = document.getElementById('courier-details');
        const refreshBtn = document.getElementById('refresh-couriers');
        
        // Selected courier
        let selectedCourierId = null;
        
        // Fetch couriers
        async function fetchCouriers() {
            try {
                const response = await fetch('/admin/courier-locations');
                const data = await response.json();
                
                if (data.success) {
                    renderCouriers(data.couriers);
                    updateMarkers(data.couriers);
                } else {
                    courierListEl.innerHTML = `<div class="alert alert-danger">Failed to load couriers</div>`;
                }
            } catch (error) {
                console.error('Error fetching couriers:', error);
                courierListEl.innerHTML = `<div class="alert alert-danger">Failed to load couriers</div>`;
            }
        }
        
        // Render couriers list
        function renderCouriers(couriers) {
            if (couriers.length === 0) {
                courierListEl.innerHTML = `
                    <div class="text-center py-4">
                        <div class="alert alert-info mb-0">
                            No active couriers found
                        </div>
                    </div>
                `;
                return;
            }
            
            let html = '';
            couriers.forEach(courier => {
                const lastUpdated = new Date(courier.currentLocation.lastUpdated);
                const timeAgo = getTimeAgo(lastUpdated);
                
                html += `
                    <div class="courier-item ${selectedCourierId === courier._id ? 'active' : ''}" 
                         data-courier-id="${courier._id}">
                        <div class="d-flex align-items-center">
                            <div class="flex-grow-1">
                                <h5 class="fs-14 mb-1">${courier.name}</h5>
                                <p class="text-muted mb-0">ID: ${courier.courierID}</p>
                            </div>
                            <div>
                                <span class="courier-status ${courier.isAvailable ? 'available' : 'unavailable'}" 
                                      title="${courier.isAvailable ? 'Available' : 'Unavailable'}"></span>
                            </div>
                        </div>
                        <div class="mt-2">
                            <small class="text-muted">
                                <i class="ri-time-line"></i> ${timeAgo}
                            </small>
                            <small class="text-muted ms-2">
                                <i class="ri-car-line"></i> ${courier.vehicleType}
                            </small>
                        </div>
                    </div>
                `;
            });
            
            courierListEl.innerHTML = html;
            
            // Add event listeners
            document.querySelectorAll('.courier-item').forEach(item => {
                item.addEventListener('click', function() {
                    const courierId = this.getAttribute('data-courier-id');
                    selectCourier(courierId);
                });
            });
        }
        
        // Update map markers
        function updateMarkers(couriers) {
            // Remove old markers
            Object.keys(markers).forEach(id => {
                if (!couriers.find(c => c._id === id)) {
                    map.removeLayer(markers[id]);
                    delete markers[id];
                }
            });
            
            // Add/update markers
            couriers.forEach(courier => {
                const [lng, lat] = courier.currentLocation.coordinates;
                
                if (markers[courier._id]) {
                    // Update existing marker
                    markers[courier._id].setLatLng([lat, lng]);
                } else {
                    // Create new marker
                    const marker = L.marker([lat, lng], {
                        title: courier.name
                    }).addTo(map);
                    
                    marker.bindPopup(`
                        <div>
                            <h6>${courier.name}</h6>
                            <p>ID: ${courier.courierID}</p>
                            <p>Vehicle: ${courier.vehicleType}</p>
                            <p>Status: ${courier.isAvailable ? 'Available' : 'Unavailable'}</p>
                        </div>
                    `);
                    
                    markers[courier._id] = marker;
                }
            });
            
            // If we have a selected courier, make sure it's centered
            if (selectedCourierId && markers[selectedCourierId]) {
                map.setView(markers[selectedCourierId].getLatLng(), 15);
            } else if (couriers.length > 0) {
                // Otherwise fit all markers
                const bounds = [];
                couriers.forEach(courier => {
                    const [lng, lat] = courier.currentLocation.coordinates;
                    bounds.push([lat, lng]);
                });
                
                if (bounds.length > 0) {
                    map.fitBounds(bounds);
                }
            }
        }
        
        // Select courier
        async function selectCourier(courierId) {
            // Update UI
            document.querySelectorAll('.courier-item').forEach(item => {
                item.classList.remove('active');
                if (item.getAttribute('data-courier-id') === courierId) {
                    item.classList.add('active');
                }
            });
            
            selectedCourierId = courierId;
            
            // Show loading
            courierDetailsEl.innerHTML = `
                <div class="text-center py-2">
                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading courier details...</p>
                </div>
            `;
            
            try {
                const response = await fetch(`/admin/courier-location/${courierId}`);
                const data = await response.json();
                
                if (data.success) {
                    renderCourierDetails(data.courier);
                    
                    // Center map on courier
                    if (markers[courierId]) {
                        map.setView(markers[courierId].getLatLng(), 15);
                        markers[courierId].openPopup();
                    }
                } else {
                    courierDetailsEl.innerHTML = `<div class="alert alert-danger">Failed to load courier details</div>`;
                }
            } catch (error) {
                console.error('Error fetching courier details:', error);
                courierDetailsEl.innerHTML = `<div class="alert alert-danger">Failed to load courier details</div>`;
            }
        }
        
        // Render courier details
        function renderCourierDetails(courier) {
            const [lng, lat] = courier.currentLocation.coordinates;
            const lastUpdated = new Date(courier.currentLocation.lastUpdated);
            const timeAgo = getTimeAgo(lastUpdated);
            
            courierDetailsEl.innerHTML = `
                <div class="text-center mb-4">
                    <div class="avatar-lg mx-auto">
                        <div class="avatar-title bg-soft-primary text-primary display-5 rounded-circle">
                            <i class="ri-user-line"></i>
                        </div>
                    </div>
                    <h5 class="mt-3">${courier.name}</h5>
                    <p class="text-muted mb-0">ID: ${courier.courierID}</p>
                </div>
                
                <div class="courier-details-item">
                    <h6>Status</h6>
                    <p class="mb-0">
                        <span class="badge ${courier.isAvailable ? 'bg-success' : 'bg-danger'}">
                            ${courier.isAvailable ? 'Available' : 'Unavailable'}
                        </span>
                    </p>
                </div>
                
                <div class="courier-details-item">
                    <h6>Vehicle Type</h6>
                    <p class="mb-0">${courier.vehicleType}</p>
                </div>
                
                <div class="courier-details-item">
                    <h6>Current Location</h6>
                    <p class="mb-0">Lat: ${lat.toFixed(6)}, Lng: ${lng.toFixed(6)}</p>
                    <small class="text-muted">Last updated: ${timeAgo}</small>
                </div>
                
                <div class="mt-4">
                    <a href="https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}" 
                       target="_blank" class="btn btn-primary w-100">
                        <i class="ri-route-line me-1"></i> Get Directions
                    </a>
                </div>
            `;
        }
        
        // Helper function to format time ago
        function getTimeAgo(date) {
            const seconds = Math.floor((new Date() - date) / 1000);
            
            let interval = Math.floor(seconds / 31536000);
            if (interval > 1) return interval + ' years ago';
            
            interval = Math.floor(seconds / 2592000);
            if (interval > 1) return interval + ' months ago';
            
            interval = Math.floor(seconds / 86400);
            if (interval > 1) return interval + ' days ago';
            
            interval = Math.floor(seconds / 3600);
            if (interval > 1) return interval + ' hours ago';
            
            interval = Math.floor(seconds / 60);
            if (interval > 1) return interval + ' minutes ago';
            
            if (seconds < 10) return 'just now';
            
            return Math.floor(seconds) + ' seconds ago';
        }
        
        // Set up refresh button
        refreshBtn.addEventListener('click', fetchCouriers);
        
        // Set up polling for updates
        fetchCouriers();
        setInterval(fetchCouriers, 30000); // Refresh every 30 seconds
        
        // Set up Socket.IO for real-time updates
        try {
            const socket = io();
            
            socket.on('courier-location-update', function(data) {
                // Update marker for the specific courier
                if (data && data.courierId) {
                    // Fetch the updated courier data
                    fetch(`/admin/courier-location/${data.courierId}`)
                        .then(response => response.json())
                        .then(result => {
                            if (result.success) {
                                // Update marker
                                const courier = result.courier;
                                const [lng, lat] = courier.currentLocation.coordinates;
                                
                                if (markers[courier._id]) {
                                    markers[courier._id].setLatLng([lat, lng]);
                                    
                                    // Update popup content
                                    markers[courier._id].setPopupContent(`
                                        <div>
                                            <h6>${courier.name}</h6>
                                            <p>ID: ${courier.courierID}</p>
                                            <p>Vehicle: ${courier.vehicleType}</p>
                                            <p>Status: ${courier.isAvailable ? 'Available' : 'Unavailable'}</p>
                                        </div>
                                    `);
                                    
                                    // If this is the selected courier, update details and center map
                                    if (selectedCourierId === courier._id) {
                                        renderCourierDetails(courier);
                                        map.setView([lat, lng], map.getZoom());
                                    }
                                }
                            }
                        })
                        .catch(error => console.error('Error fetching updated courier data:', error));
                }
            });
        } catch (error) {
            console.error('Socket.IO initialization failed:', error);
        }
    });
</script> 