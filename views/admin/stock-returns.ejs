<%- contentFor('HeaderCss') %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.7.6/lottie.min.js"></script>
<link href="/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
<link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">

<%- contentFor('body') %>
<style>
  /* Fix for dropdown menus in tables */
  .table-responsive {
    overflow: visible !important;
    /* Prevent clipping inside table container */
  }

  .stats-card {
    transition: all 0.3s ease;
    border-radius: 10px;
    overflow: hidden;
  }

  .stats-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }

  .stats-icon {
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
  }

  .quick-add-form {
    background-color: #f8f9fa;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }

  .status-badge {
    padding: 6px 12px;
    border-radius: 50px;
    font-weight: 500;
    font-size: 0.85rem;
  }

  .return-action-btn {
    width: 32px;
    height: 32px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 6px;
    margin-right: 5px;
  }

  .nav-tabs-custom .nav-link.active {
    color: #fff;
    background-color: #405189;
    border-radius: 30px;
  }

  .nav-tabs-custom .nav-link {
    border-radius: 30px;
    padding: 5px 15px;
  }

  .zone-header {
    background-color: #f8f9fa;
    border-left: 4px solid #405189;
    padding: 10px 15px;
    margin-bottom: 15px;
    border-radius: 0 4px 4px 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .zone-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0;
    display: flex;
    align-items: center;
  }

  .zone-badge {
    font-size: 0.8rem;
    padding: 4px 8px;
    border-radius: 50px;
    margin-left: 10px;
  }

  .zone-actions {
    display: flex;
    gap: 8px;
  }

  .zone-container {
    margin-bottom: 30px;
  }

  .zone-container:last-child {
    margin-bottom: 0;
  }

  .bulk-actions {
    display: none;
    background-color: #f8f9fa;
    border-radius: 8px;
    padding: 10px 15px;
    margin-bottom: 15px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .bulk-actions.show {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .bulk-actions-title {
    font-weight: 500;
    margin-bottom: 0;
  }

  .bulk-actions-buttons {
    display: flex;
    gap: 8px;
  }

  .return-reason-badge {
    font-size: 0.75rem;
    padding: 3px 8px;
    border-radius: 4px;
  }

  /* Custom Dropdown Styles */
  .custom-dropdown {
    position: relative;
    display: inline-block;
  }

  .custom-dropdown-toggle {
    background-color: #f0f0f0;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 6px 10px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .custom-dropdown-toggle:hover {
    background-color: #e5e5e5;
  }

  .custom-dropdown-menu {
    position: absolute;
    top: 100%;
    left: auto;
    right: 0;
    z-index: 1050;
    /* Ensure it appears above other elements */
    display: none;
    min-width: 200px;
    padding: 8px 0;
    margin: 0;
    background-color: #fff;
    border: 1px solid rgba(0, 0, 0, 0.15);
    border-radius: 4px;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);
    overflow: visible;
    /* Prevent clipping */
  }

  .custom-dropdown-menu.show {
    display: block;
  }

  .custom-dropdown-item {
    display: flex;
    align-items: center;
    padding: 8px 16px;
    clear: both;
    font-weight: 400;
    color: #212529;
    text-align: inherit;
    white-space: nowrap;
    background-color: transparent;
    border: 0;
    width: 100%;
    text-align: left;
    cursor: pointer;
  }

  .custom-dropdown-item:hover {
    color: #16181b;
    text-decoration: none;
    background-color: #f8f9fa;
  }

  .custom-dropdown-item i {
    margin-right: 8px;
    font-size: 14px;
  }
</style>

<div class="row">
  <!-- Quick Add Return -->
  <div class="col-lg-6 mb-4">
    <div class="card">
      <div class="card-header border-0 bg-light">
        <h5 class="card-title mb-0">Quick Add Return</h5>
      </div>
      <div class="card-body">
        <form id="quickAddForm" class="quick-add-form">
          <div class="row g-3 align-items-end">
            <div class="col-md-7">
              <label for="orderNumber" class="form-label">Order Number</label>
              <div class="input-group">
                <span class="input-group-text">#</span>
                <input type="text" class="form-control" id="orderNumber" placeholder="Enter order number" required>
              </div>
            </div>

            <div class="col-md-12">
              <label for="returnReason" class="form-label">Return Reason</label>
              <select class="form-select" id="returnReason">
                <option value="">Select a reason (optional)</option>
                <option value="Customer requested return">Customer requested return</option>
                <option value="Damaged product">Damaged product</option>
                <option value="Wrong product">Wrong product</option>
                <option value="Quality issues">Quality issues</option>
                <option value="Other">Other</option>
              </select>
            </div>

            <div class="col-md-12">
              <label for="returnNotes" class="form-label">Return Notes</label>
              <textarea class="form-control" id="returnNotes" rows="2" placeholder="Add any additional notes about this return"></textarea>
            </div>

            <div class="col-md-12">
              <button type="submit" class="btn btn-primary w-100">
                <i class="ri-add-line me-1"></i> Add Return
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Main Returns Management Card -->
  <div class="col-lg-12">
    <div class="card" id="returnsList">
      <div class="card-header border-0">
        <div class="row align-items-center gy-3">
          <div class="col-sm">
            <h5 class="card-title mb-0">Returns Management</h5>
          </div>
          <div class="col-sm-auto">
            <div class="d-flex gap-1 flex-wrap">
              <button type="button" class="btn btn-info" id="exportReturnsBtn">
                <i class="ri-file-download-line align-bottom me-1"></i> Export
              </button>
              <button class="btn btn-soft-danger" id="remove-actions" onClick="deleteMultiple()">
                <i class="ri-delete-bin-2-line"></i>
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Search and Filter Section -->
      <div class="card-body border border-dashed border-end-0 border-start-0">
        <form id="returnsSearchForm">
          <div class="row g-3">
            <div class="col-xxl-5 col-sm-6">
              <div class="search-box">
                <input type="text" class="form-control search" id="returnsSearch" placeholder="Search for order ID, product, status or something...">
                <i class="ri-search-line search-icon"></i>
              </div>
            </div>
            <div class="col-xxl-2 col-sm-6">
              <div>
                <input type="text" class="form-control" data-provider="flatpickr" data-date-format="d M, Y" data-range-date="true" id="returnsDateRange" placeholder="Select date range">
              </div>
            </div>
            <div class="col-xxl-2 col-sm-4">
              <div>
                <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="returnsStatusFilter">
                  <option value="">Status</option>
                  <option value="all" selected>All</option>
                  <option value="pendingPickup">Pending Pickup</option>
                  <option value="inWarehouse">In Warehouse</option>
                  <option value="processing">Processing</option>
                  <option value="readyForProcessing">Ready For Processing</option>
                  <option value="processed">Processed</option>
                  <option value="damaged">Damaged</option>
                </select>
              </div>
            </div>
            <div class="col-xxl-2 col-sm-4">
              <div>
                <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="zoneFilter">
                  <option value="">Zone</option>
                  <option value="all" selected>All Zones</option>
                  <option value="Nasr City">Nasr City</option>
                  <option value="Maadi">Maadi</option>
                  <option value="Heliopolis">Heliopolis</option>
                  <option value="Downtown">Downtown</option>
                  <option value="New Cairo">New Cairo</option>
                  <option value="6th October">6th October</option>
                </select>
              </div>
            </div>
            <div class="col-xxl-1 col-sm-4">
              <div>
                <button type="button" class="btn btn-primary w-100" onclick="searchReturns()">
                  <i class="ri-equalizer-fill me-1 align-bottom"></i> Filter
                </button>
              </div>
            </div>
          </div>
        </form>
      </div>

      <!-- Returns Table Section -->
      <div class="card-body pt-0">
        <div>
          <ul class="nav nav-tabs nav-tabs-custom nav-success mb-3" role="tablist">
            <li class="nav-item">
              <button class="btn returnFilter btn-link nav-link active All py-2 px-3" data-bs-toggle="tab" id="All" role="tab" aria-selected="true" onClick="filterReturns('all')">
                <i class="ri-store-2-fill me-1 align-bottom"></i> All Returns
              </button>
            </li>
          </ul>

          <!-- Bulk Actions Bar (Initially Hidden) -->
          <div id="bulkActionsBar" class="bulk-actions mb-3">
            <div class="bulk-actions-title">
              <span id="selectedItemsCount">0</span> items selected
            </div>
            <div class="bulk-actions-buttons">
              <button class="btn btn-sm btn-success" onclick="assignMultipleReturns()">
                <i class="ri-user-add-line me-1"></i> Assign to Courier
              </button>
              <button class="btn btn-sm btn-info" onclick="printMultipleLabels()">
                <i class="ri-printer-line me-1"></i> Print Labels
              </button>
              <button class="btn btn-sm btn-danger" onclick="deleteMultiple()">
                <i class="ri-delete-bin-2-line me-1"></i> Remove
              </button>
              <button class="btn btn-sm btn-light" onclick="clearSelection()">
                <i class="ri-close-line me-1"></i> Clear Selection
              </button>
            </div>
          </div>

          <!-- Returns Items Grouped by Zone -->
          <div id="returnItemsByZone">
            <!-- Zone groups will be inserted here dynamically -->
          </div>

          <div class="noresult" id="NoResult" style="display: none">
            <div class="text-center">
              <lord-icon src="https://cdn.lordicon.com/msoeawqm.json" trigger="loop" colors="primary:#405189,secondary:#0ab39c" style="width:75px;height:75px"></lord-icon>
              <h5 class="mt-2">Sorry! No Result Found</h5>
            </div>
          </div>

          <!-- Pagination -->
          <div class="d-flex justify-content-end mt-3">
            <div class="pagination-wrap hstack gap-2">
              <a class="page-item pagination-prev disabled" href="javascript:void(0);">
                Previous
              </a>
              <ul class="pagination listjs-pagination mb-0"></ul>
              <a class="page-item pagination-next" href="javascript:void(0);">
                Next
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Returns in Progress Cards -->
  <div class="col-lg-12 mb-4">
    <div class="card">
      <div class="card-header border-0 bg-light">
        <h5 class="card-title mb-0">Returns in Progress</h5>
      </div>
      <div class="card-body">
        <div class="row g-3" id="inProgressReturnsCards">
          <!-- Cards will be populated dynamically -->
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Update Return Status Modal -->
<div class="modal fade" id="updateReturnStatusModal" tabindex="-1" aria-labelledby="updateReturnStatusModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="updateReturnStatusModalLabel">Update Return Status</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="updateReturnStatusForm">
          <input type="hidden" id="updateOrderId" name="updateOrderId" value="">
          <div class="mb-3">
            <label for="newReturnStatus" class="form-label">Return Status</label>
            <select class="form-select" id="newReturnStatus" name="newReturnStatus" required>
              <option value="">Select new status</option>
              <option value="pendingPickup">Pending Pickup</option>
              <option value="inWarehouse">In Warehouse</option>
              <option value="processing">Processing</option>
              <option value="readyForProcessing">Ready For Processing</option>
              <option value="processed">Processed</option>
              <option value="damaged">Damaged</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="statusNotes" class="form-label">Notes</label>
            <textarea class="form-control" id="statusNotes" name="statusNotes" rows="3" placeholder="Add notes about this status change"></textarea>
          </div>
          <div class="mb-3">
            <label for="warehouseLocation" class="form-label">Warehouse Location</label>
            <input type="text" class="form-control" id="warehouseLocation" name="warehouseLocation" placeholder="e.g., Shelf A-12, Zone B">
          </div>
          <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">Update Status</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Assign to Courier Modal -->
<div class="modal fade" id="assignToCourierModal" tabindex="-1" aria-labelledby="assignToCourierModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="assignToCourierModalLabel">Assign to Courier</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="courierLoader" class="text-center" style="display: none;">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <form id="assignToCourierForm">
          <input type="hidden" id="courierOrderIds" name="courierOrderIds" value="">
          <input type="hidden" id="courierZone" name="courierZone" value="">
          <div class="mb-3">
            <label for="courierSelect" class="form-label">Select Courier</label>
            <select class="form-select" id="courierSelect" name="courierSelect" required>
              <option value="">Select a courier</option>
            </select>
          </div>
          <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">Assign</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Print Label Modal -->
<div class="modal fade" id="printLabelModal" tabindex="-1" aria-labelledby="printLabelModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="printLabelModalLabel">Print Return Label</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Select the label size for printing:</p>
        <form id="printLabelForm">
          <input type="hidden" id="labelOrderId" name="labelOrderId" value="">
          <div class="d-flex justify-content-around mb-4">
            <div class="paper-size-option" onclick="selectLabelSize('small')">
              <div class="border p-3 text-center rounded" style="width: 100px; height: 70px;">
                <i class="ri-file-list-3-line fs-3"></i>
                <p class="mb-0 mt-1">Small</p>
              </div>
            </div>
            <div class="paper-size-option" onclick="selectLabelSize('medium')">
              <div class="border p-3 text-center rounded" style="width: 120px; height: 90px;">
                <i class="ri-file-list-3-line fs-2"></i>
                <p class="mb-0 mt-1">Medium</p>
              </div>
            </div>
            <div class="paper-size-option" onclick="selectLabelSize('large')">
              <div class="border p-3 text-center rounded" style="width: 140px; height: 110px;">
                <i class="ri-file-list-3-line fs-1"></i>
                <p class="mb-0 mt-1">Large</p>
              </div>
            </div>
          </div>
          <input type="hidden" id="labelSize" name="labelSize" value="">
          <div class="form-check mb-3">
            <input class="form-check-input" type="checkbox" id="includeBarcode" checked>
            <label class="form-check-label" for="includeBarcode">
              Include barcode
            </label>
          </div>
          <div class="form-check mb-3">
            <input class="form-check-input" type="checkbox" id="includeQRCode" checked>
            <label class="form-check-label" for="includeQRCode">
              Include QR code
            </label>
          </div>
          <div class="d-flex justify-content-end mt-3">
            <button type="button" class="btn btn-primary" onclick="printLabel()">Print Label</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Assign Zone to Courier Modal -->
<div class="modal fade" id="assignZoneToCourierModal" tabindex="-1" aria-labelledby="assignZoneToCourierModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="assignZoneToCourierModalLabel">Assign Zone to Courier</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="zoneLoader" class="text-center" style="display: none;">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <form id="assignZoneToCourierForm">
          <input type="hidden" id="assignZoneName" name="assignZoneName" value="">
          <div class="mb-3">
            <label for="zoneOrderStatus" class="form-label">Return Status</label>
            <select class="form-select" id="zoneOrderStatus" name="zoneOrderStatus" required>
              <option value="all">All Returns in Zone</option>
              <option value="pendingPickup" selected>Only Pending Pickup</option>
              <option value="inWarehouse">Only In Warehouse</option>
              <option value="processing">Only Processing</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="zoneCourierSelect" class="form-label">Select Courier</label>
            <select class="form-select" id="zoneCourierSelect" name="zoneCourierSelect" required>
              <option value="">Select a courier</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="zonePickupNotes" class="form-label">Pickup Notes</label>
            <textarea class="form-control" id="zonePickupNotes" name="zonePickupNotes" rows="2" placeholder="Add notes for the courier"></textarea>
          </div>
          <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">Assign Zone & Schedule Pickup</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<%- contentFor('FooterJs') %>
<script src="/assets/libs/list.js/list.min.js"></script>
<script src="/assets/libs/list.pagination.js/list.pagination.min.js"></script>
<script src="/assets/libs/sweetalert2/sweetalert2.min.js"></script>

<script>
  const returnItemsByZone = document.getElementById("returnItemsByZone");
  const NoResult = document.getElementById("NoResult");
  const checkAll = document.getElementById("checkAll");
  const bulkActionsBar = document.getElementById("bulkActionsBar");
  const selectedItemsCount = document.getElementById("selectedItemsCount");
  let selectedItems = [];

  // Close all dropdowns when clicking outside
  document.addEventListener('click', function(event) {
    const dropdowns = document.querySelectorAll('.custom-dropdown-menu.show');
    dropdowns.forEach(dropdown => {
      // Check if click is outside the dropdown
      if (!dropdown.parentElement.contains(event.target)) {
        dropdown.classList.remove('show');
      }
    });
  });

  // Handle "check all" checkbox
  if (checkAll) {
    checkAll.addEventListener("change", function() {
      const checkboxes = document.querySelectorAll("input[name='checkAll[]']");
      checkboxes.forEach(checkbox => {
        checkbox.checked = checkAll.checked;
        handleCheckboxChange(checkbox);
      });
    });
  }

  // Quick Add Form Submission
  document.getElementById("quickAddForm").addEventListener("submit", async function(e) {
    e.preventDefault();

    const orderNumber = document.getElementById("orderNumber").value.trim();
    const returnReason = document.getElementById("returnReason").value;
    const returnNotes = document.getElementById("returnNotes").value;

    // Show loading indicator
    Swal.fire({
      title: 'Processing...',
      text: 'Adding return to system',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });

    try {
      // post request to add return to system
      const response = await fetch('/admin/add-return-to-stock', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          orderNumber,
          returnReason,
          returnNotes
        })
      });

      const data = await response.json();
      console.log(data);

      if (response.ok) {
        Swal.fire({
          icon: 'success',
          title: 'Return Added',
          text: `Order #${orderNumber} has been added to returns system`,
          timer: 2000
        }).then(() => {
          // Reset form and refresh returns data
          document.getElementById("quickAddForm").reset();
          // focus on order number input
          document.getElementById("orderNumber").focus();
          fetchReturnItems();
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: `Order #${orderNumber} ${data.error}`,
        });
      }
    } catch (error) {
      console.error("Error adding return to system:", error);
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: `Error adding return to system: ${error.message || 'Unknown error'}`,
      });
    }
  });

  // Toggle custom dropdown
  function toggleDropdown(dropdownId, event) {
    const dropdown = document.getElementById(dropdownId);

    // Close all other dropdowns first
    document.querySelectorAll('.custom-dropdown-menu.show').forEach(menu => {
      if (menu.id !== dropdownId) {
        menu.classList.remove('show');
      }
    });

    // Toggle this dropdown
    dropdown.classList.toggle('show');

    // Prevent event from bubbling up
    event.stopPropagation();
  }

  // Fetch return items from server
  async function fetchReturnItems(status = "all") {
    try {
      // Show loading spinner
      returnItemsByZone.innerHTML = `
        <div class="text-center py-4">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Loading return items...</p>
        </div>
      `;

      // In a real implementation, you would fetch from your API
      const response = await fetch(`/admin/get-return-orders?status=${status}`);
      const returnItems = await response.json();
      if (response.ok) {
        console.log('returnItems', returnItems);

        // Group items by zone
        const itemsByZone = groupItemsByZone(returnItems);

        // Populate zones
        returnItemsByZone.innerHTML = ""; // Clear existing content
        NoResult.style.display = "none";

        if (returnItems.length === 0) {
          NoResult.style.display = "block";
          return;
        }

        console.log('inProgressReturns');
        populateZoneGroups(itemsByZone);

        inProgressReturns(returnItems.filter(item => (item.orderStatus == 'returnAtWarehouse' || item.orderStatus == 'returnAtWarehouse') && item.deliveryMan));
      } else {
        NoResult.style.display = "block";
        returnItemsByZone.innerHTML = "";
      }
    } catch (error) {
      NoResult.style.display = "block";
      returnItemsByZone.innerHTML = "";
      console.error("Error fetching return items:", error);
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: `Error fetching return items: ${error.message || 'Unknown error'}`,
      });
    }
  }

  // Group items by zone
  function groupItemsByZone(items) {
    const zones = {};

    items.forEach(item => {
      const zone = item.orderCustomer.zone || 'Unassigned';
      if (!zones[zone]) {
        zones[zone] = [];
      }
      zones[zone].push(item);
    });

    return zones;
  }

  // Populate zone groups
  function populateZoneGroups(itemsByZone) {
    console.log('itemsByZone', itemsByZone);
    // Sort zones alphabetically
    const sortedZones = Object.keys(itemsByZone).sort();

    sortedZones.forEach(zone => {
      const items = itemsByZone[zone];
      const zoneContainer = document.createElement('div');
      zoneContainer.className = 'zone-container';

      // Create zone header
      const zoneHeader = document.createElement('div');
      zoneHeader.className = 'zone-header';
      zoneHeader.innerHTML = `
        <div class="zone-title">
          <i class="ri-map-pin-line me-2"></i>
          ${zone}
          <span class="badge bg-primary-subtle text-primary zone-badge">${items.length} returns</span>
        </div>
        <div class="zone-actions">
          <button class="btn btn-sm btn-success" onclick="assignZoneToCourier('${zone}')">
            <i class="ri-user-add-line me-1"></i> Assign to Courier
          </button>
          <button class="btn btn-sm btn-info" onclick="printZoneLabels('${zone}')">
            <i class="ri-printer-line me-1"></i> Print Labels
          </button>
        </div>
      `;

      zoneContainer.appendChild(zoneHeader);

      // Create zone table
      const tableContainer = document.createElement('div');
      tableContainer.className = 'table-responsive table-card mb-3';

      const table = document.createElement('table');
      table.className = 'table table-nowrap align-middle';

      // Table header
      const thead = document.createElement('thead');
      thead.className = 'text-muted table-light';
      thead.innerHTML = `
        <tr class="text-uppercase">
          <th scope="col" style="width: 25px;">
            <div class="form-check">
              <input class="form-check-input zone-check-all" type="checkbox" data-zone="${zone}" value="option">
            </div>
          </th>
          <th>Order ID</th>
          <th>Customer & Location</th>
          <th>Return Reason</th>
          <th>Return Status</th>
          <th>Amount Details</th>
          <th>Return Date</th>
          <th>Days in System</th>
          <th>Action</th>
        </tr>
      `;

      // Table body
      const tbody = document.createElement('tbody');
      tbody.className = 'list form-check-all';

      items.forEach((item, index) => {
        console.log('item', item);
        const row = document.createElement('tr');

        // Calculate days in system
        const returnDate = new Date(item.updatedAt);
        const today = new Date();
        const daysInSystem = Math.floor((today - returnDate) / (1000 * 60 * 60 * 24));
        console.log('daysInSystem', daysInSystem);

        // Get status badge class
        const statusDetails = getReturnStatusDetails(item.orderStatus);
        console.log('statusDetails', statusDetails);

        // Get return reason badge class or handle Exchange/Cash Collection
        let reasonDetails;
        let returnReasonDisplay = '';
        
        if (item.orderShipping.orderType === 'Exchange') {
          reasonDetails = { badgeClass: 'bg-warning-subtle text-warning', reasonText: 'Exchange' };
          returnReasonDisplay = `
            <div><strong>Exchange:</strong> ${item.orderShipping.productDescription || ''} → ${item.orderShipping.productDescriptionReplacement || ''}</div>
          `;
        } else if (item.orderShipping.orderType === 'Cash Collection') {
          reasonDetails = { badgeClass: 'bg-info-subtle text-info', reasonText: 'Cash Collection' };
          returnReasonDisplay = `
            <div><strong>Amount:</strong> ${item.orderShipping.amount || 0} EGP</div>
          `;
        } else {
          reasonDetails = getReturnReasonDetails(item.UnavailableReason[0] || 'other');
          returnReasonDisplay = `
            <span class="badge ${reasonDetails.badgeClass} return-reason-badge">
              ${reasonDetails.reasonText}
            </span>
          `;
        }

        // Handle product description
        const productDesc = item.orderShipping.productDescription;
        const shouldShowMoreProduct = productDesc && productDesc.length > 30;
        const truncatedDesc = shouldShowMoreProduct ? productDesc.substring(0, 30) + '...' : productDesc || '';
        const showMoreProductBtn = shouldShowMoreProduct ?
          `<button class="btn btn-link btn-sm p-0" onclick="showFullDescription('${productDesc}')">Show More</button>` : '';

        // Handle location
        const address = item.orderCustomer.address;
        const shouldShowMoreAddress = address && address.length > 20;
        const truncatedLocation = shouldShowMoreAddress ? address.substring(0, 20) + '...' : address || '';
        const showMoreAddressBtn = shouldShowMoreAddress ?
          `<button class="btn btn-link btn-sm p-0" onclick="showFullAddress('${address}')">Show More</button>` : '';

        // Create unique dropdown ID for this row
        const dropdownId = `dropdown-menu-${zone.replace(/\s+/g, '-')}-${index}`;

        row.innerHTML = `
          <th scope="row">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" name="checkAll[]" data-order-id="${item.orderNumber}" data-zone="${zone}" value="${item.orderNumber}">
            </div>
          </th>
          <td class="id"><a href="/admin/order-details/${item.orderNumber}" class="fw-medium link-primary">#${item.orderNumber}</a></td>
   
          <td class="customer_details">
            <div>${item.orderCustomer.fullName}</div>
            <small class="text-muted">
              ${truncatedLocation}
              ${showMoreAddressBtn}
            </small>
          </td>
          <td class="return_reason">
            ${returnReasonDisplay}
          </td>
          <td class="return_status">
            <span class="badge ${statusDetails.badgeClass} status-badge">
              ${statusDetails.statusText}
            </span>
          </td>
          <td class="amount_details">
            <div><strong>${item.orderShipping.amountType}:</strong> ${item.orderShipping.amount} EGP</div>
          </td>
          <td class="return_date">${returnDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}</td>
          <td class="days_in_system">
            <span class="${daysInSystem > 7 ? 'text-danger fw-medium' : ''}">${daysInSystem} days</span>
          </td>
          <td>
            <div class="custom-dropdown">
              <button class="custom-dropdown-toggle" onclick="toggleDropdown('${dropdownId}', event)">
                <i class="ri-more-fill align-middle"></i>
              </button>
              <div id="${dropdownId}" class="custom-dropdown-menu">
                <button class="custom-dropdown-item" onclick="updateReturnStatus('${item.orderNumber}')">
                  <i class="ri-edit-2-fill text-warning"></i> <span>Update Status</span>
                </button>
                <button class="custom-dropdown-item" onclick="getCouriers('${item.orderNumber}', '${zone}')">
                  <i class="ri-user-add-line text-success"></i> <span>Assign to Courier</span>
                </button>
          
                <button class="custom-dropdown-item" onclick="removeFromReturns('${item.orderNumber}')">
                  <i class="ri-delete-bin-6-fill text-danger"></i> <span>Remove</span>
                </button>
              </div>
            </div>
          </td>
        `;

        tbody.appendChild(row);
      });

      table.appendChild(thead);
      table.appendChild(tbody);
      tableContainer.appendChild(table);
      zoneContainer.appendChild(tableContainer);

      returnItemsByZone.appendChild(zoneContainer);
    });

    // Add event listeners for checkboxes
    addCheckboxEventListeners();
  }

  // Display in progress returns
  function inProgressReturns(inProgressReturns) {
    try {
      console.log('inProgressReturns', inProgressReturns);
      // Group returns by courier
      const returnsByCourier = {};
      inProgressReturns.forEach(returnItem => {
        if (returnItem.deliveryMan && (returnItem.orderStatus === 'returnAtWarehouse' || returnItem.orderStatus === 'returnAtWarehouse')) {
          if (!returnsByCourier[returnItem.deliveryMan._id]) {
            returnsByCourier[returnItem.deliveryMan._id] = {
              courier: returnItem.deliveryMan,
              returns: []
            };
          }
          returnsByCourier[returnItem.deliveryMan._id].returns.push(returnItem);
        }
      });

      const cardsContainer = document.getElementById('inProgressReturnsCards');
      cardsContainer.innerHTML = '';

      // Create card for each courier and their returns
      Object.values(returnsByCourier).forEach(({
        courier,
        returns
      }) => {
        const cardDiv = document.createElement('div');
        cardDiv.className = 'col-md-6 col-xl-4';
        cardDiv.innerHTML = `
                <div class="card border-0 shadow-sm hover-shadow">
                    <div class="card-header bg-danger bg-opacity-10 border-0">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <div class="avatar-sm">
                                    <div class="avatar-title bg-danger bg-opacity-10 text-danger rounded-circle fs-3">
                                        <i class="ri-user-3-line"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <h5 class="card-title mb-1">${courier.name}</h5>
                                <p class="text-muted mb-0">
                                    <i class="ri-phone-line me-1"></i>${courier.phoneNumber || 'No Phone'}
                                </p>
                            </div>
                            <div class="flex-shrink-0">
                                <span class="badge bg-danger-subtle text-danger fs-12 fw-medium">
                                    ${returns.length} Returns
                                </span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <h6 class="card-subtitle mb-0">Returns Details</h6>
                        </div>

                        <div class="return-list mb-3" style="max-height: 150px; overflow-y: auto;">
                            ${returns.map(returnItem => `
                                <div class="d-flex align-items-center p-2 rounded-2 bg-light bg-opacity-50 mb-2">
                                    <div class="flex-grow-1">
                                        <span class="badge bg-info-subtle text-info fw-medium">#${returnItem.orderNumber}</span>
                                        <small class="d-block text-muted mt-1">
                                            ${returnItem.orderCustomer?.fullName || 'N/A'}
                                        </small>
                                        <small class="d-block text-muted">
                                            <i class="ri-map-pin-line me-1"></i>${returnItem.orderCustomer?.zone || 'No Zone'}
                                        </small>
                                    </div>
                                    <div class="flex-shrink-0">
                                        <span class="badge ${getReturnReasonDetails(returnItem.UnavailableReason[0] || 'other').badgeClass}">
                                            ${getReturnReasonDetails(returnItem.UnavailableReason[0] || 'other').reasonText}
                                        </span>
                                    </div>
                                </div>
                            `).join('')}
                        </div>

                        <div class="d-flex gap-2">
                            <button class="btn btn-success flex-grow-1" onclick="markReturnsAsReceived('${courier._id}')">
                                <i class="ri-check-double-line me-1"></i> Mark as Received
                            </button>
                        </div>
                    </div>
                </div>
            `;
        cardsContainer.appendChild(cardDiv);
      });

    } catch (error) {
      console.error('Error processing in-progress returns:', error);
      // Show error toast
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Failed to process in-progress returns',
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000
      });
    }
  }

  // Mark returns as received by courier
  async function markReturnsAsReceived(courierId) {
    try {
      // Show confirmation dialog first
      const confirmResult = await Swal.fire({
        title: 'Confirm Action',
        text: 'Are you sure you want to mark these returns as received from the courier?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Yes, mark as received',
        cancelButtonText: 'Cancel',
        confirmButtonClass: 'btn btn-success',
        cancelButtonClass: 'btn btn-danger',
        buttonsStyling: true
      });

      if (!confirmResult.isConfirmed) {
        return;
      }

      // Show loading state
      Swal.fire({
        title: 'Processing...',
        html: 'Please wait while we update the returns...',
        allowOutsideClick: false,
        showConfirmButton: false,
        willOpen: () => {
          Swal.showLoading();
        }
      });

      const response = await fetch('/admin/return-courier-received', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          courierId
        })
      });

      if (response.ok) {
        // Refresh the returns list
        await fetchReturnItems();

        // Show success message
        Swal.fire({
          title: 'Success!',
          text: 'Returns marked as received from courier',
          icon: 'success',
          confirmButtonClass: 'btn btn-primary w-xs mt-2',
          buttonsStyling: true
        });
      } else {
        throw new Error('Failed to update returns');
      }
    } catch (error) {
      console.error('Error updating returns:', error);
      Swal.fire({
        title: 'Error!',
        text: 'Failed to update returns',
        icon: 'error',
        confirmButtonClass: 'btn btn-primary w-xs mt-2',
        buttonsStyling: true
      });
    }
  }

  // Show full description
  function showFullDescription(description) {
    Swal.fire({
      title: 'Full Description',
      text: description,
      showCloseButton: true,
      showCancelButton: true,
      confirmButtonText: 'Close',
      cancelButtonText: 'Copy',
      showLoaderOnConfirm: true,
      preConfirm: () => {
        navigator.clipboard.writeText(description);
        return true;
      }
    });
  }

  // Show full address
  function showFullAddress(address) {
    Swal.fire({
      title: 'Full Address',
      text: address,
      showCloseButton: true,
      showCancelButton: true,
      confirmButtonText: 'Close',
      cancelButtonText: 'Copy',
      showLoaderOnConfirm: true,
      preConfirm: () => {
        navigator.clipboard.writeText(address);
        return true;
      }
    });
  }

  // Add event listeners for checkboxes
  function addCheckboxEventListeners() {
    // Zone check all checkboxes
    document.querySelectorAll('.zone-check-all').forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        const zone = this.getAttribute('data-zone');
        const zoneCheckboxes = document.querySelectorAll(`input[name="checkAll[]"][data-zone="${zone}"]`);

        zoneCheckboxes.forEach(cb => {
          cb.checked = this.checked;
          handleCheckboxChange(cb);
        });
      });
    });

    // Individual checkboxes
    document.querySelectorAll('input[name="checkAll[]"]').forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        handleCheckboxChange(this);
      });
    });
  }

  // Handle checkbox change
  function handleCheckboxChange(checkbox) {
    const orderId = checkbox.getAttribute('data-order-id');

    if (checkbox.checked) {
      if (!selectedItems.includes(orderId)) {
        selectedItems.push(orderId);
      }
    } else {
      const index = selectedItems.indexOf(orderId);
      if (index > -1) {
        selectedItems.splice(index, 1);
      }
    }

    // Update selected items count
    selectedItemsCount.textContent = selectedItems.length;

    // Show/hide bulk actions bar
    if (selectedItems.length > 0) {
      bulkActionsBar.classList.add('show');
    } else {
      bulkActionsBar.classList.remove('show');
    }
  }

  // Clear selection
  function clearSelection() {
    document.querySelectorAll('input[name="checkAll[]"]').forEach(checkbox => {
      checkbox.checked = false;
    });

    document.querySelectorAll('.zone-check-all').forEach(checkbox => {
      checkbox.checked = false;
    });

    if (checkAll) {
      checkAll.checked = false;
    }

    selectedItems = [];
    selectedItemsCount.textContent = '0';
    bulkActionsBar.classList.remove('show');
  }

  // Filter return items by status
  function filterReturns(status) {
    console.log("Filtering returns by status:", status);
    fetchReturnItems(status);
  }

  // Search return items
  function searchReturns() {
    const searchTerm = document.getElementById('returnsSearch').value;
    const statusFilter = document.getElementById('returnsStatusFilter').value;
    const zoneFilter = document.getElementById('zoneFilter').value;
    const dateRange = document.getElementById('returnsDateRange').value;

    console.log("Searching returns with filters:", {
      searchTerm,
      statusFilter,
      zoneFilter,
      dateRange
    });

    // In a real implementation, you would call your API with these filters
    // For demo, we'll just show a success message
    Swal.fire({
      icon: 'info',
      title: 'Search Applied',
      text: 'Search filters have been applied',
      timer: 1500
    });

    // Then refresh the data
    fetchReturnItems(statusFilter !== 'all' ? statusFilter : 'all');
  }

  // Update return status
  function updateReturnStatus(orderNumber) {
    document.getElementById('updateOrderId').value = orderNumber;

    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('updateReturnStatusModal'));
    modal.show();
  }

  // Assign to courier
  async function getCouriers(orderNumber, zone) {
    document.getElementById('courierOrderIds').value = orderNumber;
    document.getElementById('courierZone').value = zone || '';
    document.getElementById('courierLoader').style.display = 'block';

    // Fetch available couriers from API
    await fetch(`/admin/get-couriers-by-zone?zone=${zone || ''}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(response => response.json())
      .then(couriers => {
        const courierSelect = document.getElementById('courierSelect');
        courierSelect.innerHTML = '<option value="">Select a courier</option>';

        couriers.forEach(courier => {
          const option = document.createElement('option');
          option.value = courier._id;
          option.textContent = courier.name;
          courierSelect.appendChild(option);
        });
      })
      .catch(error => {
        console.error('Error fetching couriers:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Failed to load available couriers. Please try again.'
        });
      })
      .finally(() => {
        document.getElementById('courierLoader').style.display = 'none';
      });

    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('assignToCourierModal'));
    modal.show();
  }

  // Assign multiple returns
  async function assignMultipleReturns() {
    if (selectedItems.length === 0) {
      Swal.fire({
        icon: 'warning',
        title: 'No Items Selected',
        text: 'Please select items to assign'
      });
      return;
    }

    document.getElementById('courierOrderIds').value = selectedItems.join(',');
    document.getElementById('courierLoader').style.display = 'block';

    // Get zone of first selected item
    const firstItemZone = document.querySelector(`input[data-order-id="${selectedItems[0]}"]`)?.getAttribute('data-zone');

    document.getElementById('courierZone').value = firstItemZone || '';

    try {
      // Fetch available couriers from API
      const response = await fetch(`/admin/get-couriers-by-zone?zone=${firstItemZone || ''}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const couriers = await response.json();

      const courierSelect = document.getElementById('courierSelect');
      courierSelect.innerHTML = '<option value="">Select a courier</option>';

      couriers.forEach(courier => {
        const option = document.createElement('option');
        option.value = courier._id;
        option.textContent = courier.name;
        courierSelect.appendChild(option);
      });

    } catch (error) {
      console.error('Error fetching couriers:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Failed to load available couriers. Please try again.'
      });
    } finally {
      document.getElementById('courierLoader').style.display = 'none';
    }

    // Update modal title to reflect multiple returns
    document.getElementById('assignToCourierModalLabel').textContent = `Assign ${selectedItems.length} Returns to Courier`;

    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('assignToCourierModal'));
    modal.show();
  }

  // Assign zone to courier
  function assignZoneToCourier(zone) {
    document.getElementById('assignZoneName').value = zone;
    document.getElementById('zoneLoader').style.display = 'block';

    // Fetch available couriers from API
    fetch(`/admin/get-couriers-by-zone?zone=${zone || ''}`)
      .then(response => response.json())
      .then(couriers => {
        const courierSelect = document.getElementById('zoneCourierSelect');
        courierSelect.innerHTML = '<option value="">Select a courier</option>';

        couriers.forEach(courier => {
          const option = document.createElement('option');
          option.value = courier._id;
          option.textContent = courier.name;
          courierSelect.appendChild(option);
        });
      })
      .catch(error => {
        console.error('Error fetching couriers:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Failed to load available couriers. Please try again.'
        });
      })
      .finally(() => {
        document.getElementById('zoneLoader').style.display = 'none';
      });

    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('assignZoneToCourierModal'));
    modal.show();
  }

  // Print return label
  function printReturnLabel(orderNumber) {
    document.getElementById('labelOrderId').value = orderNumber;

    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('printLabelModal'));
    modal.show();
  }

  // Print multiple labels
  function printMultipleLabels() {
    if (selectedItems.length === 0) {
      Swal.fire({
        icon: 'warning',
        title: 'No Items Selected',
        text: 'Please select items to print labels for'
      });
      return;
    }

    document.getElementById('labelOrderId').value = selectedItems.join(',');

    // Update modal title to reflect multiple labels
    document.getElementById('printLabelModalLabel').textContent = `Print ${selectedItems.length} Return Labels`;

    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('printLabelModal'));
    modal.show();
  }

  // Print zone labels
  function printZoneLabels(zone) {
    Swal.fire({
      title: `Print All Labels for Zone "${zone}"`,
      text: 'Select the label size for printing:',
      icon: 'question',
      input: 'radio',
      inputOptions: {
        'small': 'Small',
        'medium': 'Medium',
        'large': 'Large'
      },
      inputValue: 'medium',
      showCancelButton: true,
      confirmButtonText: 'Print',
      showLoaderOnConfirm: true,
      preConfirm: (size) => {
        return new Promise((resolve) => {
          setTimeout(() => {
            resolve(size);
          }, 1000);
        });
      }
    }).then((result) => {
      if (result.isConfirmed) {
        Swal.fire({
          icon: 'success',
          title: 'Labels Printed',
          text: `All labels for zone "${zone}" have been sent to printer`,
          timer: 2000
        });
      }
    });
  }

  // Select label size
  function selectLabelSize(size) {
    document.getElementById('labelSize').value = size;

    // Highlight selected size
    document.querySelectorAll('.paper-size-option div').forEach(el => {
      el.classList.remove('border-primary');
    });

    event.currentTarget.querySelector('div').classList.add('border-primary');
  }

  // Print label
  function printLabel() {
    const orderIds = document.getElementById('labelOrderId').value;
    const labelSize = document.getElementById('labelSize').value;
    const includeBarcode = document.getElementById('includeBarcode').checked;
    const includeQRCode = document.getElementById('includeQRCode').checked;

    if (!labelSize) {
      Swal.fire({
        icon: 'warning',
        title: 'Select Size',
        text: 'Please select a label size'
      });
      return;
    }

    // Close modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('printLabelModal'));
    modal.hide();

    // Show success message
    const isMultiple = orderIds.includes(',');
    Swal.fire({
      icon: 'success',
      title: 'Labels Printed',
      text: isMultiple ?
        `${orderIds.split(',').length} labels have been sent to printer` : `Label for order #${orderIds} has been sent to printer`,
      timer: 2000
    });
  }

  // View return history
  function viewReturnHistory(orderNumber) {
    // In a real implementation, you would redirect to a history page or show a modal
    Swal.fire({
      icon: 'info',
      title: 'Return History',
      text: `Viewing history for order #${orderNumber}`,
      timer: 1500
    }).then(() => {
      window.location.href = `/admin/return-history/${orderNumber}`;
    });
  }

  // Remove from returns
  function removeFromReturns(orderNumber) {
    Swal.fire({
      title: 'Are you sure?',
      text: `Do you want to remove order #${orderNumber} from returns?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, remove it!',
      cancelButtonText: 'No, cancel',
      confirmButtonClass: 'btn btn-danger',
      cancelButtonClass: 'btn btn-light',
      buttonsStyling: true
    }).then((result) => {
      if (result.isConfirmed) {
        // In a real implementation, you would call your API to remove the item
        Swal.fire({
          icon: 'success',
          title: 'Removed!',
          text: `Order #${orderNumber} has been removed from returns`,
          timer: 2000
        }).then(() => {
          fetchReturnItems();
        });
      }
    });
  }

  // Delete multiple returns
  function deleteMultiple() {
    if (selectedItems.length === 0) {
      Swal.fire({
        icon: 'warning',
        title: 'No Items Selected',
        text: 'Please select items to remove'
      });
      return;
    }

    Swal.fire({
      title: 'Are you sure?',
      text: `Do you want to remove ${selectedItems.length} selected returns?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, remove them!',
      cancelButtonText: 'No, cancel',
      confirmButtonClass: 'btn btn-danger',
      cancelButtonClass: 'btn btn-light',
      buttonsStyling: true
    }).then((result) => {
      if (result.isConfirmed) {
        // In a real implementation, you would call your API to remove the items
        Swal.fire({
          icon: 'success',
          title: 'Removed!',
          text: `${selectedItems.length} returns have been removed`,
          timer: 2000
        }).then(() => {
          clearSelection();
          fetchReturnItems();
        });
      }
    });
  }

  // Get return status details (badge class and text)
  function getReturnStatusDetails(status) {
    let badgeClass = '';
    let statusText = '';

    if (status === 'returnInitiated') {
      badgeClass = 'bg-secondary-subtle text-secondary';
      statusText = 'Return Initiated';
    } else if (status === 'returnAssigned') {
      badgeClass = 'bg-info-subtle text-info';
      statusText = 'Return Assigned';
    } else if (status === 'returnPickedUp') {
      badgeClass = 'bg-warning-subtle text-warning';
      statusText = 'Return Picked Up';
    } else if (status === 'returnAtWarehouse') {
      badgeClass = 'bg-primary-subtle text-primary';
      statusText = 'At Warehouse';
    } else if (status === 'inReturnStock') {
      badgeClass = 'bg-secondary-subtle text-secondary';
      statusText = 'In Return Stock';
    } else if (status === 'returnToBusiness') {
      badgeClass = 'bg-info-subtle text-info';
      statusText = 'Returning to Business';
    } else if (status === 'returnCompleted') {
      badgeClass = 'bg-success-subtle text-success';
      statusText = 'Return Completed';
    } else if (status === 'pendingPickup') {
      badgeClass = 'bg-warning-subtle text-warning';
      statusText = 'Pending Pickup';
    } else if (status === 'inProgress') {
      badgeClass = 'bg-info-subtle text-info';
      statusText = 'In Progress';
    } else if (status === 'inWarehouse') {
      badgeClass = 'bg-primary-subtle text-primary';
      statusText = 'In Warehouse';
    } else if (status === 'processing') {
      badgeClass = 'bg-info-subtle text-info';
      statusText = 'Processing';
    } else if (status === 'readyForProcessing') {
      badgeClass = 'bg-success-subtle text-success';
      statusText = 'Ready For Processing';
    } else if (status === 'processed') {
      badgeClass = 'bg-secondary-subtle text-secondary';
      statusText = 'Processed';
    } else if (status === 'damaged') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Damaged';
    } else if (status === 'exchangePickup') {
      badgeClass = 'bg-info-subtle text-info';
      statusText = 'Exchange Pickup';
    } else if (status === 'exchangeDelivery') {
      badgeClass = 'bg-success-subtle text-success';
      statusText = 'Exchange Delivery';
    } else if (status === 'collectionComplete') {
      badgeClass = 'bg-success-subtle text-success';
      statusText = 'Collection Complete';
    } else {
      badgeClass = 'bg-secondary-subtle text-secondary';
      statusText = status.charAt(0).toUpperCase() + status.slice(1).replace(/([A-Z])/g, ' $1');
    }

    return {
      badgeClass,
      statusText
    };
  }

  // Get return reason details (badge class and text)
  function getReturnReasonDetails(reason) {
    let badgeClass = '';
    let reasonText = '';

    if (reason === 'customerUnavailable') {
      badgeClass = 'bg-warning-subtle text-warning';
      reasonText = 'Customer Unavailable';
    } else if (reason === 'customerRejected') {
      badgeClass = 'bg-danger-subtle text-danger';
      reasonText = 'Customer Rejected';
    } else if (reason === 'wrongAddress') {
      badgeClass = 'bg-info-subtle text-info';
      reasonText = 'Wrong Address';
    } else if (reason === 'damagedPackage') {
      badgeClass = 'bg-danger-subtle text-danger';
      reasonText = 'Damaged Package';
    } else if (reason === 'other') {
      badgeClass = 'bg-secondary-subtle text-secondary';
      reasonText = 'Other';
    } else {
      badgeClass = 'bg-secondary-subtle text-secondary';
      reasonText = reason.charAt(0).toUpperCase() + reason.slice(1).replace(/([A-Z])/g, ' $1');
    }

    return {
      badgeClass,
      reasonText
    };
  }

  // Handle form submissions
  document.getElementById('updateReturnStatusForm').addEventListener('submit', function(e) {
    e.preventDefault();

    const orderId = document.getElementById('updateOrderId').value;
    const newStatus = document.getElementById('newReturnStatus').value;
    const notes = document.getElementById('statusNotes').value;
    const location = document.getElementById('warehouseLocation').value;

    // Close modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('updateReturnStatusModal'));
    modal.hide();

    // Show success message
    Swal.fire({
      icon: 'success',
      title: 'Status Updated',
      text: `Return #${orderId} status updated to ${newStatus}`,
      timer: 2000
    }).then(() => {
      fetchReturnItems();
    });
  });

  document.getElementById('assignToCourierForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const orderIds = document.getElementById('courierOrderIds').value;
    console.log('orderIds', orderIds);
    const courierId = document.getElementById('courierSelect').value;
    const zone = document.getElementById('courierZone').value;

    if (!courierId) {
      Swal.fire({
        icon: 'warning',
        title: 'Select Courier',
        text: 'Please select a courier'
      });
      return;
    }

    try {
      // Use the correct endpoint for assigning courier to pick up return from customer
      const response = await fetch('/admin/assign-courier-to-return-to-business', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          orderNumbers: orderIds.split(','),
          courierId
        })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error('Failed to assign courier ' + (data.error || ''));
      }

      // Close modal
      const modal = bootstrap.Modal.getInstance(document.getElementById('assignToCourierModal'));
      modal.hide();

      // Show success message
      const isMultiple = orderIds.includes(',');
      Swal.fire({
        icon: 'success',
        title: 'Assigned to Courier',
        text: isMultiple ?
          `${orderIds.split(',').length} returns have been assigned to courier for delivery to business` : `Return #${orderIds} has been assigned to courier for delivery to business`,
        timer: 2000
      }).then(() => {
        clearSelection();
        fetchReturnItems();
      });

    } catch (error) {
      console.error('Error assigning courier:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Failed to assign courier. Please try again.'
      });
    }
  });

  document.getElementById('assignZoneToCourierForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const zone = document.getElementById('assignZoneName').value;
    const status = document.getElementById('zoneOrderStatus').value;
    const courierId = document.getElementById('zoneCourierSelect').value;
    const notes = document.getElementById('zonePickupNotes').value;

    if (!courierId) {
      Swal.fire({
        icon: 'warning',
        title: 'Select Courier',
        text: 'Please select a courier'
      });
      return;
    }

    try {
      // Show loading state
      Swal.fire({
        title: 'Processing...',
        html: 'Assigning returns to courier...',
        allowOutsideClick: false,
        showConfirmButton: false,
        willOpen: () => {
          Swal.showLoading();
        }
      });

      const response = await fetch('/admin/returns-management/assign-zone', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          zone,
          status,
          courierId,
          notes
        })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error('Failed to assign zone ' + (data.error || ''));
      }

      // Close modal
      const modal = bootstrap.Modal.getInstance(document.getElementById('assignZoneToCourierModal'));
      modal.hide();

      // Show success message
      Swal.fire({
        icon: 'success',
        title: 'Zone Assigned',
        text: `All ${status === 'all' ? '' : status + ' '}returns in ${zone} have been assigned to courier`,
        timer: 2000
      }).then(() => {
        fetchReturnItems();
      });

    } catch (error) {
      console.error('Error assigning zone:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Failed to assign zone. Please try again.'
      });
    }
  });

  // Export returns data
  document.getElementById('exportReturnsBtn').addEventListener('click', function() {
    Swal.fire({
      title: 'Export Returns Data',
      text: 'Select export format',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Excel',
      cancelButtonText: 'PDF',
      showDenyButton: true,
      denyButtonText: 'CSV'
    }).then((result) => {
      let format = '';
      if (result.isConfirmed) {
        format = 'Excel';
      } else if (result.isDenied) {
        format = 'CSV';
      } else if (result.dismiss === Swal.DismissReason.cancel) {
        format = 'PDF';
      } else {
        return;
      }

      Swal.fire({
        icon: 'success',
        title: 'Exported!',
        text: `Returns data has been exported as ${format}`,
        timer: 2000
      });
    });
  });

  // Fetch return items on page load
  document.addEventListener("DOMContentLoaded", () => fetchReturnItems());
</script>