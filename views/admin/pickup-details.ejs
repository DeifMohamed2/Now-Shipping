<%- contentFor('HeaderCss') %>

 <!-- Remix Icon CSS -->
 <link href="https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css" rel="stylesheet">
 <!-- Material Design Icons -->
 <link href="https://cdn.jsdelivr.net/npm/@mdi/font@6.5.95/css/materialdesignicons.min.css" rel="stylesheet">
<%- contentFor('body') %>
   <style>
     :root {
       --coral: #f39270;
       --amber: #fdb614;
       --light-blue: #8fcae8;
       --coral-light: rgba(243, 146, 112, 0.1);
       --amber-light: rgba(253, 182, 20, 0.1);
       --light-blue-light: rgba(143, 202, 232, 0.1);
       --coral-medium: rgba(243, 146, 112, 0.5);
       --amber-medium: rgba(253, 182, 20, 0.5);
       --light-blue-medium: rgba(143, 202, 232, 0.5);
     }

     body {
       background-color: #f8f9fa;
       font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
     }

     .card {
       border: none;
       box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
       border-radius: 0.5rem;
       margin-bottom: 1.5rem;
       overflow: hidden;
     }

     .card-header {
       background-color: var(--light-blue);
       color: white;
       border-bottom: none;
       padding: 1rem 1.5rem;
     }

     .card-header h5 {
       margin: 0;
       font-weight: 600;
     }

     .card-body {
       padding: 1.5rem;
     }

     .text-muted {
       color: #6c757d !important;
     }

     .fs-14 {
       font-size: 14px;
     }

     .mb-1 {
       margin-bottom: 0.25rem !important;
     }

     .mb-0 {
       margin-bottom: 0 !important;
     }

     .flex-grow-1 {
       flex-grow: 1 !important;
     }

     .avatar-xs {
       height: 2.5rem;
       width: 2.5rem;
     }

     .avatar-title {
       align-items: center;
       display: flex;
       font-weight: 500;
       height: 100%;
       justify-content: center;
       width: 100%;
       border-radius: 50%;
     }

     .bg-soft-primary {
       background-color: var(--light-blue-light) !important;
     }

     .bg-soft-success {
       background-color: var(--coral-light) !important;
     }

     .bg-soft-info {
       background-color: var(--amber-light) !important;
     }

     .bg-light-subtle {
       background-color: rgba(248, 249, 250, 0.5) !important;
     }

     .border-dashed {
       border-style: dashed !important;
     }

     .rounded-circle {
       border-radius: 50% !important;
     }

     .btn-danger {
       background-color: var(--coral);
       border-color: var(--coral);
       color: #fff;
     }

     .btn-danger:hover {
       background-color: #e07e5c;
       border-color: #e07e5c;
     }

     .btn-primary {
       background-color: var(--light-blue);
       border-color: var(--light-blue);
       color: #fff;
     }

     .btn-primary:hover {
       background-color: #7ab8d9;
       border-color: #7ab8d9;
     }

     /* Enhanced Table Styling */
     .table {
       margin-bottom: 0;
     }

     .table-bordered {
       border: 1px solid #dee2e6;
     }

     .table-bordered td,
     .table-bordered th {
       border: 1px solid rgba(0, 0, 0, 0.05);
     }

     .table thead th {
       background-color: var(--light-blue-light);
       color: #495057;
       font-weight: 600;
       text-transform: uppercase;
       font-size: 0.8rem;
       letter-spacing: 0.5px;
       border-bottom-width: 1px;
     }

     .table tbody tr:nth-of-type(odd) {
       background-color: rgba(0, 0, 0, 0.02);
     }

     .table tbody tr:hover {
       background-color: rgba(0, 0, 0, 0.03);
     }

     /* Enhanced Details Table */
     .details-table td {
       padding: 1rem;
       vertical-align: middle;
     }

     .details-table h6.fs-14 {
       color: var(--amber);
       font-weight: 600;
       margin-bottom: 0.5rem;
     }

     .details-table p.mb-0 {
       font-size: 1rem;
       font-weight: 500;
     }

     /* Compact Timeline */
     .compact-timeline {
       display: flex;
       align-items: center;
       justify-content: space-between;
       padding: 0.5rem 0;
       position: relative;
     }

     .compact-timeline::after {
       content: '';
       position: absolute;
       top: 50%;
       left: 0;
       right: 0;
       height: 2px;
       background-color: #e9ecef;
       z-index: 0;
     }

     .timeline-step {
       display: flex;
       flex-direction: column;
       align-items: center;
       position: relative;
       z-index: 1;
       width: 20%;
     }

     .timeline-icon {
       width: 2.5rem;
       height: 2.5rem;
       border-radius: 50%;
       display: flex;
       align-items: center;
       justify-content: center;
       margin-bottom: 0.5rem;
       background-color: white;
       border: 2px solid #e9ecef;
       color: #adb5bd;
       font-size: 1rem;
     }

     .timeline-icon.active {
       background-color: var(--coral);
       border-color: var(--coral);
       color: white;
     }

     .timeline-text {
       font-size: 0.75rem;
       font-weight: 600;
       text-align: center;
       color: #6c757d;
       max-width: 80px;
     }

     .timeline-text.active {
       color: var(--coral);
     }

     .timeline-date {
       font-size: 0.7rem;
       color: #adb5bd;
       text-align: center;
       margin-top: 0.25rem;
     }

     /* Badge Styling */
     .badge {
       padding: 0.5em 0.75em;
       font-weight: 500;
       border-radius: 0.25rem;
     }

     .badge.bg-success {
       background-color: var(--coral) !important;
     }

     .badge.bg-warning {
       background-color: var(--amber) !important;
       color: #212529;
     }

     .badge.bg-info {
       background-color: var(--light-blue) !important;
     }

     /* Pagination */
     .pagination-wrap {
       display: flex;
       justify-content: flex-end;
       margin-top: 1.5rem;
     }

     .pagination-prev,
     .pagination-next {
       padding: 0.5rem 1rem;
       border: 1px solid #dee2e6;
       background-color: white;
       color: var(--light-blue);
       text-decoration: none;
       border-radius: 0.25rem;
       font-weight: 500;
       transition: all 0.2s;
     }

     .pagination-prev:hover,
     .pagination-next:hover {
       background-color: var(--light-blue);
       color: white;
       border-color: var(--light-blue);
     }

     .pagination-prev.disabled {
       color: #6c757d;
       pointer-events: none;
       background-color: #f8f9fa;
     }

     /* Modal Styling */
     .modal-content {
       border: none;
       border-radius: 0.5rem;
       overflow: hidden;
     }

     .modal-body {
       text-align: center;
       padding: 2.5rem;
     }

     /* Rating Stars */
     .rating-stars {
       display: inline-flex;
       color: var(--amber);
       font-size: 1.5rem;
       cursor: pointer;
     }

     .rating-stars i {
       margin-right: 0.25rem;
     }

     /* Form Controls */
     .form-control {
       padding: 0.75rem 1rem;
       border-radius: 0.375rem;
       border: 1px solid #dee2e6;
     }

     .form-control:focus {
       border-color: var(--light-blue);
       box-shadow: 0 0 0 0.25rem var(--light-blue-light);
     }

     /* Section Title */
     .section-title {
       font-size: 1.5rem;
       font-weight: 600;
       margin-bottom: 1.5rem;
       color: #212529;
       position: relative;
       padding-bottom: 0.75rem;
     }

     .section-title::after {
       content: '';
       position: absolute;
       bottom: 0;
       left: 0;
       width: 3rem;
       height: 3px;
       background-color: var(--coral);
     }
   </style>

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-md-12 mb-4">
      <div class="d-flex align-items-center justify-content-between">
      <h4 class="section-title mb-0">Pickup Details</h4>
      <div>
        <button type="button" class="btn btn-danger me-2" onclick="cancelPickup('<%= pickup._id %>')">
        <i class="ri-delete-bin-6-line me-1"></i> Cancel Pickup
        </button>
        <button type="button" class="btn btn-danger" style="background-color: #f10000b9; border-color: #ea3737ca;" onclick="deletePickup('<%= pickup._id %>')">
        <i class="ri-delete-bin-6-line me-1"></i> Delete Pickup
        </button>
      </div>
      </div>
    </div>

    <!-- Pickup Details Card -->
    <div class="col-md-6">
      <div class="card">
        <div class="card-header text-white">
          <div class="d-sm-flex align-items-center">
            <h5 class="card-title flex-grow-1 mb-0">
              <i class="ri-truck-line me-2"></i>Pickup Details
            </h5>
          </div>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-bordered details-table mb-0">
                <tbody>
                <tr>
                  <td>
                  <h6 class="fs-14 mb-1 text-muted">Pickup Number</h6>
                  <p class="mb-0"><%= pickup.pickupNumber %></p>
                  </td>
                  <td>
                  <h6 class="fs-14 mb-1 text-muted">Pickup Type</h6>
                  <p class="mb-0"><%= pickup.isFragileItems ? 'Fragile' : 'Regular' %></p>
                  </td>
                </tr>
                <tr>
                  <td>
                  <h6 class="fs-14 mb-1 text-muted">Number of Orders</h6>
                  <p class="mb-0"><%= pickup.numberOfOrders %></p>
                  </td>
                  <td>
                  <h6 class="fs-14 mb-1 text-muted">Pickup Status</h6>
                  <p class="mb-0" id="pickupStatus" ><span class="badge bg-success"></span></p>
                  </td>
                </tr>
                <tr>
                  <td>
                  <h6 class="fs-14 mb-1 text-muted">Pickup Date</h6>
                  <p class="mb-0"><%= new Date(pickup.pickupDate).toLocaleDateString() %></p>
                  </td>
                  <td>
                  <h6 class="fs-14 mb-1 text-muted">Contact Info</h6>
                  <p class="mb-0"><%= pickup.phoneNumber %></p>
                  </td>
                </tr>
                <tr>
                  <td>
                  <h6 class="fs-14 mb-1 text-muted">Special Items</h6>
                  <p class="mb-0">
                      <span class="badge bg-info me-1"><%= pickup.isFragileItems ? 'Fragile' : '' %></span>
                      <span class="badge bg-warning"><%= pickup.isLargeItems ? 'Large' : '' %></span>
                    </p>
                  </td>
                  <td>
                    <h6 class="fs-14 mb-1 text-muted">Pickup Notes</h6>
                    <p class="mb-0"><%= pickup.pickupNotes %></p>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <!-- Driver Details Card -->
    <div class="col-md-6">
      <div class="card">
        <div class="card-header text-white">
          <div class="d-sm-flex align-items-center">
            <h5 class="card-title flex-grow-1 mb-0">
              <i class="ri-user-line me-2"></i>Driver Details
            </h5>
          </div>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-bordered details-table mb-0">
              <tbody>
                <tr>
                  <td>
                    <h6 class="fs-14 mb-1 text-muted">Driver Name</h6>
                    <p class="mb-0"><%= pickup.assignedDriver ? pickup.assignedDriver.name : 'N/A' %></p>
                  </td>
                  <td>
                    <h6 class="fs-14 mb-1 text-muted">Vehicle Type</h6>
                    <p class="mb-0"><%= pickup.assignedDriver ? pickup.assignedDriver.vehicleType : 'N/A' %></p>
                  </td>
                </tr>
                <tr>
                  <td>
                    <h6 class="fs-14 mb-1 text-muted">Picked Up Orders</h6>
                    <p class="mb-0"><%= pickup.ordersPickedUp.length %></p>
                  </td>
                  <td>
                    <h6 class="fs-14 mb-1 text-muted">Contact Info</h6>
                    <p class="mb-0"><%= pickup.assignedDriver ? pickup.assignedDriver.phoneNumber : 'N/A' %></p>
                  </td>
                </tr>
             <tr>
               <td>
                 <h6 class="fs-14 mb-1 text-muted">Rate Driver</h6>
                 <div id="driver-rater" dir="ltr"></div>
                 <input type="hidden" id="driverRating" name="driverRating" value="<%= pickup.driverRating %>">
                 <% if (!pickup.pickupStages[4]) { %>
                 <% } %>
               </td>
               <td>
                 <h6 class="fs-14 mb-1 text-muted">Rate Service</h6>
                 <div id="service-rater" dir="ltr"></div>
                 <input type="hidden" id="pickupRating" name="pickupRating" value="<%= pickup.pickupRating %>">
                 <% if (!pickup.pickupStages[4]) { %>
                 <% } %>
               </td>
            
             </tr>

              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- Compact Pickup Stages Timeline -->
  <div class="row mt-4">
    <div class="col-lg-12">
      <div class="card">
        <div class="card-header text-white">
          <h5 class="card-title mb-0"></h5>
            <i class="ri-time-line me-2"></i>Pickup Status
          </h5>
        </div>
        <div class="card-body py-3">
          <div class="compact-timeline">
            <% const stages = ['Pickup Created', 'Driver Assigned', 'Items PickedUp', 'Storage Station', 'Completed']; %>
            <% stages.forEach((stage, index) => { %>
              <div class="timeline-step">
                <div class="timeline-icon <%= pickup.pickupStages[index] ? 'active' : '' %>">
                  <i class="<%= index === 0 ? 'ri-shopping-bag-line' : index === 1 ? 'ri-user-line' : index === 2 ? 'ri-truck-line' : index === 3 ? 'ri-map-pin-line' : 'ri-check-double-line' %>"></i>
                </div>
                <div class="timeline-text <%= pickup.pickupStages[index] ? 'active' : '' %>"><%= stage %></div>
                <div class="timeline-date"><%= pickup.pickupStages[index] ? new Date(pickup.pickupStages[index].stageDate).toLocaleString() : 'Pending' %></div>
              </div>
            <% }); %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Orders Picked Table -->
  <div class="row mt-4">
    <div class="col-lg-12">
      <div class="card" id="invoiceList">
        <div class="card-header text-white">
          <div class="d-flex align-items-center">
            <h5 class="card-title mb-0 flex-grow-1">
              <i class="ri-file-list-3-line me-2"></i>Orders Picked
            </h5>
          </div>
        </div>
        <div class="card-body bg-light-subtle border border-dashed border-start-0 border-end-0 py-3">
          <form>
            <div class="row g-3">
              <div class="col-xxl-3 col-sm-4">
                <div class="input-group">
                    <span class="input-group-text bg-light border-light">
                    <i class="ri-search-line text-muted"></i>
                    </span>
                    <input type="number" class="form-control bg-light border" id="search-input" placeholder="Search By Order ID">
                </div>
              </div>
          
              <div class="col-xxl-2 col-sm-4">
                <button type="button" class="btn btn-primary w-100" onclick="SearchData();">
                    <i class="ri-search-line me-1 align-bottom"></i> Search
                </button>
              </div>
            </div>
          </form>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table align-middle table-hover" id="invoiceTable">
              <thead>
                <tr>
            
                  <th>#Order ID</th>
                  <th>Order Type</th>
                  <th>Status</th>
                  <th>location</th>
                  <th>Total Amount</th>
           
                </tr>
              </thead>
              <tbody id="TBody">
         
              </tbody>
            </table>
            <div class="noresult" style="display: none">
              <div class="text-center py-4">
              <div class="avatar-md mx-auto mb-4">
                <lord-icon src="https://cdn.lordicon.com/tdrtiskw.json" trigger="loop" colors="primary:#405189,secondary:#0ab39c" style="width:80px;height:80px"></lord-icon>
              </div>
              <h5 class="mt-2">No Pickup Orders Found</h5>
              <p class="text-muted mb-0">We couldn't find any pickup orders matching your search criteria.</p>
              </div>
            </div>
          </div>
          <div class="d-flex justify-content-end mt-3">
            <div class="pagination-wrap hstack gap-2">
              <a class="pagination-prev disabled" href="#">
                <i class="ri-arrow-left-s-line me-1"></i> Previous
              </a>
              <ul class="pagination listjs-pagination mb-0">
                <li class="active"><a class="page" href="#">1</a></li>
                <li><a class="page" href="#">2</a></li>
              </ul>
              <a class="pagination-next" href="#">
                Next <i class="ri-arrow-right-s-line ms-1"></i>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

</div>
<!--end row-->
<%- contentFor('FooterJs') %>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



<!-- Custom JS -->
<script>
  // Simple function to handle search
  function SearchData() {
    const searchInput = document.getElementById('search-input').value;
    fetchOrders(searchInput);
  }

  // Initialize rating stars
document.addEventListener('DOMContentLoaded', function() {
  const driverRating = parseInt(document.getElementById('driverRating').value, 10);
  const pickupRating = parseInt(document.getElementById('pickupRating').value, 10);
  const isDriverRated = driverRating > 0;
  const isPickupRated = pickupRating > 0;
  const isFinalStage = document.querySelector('.timeline-text.active').textContent === 'Completed';
  // Initialize driver rating
  console.log(isDriverRated , isPickupRated,isFinalStage);
  const driverRater = raterJs({
    starSize: 22,
    rating: driverRating,
    element: document.querySelector("#driver-rater"),
    readOnly: true,
    rateCallback: function(rate, done) {
      if (!isDriverRated) {
        this.setRating(rate);
        document.getElementById('driverRating').value = rate;
        console.log(rate);
        done();
      } else {
        done();
      }
    }
  });

  // Initialize service rating
  const serviceRater = raterJs({
    starSize: 22,
    rating: pickupRating,
    element: document.querySelector("#service-rater"),
    readOnly: true ,
    rateCallback: function(rate, done) {
      if (!isPickupRated) {
        this.setRating(rate);
        document.getElementById('pickupRating').value = rate;
        console.log(rate);
        done();
      } else {
        done();
      }
    }
  });
});

// Submit rating

async function submitRating() {
  console.log('submitRating');
  const driverRating = parseInt(document.getElementById('driverRating').value, 10);
  const pickupRating = parseInt(document.getElementById('pickupRating').value, 10);
  const pickupNumber = '<%= pickup.pickupNumber %>';
  const isFinalStage = document.querySelector('.timeline-text.active').textContent === 'Completed';
  if (!isFinalStage) {
    Swal.fire({
      icon: 'error',
      title: 'Oops...',
      text: 'You can only rate the driver and service after the pickup is completed.',
    });
    return;
  }
  if (driverRating === 0 || pickupRating === 0) {
    Swal.fire({
      icon: 'error',
      title: 'Oops...',
      text: 'Please rate the driver and service before submitting.',
    });
    return;
  }

  try {
    const response = await fetch(`/admin/pickup-details/${pickupNumber}/rate-pickup`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        driverRating,
        pickupRating,
      }),
    });
    const data = await response.json();
    if (response.ok) {
      Swal.fire({
        icon: 'success',
        title: 'Success',
        text: data.message,
      });
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: data.error || 'Unknown error',
      });
    }
  } catch (error) {
    console.error('Error submitting rating:', error);
  }

}




async function fetchOrders(search = "") {
    try {
      const tableBody = document.getElementById("TBody");
      const NoResult = document.querySelector(".noresult");

      // Show loading spinner
      tableBody.innerHTML = `
        <tr>
          <td colspan="6" class="text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </td>
        </tr>
      `;
   
      const response = await fetch(`/admin/pickup-details/<%= pickup.pickupNumber %>/get-pickedup-orders?search=${search}`);
      const pickup = await response.json();
      if (response.ok) {
        tableBody.innerHTML = ""; // Clear existing rows
        NoResult.style.display = "none";
        if (pickup.ordersPickedUp.length === 0) {
          NoResult.style.display = "block";
          return;
        }
        populateOrdersTable(pickup.ordersPickedUp);
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: `Error fetching orders: ${pickup.error || 'Unknown error'}`,
        });
      }
    } catch (error) {
      console.error("Error fetching orders:", error);
    }
  }

function populateOrdersTable(orders) {
    const tableBody = document.getElementById("TBody");
    tableBody.innerHTML = ""; // Clear existing rows
    orders.forEach(order => {
      const row = document.createElement("tr");

      row.innerHTML = `  
        <td><a href="/business/order-details/${order.orderNumber}" class="fw-medium link-primary fs-15">${order.orderNumber}</a></td>
        <td>${order.orderShipping.orderType}</td>
        <td><span class="badge ${order.orderStatus === 'Completed' ? 'bg-success' : 'bg-warning'} fs-13">${order.orderStatus}</span></td>
        <td>${order.orderCustomer.zone}</td>
        <td>${order.orderShipping.amount || 0} EGP</td>
      `;

      tableBody.appendChild(row);
    });
}


// Fetch orders on page load
document.addEventListener("DOMContentLoaded", () => fetchOrders());



async function cancelPickup(pickupId) {
  Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, cancel it!',
  })
  .then(async (result) => {
    if (result.isConfirmed) {
      const response = await fetch(
        `/admin/cancel-pickup/${pickupId}`,
        {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );

      if (response.ok) {
        Swal.fire({
          title: 'Cancelled!',
          text: 'Your pickup has been cancelled.',
          icon: 'success',
          confirmButtonText: 'OK',
        }).then(() => {
          window.location.href = '/admin/pickups';
        });
      }
    }
  })
  .catch((error) => {
    console.error('Error:', error);
    Swal.fire({
      title: 'Error!',
      text: 'There was an error cancelling the pickup. Please try again later.',
      icon: 'error',
      confirmButtonText: 'OK',
    });
  });
}


async function deletePickup(pickupId) {
  Swal.fire({
    title: 'Are you sure you want to delete this pickup?',
    text: "This action cannot be undone!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, delete it!',
  })
  .then(async (result) => {
    if (result.isConfirmed) {
      const response = await fetch(
        `/admin/delete-pickup/${pickupId}`,
        {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );

      if (response.ok) {
        Swal.fire({
          title: 'Deleted!',
          text: 'Your pickup has been deleted.',
          icon: 'success',
          confirmButtonText: 'OK',
        }).then(() => {
          window.location.href = '/admin/pickups';
        });
      }
    }
  })
  .catch((error) => {
    console.error('Error:', error);
    Swal.fire({
      title: 'Error!',
      text: 'There was an error deleting the pickup. Please try again later.',
      icon: 'error',
      confirmButtonText: 'OK',
    });
  });
}


  function getPickupStatusDetails(status) {
    let badgeClass = '';
    let statusText = '';

    if (status === 'new') {
      badgeClass = 'bg-primary-subtle text-primary';
      statusText = 'New';
    } else if (status === 'driverAssigned') {
      badgeClass = 'bg-secondary-subtle text-secondary';
      statusText = 'Driver Assigned';
    } else if (status === 'pickedUp') {
      badgeClass = 'bg-info-subtle text-info';
      statusText = 'Picked Up';
    } else if (status === 'inStock') {
      badgeClass = 'bg-warning-subtle text-warning';
      statusText = 'In Stock';
    } else if (status === 'inProgress') {
      badgeClass = 'bg-success-subtle text-success';
      statusText = 'In Progress';
    } else if (status === 'completed') {
      badgeClass = 'bg-success-subtle text-success';
      statusText = 'Completed';
    } else if (status === 'canceled') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Canceled';
    } else if (status === 'rejected') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Rejected';
    } else if (status === 'returned') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Returned';
    } else if (status === 'terminated') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Terminated';
    } else {
      statusText = 'Unknown';
    }

    return { badgeClass, statusText };
  }

  // Update pickup status badge
  document.addEventListener('DOMContentLoaded', function() {
    const pickupStatus = '<%= pickup.picikupStatus %>';
    console.log(pickupStatus);
    const { badgeClass, statusText } = getPickupStatusDetails(pickupStatus);
    const pickupStatusElement = document.getElementById('pickupStatus').querySelector('.badge');
    pickupStatusElement.className = `badge ${badgeClass}`;
    pickupStatusElement.textContent = statusText;
  });




</script>

<!-- prismjs plugin -->
<script src="/assets/libs/prismjs/prism.js"></script>

<!-- rater-js plugin -->
<script src="/assets/libs/rater-js/index.js"></script>

<!-- App js -->