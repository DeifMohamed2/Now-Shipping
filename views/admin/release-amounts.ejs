<%- contentFor('HeaderCss') %>
<link href="/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
<link href="/assets/libs/flatpickr/flatpickr.min.css" rel="stylesheet" type="text/css" />
<link href="/assets/libs/choices.js/public/assets/styles/choices.min.css" rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="/assets/rCSS/admin.css">
<style>
  .card {
    border-radius: 30px !important;
  }

  .card-animate {
    transition: all 0.4s;
  }

  .card-animate:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }

  .stat-icon {
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 12px;
  }

  .dashboard-card {
    border-radius: 12px;
    border: none;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }

  .big-card {
    height: 100%;
  }

  .big-card .stat-icon {
    width: 80px;
    height: 80px;
  }

  .big-card .card-title {
    font-size: 1.1rem;
  }

  .big-card .counter-value {
    font-size: 2.5rem;
  }

  .big-card .release-date {
    font-size: 2rem;
    font-weight: 700;
    color: #405189;
  }

  .table-container {
    border-radius: 12px;
    overflow: hidden;
  }

  .table thead th {
    background-color: #f8f9fa;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 12px;
    letter-spacing: 0.5px;
  }

  .badge-status {
    padding: 6px 12px;
    border-radius: 50px;
    font-weight: 500;
  }

  .filter-section {
    background-color: #f8f9fa;
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 20px;
  }

  .btn-action {
    padding: 5px 12px;
    font-size: 12px;
    border-radius: 4px;
    transition: all 0.3s;
  }

  .btn-action:hover {
    transform: translateY(-2px);
  }

  .btn-action:active {
    transform: translateY(0);
  }

  .status-badge {
    display: inline-flex;
    align-items: center;
    padding: 6px 12px;
    border-radius: 50px;
    font-weight: 500;
    font-size: 12px;
  }

  .status-badge i {
    margin-right: 5px;
  }

  .status-released {
    background-color: #e6f7f5;
    color: #0ab39c;
  }

  .status-scheduled {
    background-color: #e6f3ff;
    color: #405189;
  }

  .status-pending {
    background-color: #fff8e6;
    color: #f7b84b;
  }

  .status-canceled {
    background-color: #f8ebf0;
    color: #f06548;
  }

  .status-rescheduled {
    background-color: #e6f3ff;
    color: #405189;
    border: 1px dashed #405189;
  }

  .tab-filter {
    display: flex;
    overflow-x: auto;
    padding-bottom: 10px;
    margin-bottom: 20px;
    border-bottom: 1px solid #e9ebec;
  }

  .tab-filter .nav-link {
    white-space: nowrap;
    margin-right: 15px;
    padding: 10px 15px;
    font-weight: 500;
    color: #495057;
    border-radius: 4px;
  }

  .tab-filter .nav-link.active {
    color: #405189;
    background-color: rgba(64, 81, 137, 0.1);
  }

  .tab-filter .nav-link .badge {
    margin-left: 5px;
  }

  .money-info {
    display: flex;
    align-items: center;
    font-weight: 600;
  }

  .money-info.collected {
    color: #0ab39c;
  }

  .money-info.pending {
    color: #f7b84b;
  }

  .money-info i {
    margin-right: 5px;
  }

  .business-name {
    display: flex;
    align-items: center;
  }

  .business-name img {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    margin-right: 8px;
  }

  .release-date-info {
    display: flex;
    align-items: center;
    font-size: 13px;
  }

  .release-date-info i {
    margin-right: 5px;
  }

  .release-date-info.rescheduled {
    text-decoration: line-through;
    opacity: 0.7;
    margin-bottom: 4px;
  }

  .countdown-timer {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    text-align: center;
    margin-top: 15px;
  }

  .countdown-timer .time-section {
    display: inline-flex;
    flex-direction: column;
    align-items: center;
    margin: 0 10px;
  }

  .countdown-timer .time-value {
    font-size: 1.8rem;
    font-weight: 700;
    color: #405189;
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
  }

  .countdown-timer .time-label {
    font-size: 0.8rem;
    margin-top: 5px;
    color: #6c757d;
    text-transform: uppercase;
    font-weight: 500;
  }

  /* Enhanced table styling */
  .business-details {
    min-width: 200px;
  }

  .contact-info {
    min-width: 150px;
  }

  .payment-method {
    min-width: 180px;
  }

  .payment-details {
    font-size: 0.85rem;
  }

  .amount-info {
    text-align: right;
  }

  .release-date-info {
    min-width: 120px;
  }

  .table td {
    vertical-align: top;
    padding: 12px 8px;
  }

  .table th {
    background-color: #f8f9fa;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 11px;
    letter-spacing: 0.5px;
    padding: 15px 8px;
    border-bottom: 2px solid #dee2e6;
  }

  .table tbody tr:hover {
    background-color: #f8f9fa;
  }

  .status-badge {
    display: inline-flex;
    align-items: center;
    padding: 4px 8px;
    border-radius: 12px;
    font-weight: 500;
    font-size: 11px;
    white-space: nowrap;
  }

  .status-badge i {
    margin-right: 4px;
    font-size: 12px;
  }

  .btn-action {
    padding: 4px 8px;
    font-size: 11px;
    border-radius: 4px;
    white-space: nowrap;
  }

  /* Responsive adjustments */
  @media (max-width: 1200px) {
    .table-responsive {
      font-size: 0.85rem;
    }
    
    .payment-details {
      font-size: 0.8rem;
    }
  }

  @media (max-width: 768px) {
    .table th,
    .table td {
      padding: 8px 4px;
      font-size: 0.8rem;
    }
    
    .btn-action {
      padding: 2px 6px;
      font-size: 10px;
    }
  }
</style>
<%- contentFor('body') %>
<!-- Page Title -->
<div class="row mb-4">
  <div class="col-12">
    <div class="d-flex align-items-center justify-content-between">
      <div>
        <h4 class="fw-bold mb-0">Business Payments</h4>
        <p class="text-muted mb-0">Manage and release payments to businesses</p>
      </div>
      <div class="d-flex">
        <button type="button" class="btn btn-success" onclick="exportToExcel()">
          <i class="ri-file-excel-2-line align-middle me-1"></i> Export Excel
        </button>
        <button type="button" class="btn btn-primary ms-2" onclick="exportToPDF()">
          <i class="ri-file-pdf-line align-middle me-1"></i> Export PDF
        </button>
      </div>
    </div>
  </div>
</div>

<!-- First Row: Big Cards -->
<div class="row">
  <!-- Total Available Funds -->
  <div class="col-xl-6 col-md-6">
    <div class="card card-animate dashboard-card big-card">
      <div class="card-body">
        <div class="d-flex align-items-center mb-3">
          <div class="flex-grow-1">
            <h5 class="text-uppercase fw-semibold text-muted mb-0 card-title">Total Available Funds</h5>
          </div>
            <div class="stat-icon bg-soft-success">
            <lord-icon src="https://cdn.lordicon.com/qhviklyi.json" trigger="" colors="primary:#0ab39c,secondary:#0ab39c" style="width: 40px; height: 40px;"></lord-icon>
            </div>
        </div>
        <div class="d-flex align-items-end justify-content-between">
          <div>
            <h2 class="fw-bold mb-2"><span  id="totalAvailable">287,650</span>EGP</h2>
            <div class="d-flex align-items-center">
              <span class="badge bg-soft-success text-success me-2"><i class="ri-arrow-up-line align-middle"></i> 8.4%</span>
              <span class="text-muted fs-13">from last month</span>
            </div>
            <!-- <div class="mt-4">
              <div class="d-flex align-items-center justify-content-between mb-2">
                <span class="text-muted">Ready for Release</span>
                <span class="fw-semibold">$145,320</span>
              </div>
              <div class="progress" style="height: 6px;">
                <div class="progress-bar bg-success" role="progressbar" style="width: 65%;" aria-valuenow="65" aria-valuemin="0" aria-valuemax="100"></div>
              </div>
            </div> -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Next Release Date -->
  <div class="col-xl-6 col-md-6">
    <div class="card card-animate dashboard-card big-card">
      <div class="card-body">
        <div class="d-flex align-items-center mb-3">
          <div class="flex-grow-1">
            <h5 class="text-uppercase fw-semibold text-muted mb-0 card-title">Next Release Date</h5>
          </div>
            <div class="stat-icon bg-soft-info">
            <lord-icon src="https://cdn.lordicon.com/akuwjdzh.json" trigger="" colors="primary:#405189,secondary:#405189" style="width: 40px; height: 40px;"></lord-icon>
            </div>
        </div>
        <div class="d-flex flex-column justify-content-between">
          <div>
            <p class="release-date" id="releaseDate">April 15, 2023</p>
            <!-- <p class="text-muted mb-3">Scheduled release for 28 businesses</p> -->

          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Second Row: Stats Cards -->
<div class="row mt-4">
  <div class="col-xl-3 col-md-6">
    <div class="card card-animate dashboard-card">
      <div class="card-body">
        <div class="d-flex align-items-center ">
          <div class="flex-grow-1">
            <h5 class="text-uppercase fw-semibold text-muted mb-0">Completed Releases</h5>
          </div>
          <div class="stat-icon bg-soft-success">
            <i class="ri-checkbox-circle-line text-success fs-1"></i>
          </div>
        </div>
        <div class="d-flex align-items-end justify-content-between">
          <div>
            <h2 class="fw-bold mb-2"><span id="completeCount"></span></h2>
            <h3 class="fw-bold mb-2"><span id="completeFund"></span></h3>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-xl-3 col-md-6">
    <div class="card card-animate dashboard-card">
      <div class="card-body">
        <div class="d-flex align-items-center ">
          <div class="flex-grow-1">
            <h5 class="text-uppercase fw-semibold text-muted mb-0">Pending Releases</h5>
          </div>
          <div class="stat-icon bg-soft-warning">
            <i class="ri-time-line text-warning fs-1"></i>
          </div>
        </div>
        <div class="d-flex align-items-end justify-content-between">
          <div>
            <h2 class="fw-bold mb-2"><span id="pendingCount"></span></h2>
            <h3 class="fw-bold mb-2"><span id="pendingFund"></span></h3>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-xl-3 col-md-6">
    <div class="card card-animate dashboard-card">
      <div class="card-body">
        <div class="d-flex align-items-center">
          <div class="flex-grow-1">
            <h5 class="text-uppercase fw-semibold text-muted mb-0">Scheduled Releases</h5>
          </div>
          <div class="stat-icon bg-soft-info">
            <i class="ri-calendar-line text-info fs-1"></i>
          </div>
        </div>
        <div class="d-flex align-items-end justify-content-between">
          <div>
            <h2 class="fw-bold mb-2"><span id="scheduledCount"></span></h2>
            <h3 class="fw-bold mb-2"><span id="scheduledFund"></span></h3>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- <div class="col-xl-3 col-md-6">
    <div class="card card-animate dashboard-card">
      <div class="card-body">
        <div class="d-flex align-items-center">
          <div class="flex-grow-1">
            <h5 class="text-uppercase fw-semibold text-muted mb-0">Refunds</h5>
          </div>
          <div class="stat-icon bg-soft-danger">
            <i data-feather="refresh-cw" class="text-danger"></i>
          </div>
        </div>
        <div class="d-flex align-items-end justify-content-between">
          <div>
            <h2 class="fw-bold mb-2"><span class="counter-value" data-target="18">18</span></h2>
            <h3 class="fw-bold mb-2"><span>50000EGP</span></h3>
          </div>
        </div>
      </div>
    </div>
  </div> -->
</div>

</div>

<!-- Tab Filters -->
<div class="row mt-4">
  <div class="col-12">
    <ul class="nav nav-pills tab-filter" id="pills-tab" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="pills-all-tab" data-bs-toggle="pill" data-bs-target="#pills-all" type="button" role="tab" onclick="fetchReleases('all');">
          All Releases 
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="pills-released-tab" data-bs-toggle="pill" data-bs-target="#pills-released" type="button" role="tab" onclick="fetchReleases('released');"> 
          Released 
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="pills-scheduled-tab" data-bs-toggle="pill" data-bs-target="#pills-scheduled" type="button" role="tab" onclick="fetchReleases('scheduled');">
          Scheduled
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="pills-pending-tab" data-bs-toggle="pill" data-bs-target="#pills-pending" type="button" role="tab" onclick="fetchReleases('pending');">
          Pending 
        </button>
      </li>
      <!-- <li class="nav-item" role="presentation">
        <button class="nav-link" id="pills-canceled-tab" data-bs-toggle="pill" data-bs-target="#pills-canceled" type="button" role="tab">
          Canceled
        </button>
      </li> -->
    </ul>
  </div>
</div>

<!-- Advanced Filter Section -->
<div class="row mt-4">
  <div class="col-lg-12">
    <div class="card">
      <div class="card-header bg-light">
        <div class="d-flex align-items-center justify-content-between">
          <h6 class="card-title mb-0">
            <i class="ri-filter-3-line me-2"></i>Advanced Filters
          </h6>
          <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#filterCollapse" aria-expanded="false">
            <i class="ri-settings-3-line me-1"></i> More Filters
          </button>
        </div>
      </div>
      <div class="card-body">
        <form id="filterForm">
          <!-- Basic Filters Row -->
          <div class="row g-3 align-items-end">
            <div class="col-xxl-3 col-lg-4 col-md-6">
              <label class="form-label fw-semibold">Search</label>
              <div class="search-box">
                <input type="text" class="form-control search" id="searchInput" placeholder="Business name, release ID, email...">
                <i class="ri-search-line search-icon"></i>
              </div>
            </div>

            <div class="col-xxl-2 col-lg-3 col-md-6">
              <label class="form-label fw-semibold">Status</label>
              <select class="form-select" id="statusFilter">
                <option value="all">All Status</option>
                <option value="pending">Pending</option>
                <option value="scheduled">Scheduled</option>
                <option value="released">Released</option>
                <option value="canceled">Canceled</option>
              </select>
            </div>

            <div class="col-xxl-2 col-lg-3 col-md-6">
              <label class="form-label fw-semibold">Amount Range</label>
              <select class="form-select" id="amountFilter">
                <option value="all">All Amounts</option>
                <option value="0-1000">0 - 1,000 EGP</option>
                <option value="1000-5000">1,000 - 5,000 EGP</option>
                <option value="5000-10000">5,000 - 10,000 EGP</option>
                <option value="10000+">10,000+ EGP</option>
              </select>
            </div>

            <div class="col-xxl-2 col-lg-2 col-md-6">
              <label class="form-label fw-semibold">Date Range</label>
              <input type="text" class="form-control flatpickr-input" id="datepicker-range" placeholder="Select date range">
            </div>

            <div class="col-xxl-3 col-lg-12">
              <div class="d-flex gap-2">
                <button type="button" class="btn btn-primary" onclick="applyFilters()">
                  <i class="ri-search-line me-1"></i> Apply Filters
                </button>
                <button type="button" class="btn btn-outline-secondary" onclick="clearFilters()">
                  <i class="ri-refresh-line me-1"></i> Clear
                </button>
                <button type="button" class="btn btn-outline-info" onclick="exportFilteredData()">
                  <i class="ri-download-line me-1"></i> Export Filtered
                </button>
              </div>
            </div>
          </div>

          <!-- Advanced Filters (Collapsible) -->
          <div class="collapse mt-3" id="filterCollapse">
            <hr>
            <div class="row g-3">
              <div class="col-xxl-3 col-lg-4 col-md-6">
                <label class="form-label fw-semibold">Payment Method</label>
                <select class="form-select" id="paymentMethodFilter">
                  <option value="all">All Methods</option>
                  <option value="instaPay">InstaPay</option>
                  <option value="mobileWallet">Mobile Wallet</option>
                  <option value="bankTransfer">Bank Transfer</option>
                </select>
              </div>

              <div class="col-xxl-3 col-lg-4 col-md-6">
                <label class="form-label fw-semibold">Business Type</label>
                <select class="form-select" id="businessTypeFilter">
                  <option value="all">All Types</option>
                  <option value="individual">Individual</option>
                  <option value="company">Company</option>
                  <option value="enterprise">Enterprise</option>
                </select>
              </div>

              <div class="col-xxl-3 col-lg-4 col-md-6">
                <label class="form-label fw-semibold">Industry</label>
                <select class="form-select" id="industryFilter">
                  <option value="all">All Industries</option>
                  <option value="retail">Retail</option>
                  <option value="food">Food & Beverage</option>
                  <option value="fashion">Fashion</option>
                  <option value="electronics">Electronics</option>
                  <option value="healthcare">Healthcare</option>
                  <option value="other">Other</option>
                </select>
              </div>

              <div class="col-xxl-3 col-lg-4 col-md-6">
                <label class="form-label fw-semibold">City</label>
                <select class="form-select" id="cityFilter">
                  <option value="all">All Cities</option>
                  <option value="cairo">Cairo</option>
                  <option value="alexandria">Alexandria</option>
                  <option value="giza">Giza</option>
                  <option value="shubra">Shubra</option>
                  <option value="other">Other</option>
                </select>
              </div>

              <div class="col-xxl-3 col-lg-4 col-md-6">
                <label class="form-label fw-semibold">Release Type</label>
                <select class="form-select" id="releaseTypeFilter">
                  <option value="all">All Types</option>
                  <option value="standard">Standard Release</option>
                  <option value="express">Express Release</option>
                  <option value="bulk">Bulk Release</option>
                </select>
              </div>

              <div class="col-xxl-3 col-lg-4 col-md-6">
                <label class="form-label fw-semibold">Sort By</label>
                <select class="form-select" id="sortByFilter">
                  <option value="createdAt">Created Date</option>
                  <option value="amount">Amount</option>
                  <option value="scheduledReleaseDate">Release Date</option>
                  <option value="business.name">Business Name</option>
                  <option value="releaseStatus">Status</option>
                </select>
              </div>

              <div class="col-xxl-3 col-lg-4 col-md-6">
                <label class="form-label fw-semibold">Sort Order</label>
                <select class="form-select" id="sortOrderFilter">
                  <option value="desc">Descending</option>
                  <option value="asc">Ascending</option>
                </select>
              </div>

              <div class="col-xxl-3 col-lg-4 col-md-6">
                <label class="form-label fw-semibold">Records Per Page</label>
                <select class="form-select" id="recordsPerPageFilter">
                  <option value="10">10 Records</option>
                  <option value="25" selected>25 Records</option>
                  <option value="50">50 Records</option>
                  <option value="100">100 Records</option>
                </select>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Releases Table -->
<div class="row">
  <div class="col-lg-12">
    <div class="card" id="releasesList">
      <div class="card-header border-0 bg-white">
        <div class="d-flex align-items-center justify-content-between">
          <div>
            <h5 class="card-title mb-0">
              <i class="ri-money-dollar-circle-line me-2"></i>Payment Releases
            </h5>
            <p class="text-muted mb-0 small">Manage and process business payment releases</p>
          </div>
          <div class="d-flex gap-2">
            <button type="button" class="btn btn-outline-primary btn-sm" id="bulkActionsBtn" onclick="showBulkActions()" disabled>
              <i class="ri-checkbox-multiple-line me-1"></i> Bulk Actions
            </button>
            <button type="button" class="btn btn-outline-success btn-sm" onclick="scheduleBulkRelease()">
              <i class="ri-calendar-schedule-line me-1"></i> Schedule Bulk
            </button>
            <div class="dropdown">
              <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                <i class="ri-more-2-line me-1"></i> More
              </button>
              <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#" onclick="refreshData()">
                  <i class="ri-refresh-line me-2"></i>Refresh Data
                </a></li>
                <li><a class="dropdown-item" href="#" onclick="exportToExcel()">
                  <i class="ri-file-excel-2-line me-2"></i>Export Excel
                </a></li>
                <li><a class="dropdown-item" href="#" onclick="exportToPDF()">
                  <i class="ri-file-pdf-line me-2"></i>Export PDF
                </a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#" onclick="viewAnalytics()">
                  <i class="ri-bar-chart-line me-2"></i>View Analytics
                </a></li>
              </ul>
            </div>
          </div>
        </div>
      </div>

      <div class="card-body">
        <div class="table-responsive table-container">
          <table class="table align-middle table-nowrap" id="releasesTable">
            <thead>
              <tr>
                <th scope="col" style="width: 50px;">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="checkAll" value="option">
                  </div>
                </th>
                <th class=" text-uppercase" >Release ID</th>
                <th class=" text-uppercase" >Business Details</th>
                <th class=" text-uppercase" >Contact Info</th>
                <th class=" text-uppercase" >Payment Method</th>
                <th class=" text-uppercase" >Amount (EGP)</th>
                <th class=" text-uppercase" >Release Date</th>
                <th class=" text-uppercase" >Status</th>
                <th class=" text-uppercase">Actions</th>
              </tr>
            </thead>
            <tbody class="list form-check-all" id="tBodyReleaseList">
              <!-- Row 1 -->
              <!-- <tr>
                <td>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox">
                  </div>
                </td>
                <td><a href="#" class="fw-medium link-primary">#REL-0120</a></td>
                <td>
                  <div class="business-name">
                    <img src="/assets/images/companies/img-1.png" alt="Acme Corporation">
                    <span>Acme Corporation</span>
                  </div>
                </td>
                <td>$4,250.00</td>
                <td><span class="badge bg-soft-primary text-primary">12 Orders</span></td>
                <td>
                  <div class="release-date-info">
                    <i class="ri-calendar-event-line"></i> 15 Apr, 2023
                  </div>
                </td>
                <td>
                  <span class="status-badge status-scheduled">
                    <i class="ri-calendar-check-line"></i> Scheduled
                  </span>
                </td>
                <td>
                  <div class="d-flex gap-2">
                    <button type="button" class="btn btn-primary btn-sm btn-action" data-release-id="REL-0120">
                      Release Now
                    </button>
                    <button type="button" class="btn btn-soft-secondary btn-sm btn-action" data-bs-toggle="modal" data-bs-target="#rescheduleModal" data-release-id="REL-0120">
                      Reschedule
                    </button>
                  </div>
                </td>
              </tr> -->

              <!-- Row 2
              <tr>
                <td>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox">
                  </div>
                </td>
                <td><a href="#" class="fw-medium link-primary">#REL-0119</a></td>
                <td>
                  <div class="business-name">
                    <img src="/assets/images/companies/img-2.png" alt="Global Traders">
                    <span>Global Traders</span>
                  </div>
                </td>
                <td>$3,750.00</td>
                <td><span class="badge bg-soft-primary text-primary">8 Orders</span></td>
                <td>
                  <div class="release-date-info rescheduled">
                    <i class="ri-calendar-event-line"></i> 12 Apr, 2023
                  </div>
                  <div class="release-date-info">
                    <i class="ri-calendar-event-line"></i> 18 Apr, 2023
                  </div>
                </td>
                <td>
                  <span class="status-badge status-rescheduled">
                    <i class="ri-time-line"></i> Rescheduled
                  </span>
                </td>
                <td>
                  <div class="d-flex gap-2">
                    <button type="button" class="btn btn-primary btn-sm btn-action" data-release-id="REL-0119">
                      Release Now
                    </button>
                    <button type="button" class="btn btn-soft-secondary btn-sm btn-action" data-bs-toggle="modal" data-bs-target="#rescheduleModal" data-release-id="REL-0119">
                      Reschedule
                    </button>
                  </div>
                </td>
              </tr>

            Row 3 -->
              <!-- <tr>
                <td>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox">
                  </div>
                </td>
                <td><a href="#" class="fw-medium link-primary">#REL-0118</a></td>
                <td>
                  <div class="business-name">
                    <img src="/assets/images/companies/img-3.png" alt="Tech Solutions Inc.">
                    <span>Tech Solutions Inc.</span>
                  </div>
                </td>
                <td>$6,840.00</td>
                <td><span class="badge bg-soft-primary text-primary">15 Orders</span></td>
                <td>
                  <div class="release-date-info">
                    <i class="ri-calendar-event-line"></i> 10 Apr, 2023
                  </div>
                </td>
                <td>
                  <span class="status-badge status-released">
                    <i class="ri-checkbox-circle-line"></i> Released
                  </span>
                </td>
                <td>
                  <button type="button" class="btn btn-soft-info btn-sm btn-action" data-release-id="REL-0118">
                    View Details
                  </button>
                </td>
              </tr> -->

              <!-- Row 4 -->
              <!-- <tr>
                <td>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox">
                  </div>
                </td>
                <td><a href="#" class="fw-medium link-primary">#REL-0117</a></td>
                <td>
                  <div class="business-name">
                    <img src="/assets/images/companies/img-4.png" alt="Quantum Enterprises">
                    <span>Quantum Enterprises</span>
                  </div>
                </td>
                <td>$2,150.00</td>
                <td><span class="badge bg-soft-primary text-primary">5 Orders</span></td>
                <td>
                  <div class="release-date-info">
                    <i class="ri-calendar-event-line"></i> 08 Apr, 2023
                  </div>
                </td>
                <td>
                  <span class="status-badge status-canceled">
                    <i class="ri-close-circle-line"></i> Canceled
                  </span>
                </td>
                <td>
                  <div class="d-flex gap-2">
                    <button type="button" class="btn btn-soft-info btn-sm btn-action" data-release-id="REL-0117">
                      View Details
                    </button>
                    <button type="button" class="btn btn-soft-success btn-sm btn-action" data-bs-toggle="modal" data-bs-target="#rescheduleModal" data-release-id="REL-0117">
                      Reschedule
                    </button>
                  </div>
                </td>
              </tr> -->

              <!-- Row 5 -->
              <!-- <tr>
                <td>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox">
                  </div>
                </td>
                <td><a href="#" class="fw-medium link-primary">#REL-0116</a></td>
                <td>
                  <div class="business-name">
                    <img src="/assets/images/companies/img-5.png" alt="Stellar Innovations">
                    <span>Stellar Innovations</span>
                  </div>
                </td>
                <td>$5,320.00</td>
                <td><span class="badge bg-soft-primary text-primary">11 Orders</span></td>
                <td>
                  <div class="release-date-info">
                    <i class="ri-calendar-event-line"></i> Pending
                  </div>
                </td>
                <td>
                  <span class="status-badge status-pending">
                    <i class="ri-time-line"></i> Pending
                  </span>
                </td>
                <td>
                  <div class="d-flex gap-2">
                    <button type="button" class="btn btn-primary btn-sm btn-action" data-release-id="REL-0116">
                      Schedule Release
                    </button>
                    <button type="button" class="btn btn-soft-danger btn-sm btn-action" data-release-id="REL-0116">
                      Cancel
                    </button>
                  </div>
                </td>
              </tr>  -->

            </tbody>
          </table>
        </div>

        <div class="noresult" style="display: none">
          <div class="text-center py-4">
            <lord-icon src="https://cdn.lordicon.com/msoeawqm.json" trigger="loop" colors="primary:#405189,secondary:#08a88a" style="width:75px;height:75px"></lord-icon>
            <h5 class="mt-2">No Results Found</h5>
            <p class="text-muted mb-0">We couldn't find any releases matching your search criteria.</p>
          </div>
        </div>

        <div class="d-flex justify-content-end mt-3">
          <div class="pagination-wrap hstack gap-2">
            <a class="page-item pagination-prev disabled" href="#">
              <i class="ri-arrow-left-s-line"></i> Previous
            </a>
            <ul class="pagination listjs-pagination mb-0"></ul>
            <a class="page-item pagination-next" href="#">
              Next <i class="ri-arrow-right-s-line"></i>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Reschedule Modal -->
<div class="modal fade" id="rescheduleModal" tabindex="-1" aria-labelledby="rescheduleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <form id="rescheduleForm">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="rescheduleModalLabel">Reschedule Release</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" id="rescheduleReleaseId" value="" name="rescheduleReleaseId">
        <div class="text-center mb-4">
          <lord-icon src="https://cdn.lordicon.com/kbtmbyzy.json" trigger="loop" colors="primary:#405189,secondary:#0ab39c" style="width:100px;height:100px">
          </lord-icon>
          <h4 class="mb-3 mt-4">Reschedule Release</h4>
          <p class="text-muted mb-4">You are about to reschedule release <span id="rescheduleReleaseIdShown" class="fw-semibold"></span> for <span id="rescheduleBusinessShown" class="fw-semibold"></span>.</p>
        </div>
     
        <div class="mb-3">
          <label for="newReleaseDate" class="form-label">New Release Date</label>
          <input type="text" class="form-control flatpickr-input" id="newReleaseDate" name="newReleaseDate" placeholder="Select new date">
        </div>
        <div class="mb-3">
          <label for="rescheduleReason" class="form-label">Reason for Rescheduling</label>
          <select class="form-control" name="rescheduleReason">
            <option value="">Select reason</option>
            <option value="business_request">Business Request</option>
            <option value="payment_issue">Payment Processing Issue</option>
            <option value="verification">Additional Verification Needed</option>
            <option value="system_delay">System Processing Delay</option>
            <option value="other">Other</option>
          </select>
        </div>
        <div class="mb-3">
          <label for="rescheduleNotes" class="form-label">Notes (Optional)</label>
          <textarea class="form-control" id="rescheduleNotes" rows="3" placeholder="Add any notes about this rescheduling"></textarea>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-light" id="closeRescheduleModal" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary" id="confirmRescheduleBtn">Confirm Reschedule</button>
      </div>
    </div>
    </form>
  </div>
</div>

<!-- Release Money Modal -->
<div class="modal fade" id="releaseMoneyModal" tabindex="-1" aria-labelledby="releaseMoneyModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <form id="releaseMoneyForm">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="releaseMoneyModalLabel">Confirm Fund Release</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="releaseId" value="" name="releaseId">
          <div class="text-center mb-4">
            <lord-icon src="https://cdn.lordicon.com/qhviklyi.json" trigger="loop" colors="primary:#405189,secondary:#0ab39c" style="width:100px;height:100px">
            </lord-icon>
            <h4 class="mb-3 mt-4">Confirm Fund Release</h4>
            <p class="text-muted mb-4">Are you confirming the release of funds to <span id="releaseBusiness" class="fw-semibold"></span>?</p>
          </div>
          <div class="mb-3">
            <label for="releaseAmount" class="form-label">Total Amount to Release</label>
            <div class="input-group">
              <span class="input-group-text">EGP</span>
              <input type="text" class="form-control" id="releaseAmount" name="releaseAmount" placeholder="Enter amount" readonly>
            </div>
          </div>
          <div class="mb-3">
            <label for="releaseNotes" class="form-label">Notes (Optional)</label>
            <textarea class="form-control" id="releaseNotes" name="releaseNotes" rows="3" placeholder="Add any notes about this release"></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-light" id="closeReleaseModal" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary" id="confirmReleaseBtn">Confirm Release</button>
        </div>
      </div>
    </form>
  </div>
</div>

<!-- View Release Details Modal -->
<div class="modal fade" id="viewDetailsModal" tabindex="-1" aria-labelledby="viewDetailsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title" id="viewDetailsModalLabel">
          <i class="ri-file-list-3-line me-2"></i>Release Details
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="releaseDetailsContent">
        <!-- Content will be populated dynamically -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="printDetailsBtn">
          <i class="ri-printer-line me-1"></i> Print Details
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Bulk Actions Modal -->
<div class="modal fade" id="bulkActionsModal" tabindex="-1" aria-labelledby="bulkActionsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="bulkActionsModalLabel">Bulk Actions</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="text-center mb-4">
          <lord-icon src="https://cdn.lordicon.com/akuwjdzh.json" trigger="loop" colors="primary:#405189,secondary:#0ab39c" style="width:100px;height:100px">
          </lord-icon>
          <h4 class="mb-3 mt-4">Bulk Operations</h4>
          <p class="text-muted mb-4">You have selected <span id="selectedCount" class="fw-semibold text-primary">0</span> releases for bulk operations.</p>
        </div>
        <div class="d-grid gap-2">
          <button type="button" class="btn btn-success" onclick="bulkRelease()">
            <i class="ri-money-dollar-circle-line me-1"></i> Release Selected
          </button>
          <button type="button" class="btn btn-info" onclick="bulkSchedule()">
            <i class="ri-calendar-line me-1"></i> Schedule Selected
          </button>
          <button type="button" class="btn btn-warning" onclick="bulkReschedule()">
            <i class="ri-time-line me-1"></i> Reschedule Selected
          </button>
          <button type="button" class="btn btn-danger" onclick="bulkCancel()">
            <i class="ri-close-circle-line me-1"></i> Cancel Selected
          </button>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
      </div>
    </div>
  </div>
</div>

<%- contentFor('FooterJs') %>
<!-- Required libs -->
<script src="/assets/libs/flatpickr/flatpickr.min.js"></script>
<script src="/assets/libs/sweetalert2/sweetalert2.min.js"></script>

<!-- Custom scripts -->
<script>
  // Initialize flatpickr for date inputs
  flatpickr("#datepicker-range", {
    mode: "range",
    dateFormat: "Y-m-d",
    allowInput: true,
    onReady: function(selectedDates, dateStr, instance) {
      instance.input.setAttribute("placeholder", "Select release date range");
    }
  });
  flatpickr("#newReleaseDate", {
    dateFormat: "Y-m-d",
    allowInput: true,
    onReady: function(selectedDates, dateStr, instance) {
      instance.input.setAttribute("placeholder", "Select new date");
    }
  });


    const releaseDate = document.getElementById('releaseDate');
    const totalAvailable = document.getElementById('totalAvailable');
    const completeCount = document.getElementById('completeCount'); 
    const completeFund = document.getElementById('completeFund');
    const pendingCount = document.getElementById('pendingCount');
    const pendingFund = document.getElementById('pendingFund');
    const scheduledCount = document.getElementById('scheduledCount');
    const scheduledFund = document.getElementById('scheduledFund');
     const tableBody = document.getElementById('tBodyReleaseList');





    // Fetch data from API and populate the table
    async function fetchReleases(filter) {
      try {

        // Show loading spinner
        document.querySelector('.noresult').style.display = 'none';
        tableBody.innerHTML = '<tr><td colspan="7" class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></td></tr>';
        const response = await fetch('/admin/get-release-all-data?filter=' + filter, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        const data = await response.json();
        console.log(data); // Log the data for debugging
        if (data['releases'].length > 0) {
          // Populate the total available funds and next release date
            totalAvailable.textContent = parseFloat(data['totalFundsAvailable']).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            releaseDate.textContent = new Date(data['nextReleaseDate']).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
            completeCount.textContent = data['totalPaymentsReleasedCount'];
            completeFund.textContent = parseFloat(data['totalPaymentsReleased']).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })+ ' EGP';
            pendingCount.textContent = data['paymentsPendingCount'];
            pendingFund.textContent = parseFloat(data['paymentsPending']).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })+ ' EGP';
            scheduledCount.textContent = data['scheduledReleasesCount'];
            scheduledFund.textContent = parseFloat(data['scheduledReleases']).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })+ ' EGP';
          populateReleases(data['releases']);
      
        } else {
          tableBody.innerHTML = '';
          document.querySelector('.noresult').style.display = 'block';
        }
      } catch (error) {
        console.error('Error fetching releases:', error);
        Swal.fire({
          title: 'Error',
          text: 'Failed to fetch release data. Please try again later.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    }



    // Helper function to get status icon
    function getStatusIcon(status) {
      switch (status.toLowerCase()) {
        case 'released':
          return 'checkbox-circle-line';
        case 'scheduled':
          return 'calendar-check-line';
        case 'pending':
          return 'time-line';
        case 'canceled':
          return 'close-circle-line';
        default:
          return 'question-line';
      }
    }

    // Helper function to get action buttons
    function getActionButtons(release) {
      const showDetailsBtn = `<button type="button" class="btn btn-outline-info btn-sm btn-action" data-release-id="${release._id}" onclick="viewReleaseDetails('${release._id}')">
        <i class="ri-eye-line me-1"></i> Show Details
      </button>`;

      if (release.releaseStatus === 'pending') {
        return `
          ${showDetailsBtn}
          <button type="button" class="btn btn-primary btn-sm btn-action" data-release-id="${release._id}" onclick="releaseNow('${release._id}', '${release.business.brandInfo.brandName}', '${release.amount}')">
            <i class="ri-money-dollar-circle-line me-1"></i> Release Now
          </button>
          <button type="button" class="btn btn-success btn-sm btn-action" data-release-id="${release._id}" onclick="showRescheduleModal('${release._id}', '${release.business.brandInfo.brandName}', '${release.releaseId}')">
            <i class="ri-calendar-line me-1"></i> Schedule
          </button>
        `;
      } else if (release.releaseStatus === 'scheduled') {
        return `
          ${showDetailsBtn}
          <button type="button" class="btn btn-primary btn-sm btn-action" data-release-id="${release._id}" onclick="releaseNow('${release._id}', '${release.business.brandInfo.brandName}', '${release.amount}')">
            <i class="ri-money-dollar-circle-line me-1"></i> Release Now
          </button>
          <button type="button" class="btn btn-warning btn-sm btn-action" data-release-id="${release._id}" onclick="showRescheduleModal('${release._id}', '${release.business.brandInfo.brandName}', '${release.releaseId}')">
            <i class="ri-calendar-schedule-line me-1"></i> Reschedule
          </button>
        `;
      } else if (release.releaseStatus === 'released') {
        return `
          ${showDetailsBtn}
        `;
      } else {
        return `
          ${showDetailsBtn}
          <button type="button" class="btn btn-soft-success btn-sm btn-action" data-bs-toggle="modal" data-bs-target="#rescheduleModal" data-release-id="${release._id}">
            Reschedule
          </button>
        `;
      }
    }


  // Handle reschedule form submission
  const rescheduleForm = document.getElementById('rescheduleForm')
  rescheduleForm.addEventListener('submit', async function (event) {
    event.preventDefault();

    const releaseId = document.getElementById('rescheduleReleaseId').value;
    const newDate = document.querySelector('input[name="newReleaseDate"]').value;
    const reason = document.querySelector('select[name="rescheduleReason"]').value;
    const notes = document.getElementById('rescheduleNotes').value;

    if (!newDate) {
      Swal.fire({
        title: 'Error',
        text: 'Please select a new release date.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
      return;
    }

    if (!reason) {
      Swal.fire({
        title: 'Error',
        text: 'Please select a reason for rescheduling.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
      return;
    }

    try {
      Swal.fire({
        title: 'Processing',
        text: 'Rescheduling release...',
        icon: 'info',
        showConfirmButton: false,
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      const response = await fetch('/admin/reschedule-release', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          releaseId,
          newDate,
          reason,
          notes
        })
      });

      const result = await response.json();

      if (response.ok) {
        Swal.fire({
          title: 'Success!',
          text: `Release ${releaseId} has been rescheduled to ${newDate}.`,
          icon: 'success',
          confirmButtonText: 'OK'
        });

        // Update the UI or refresh the data
        fetchReleases();
        rescheduleForm.reset(); // Reset the form fields
        document.getElementById('closeRescheduleModal').click(); // Close the modal
      } else {
        throw new Error(result.message || 'Failed to reschedule release.');
      }
    } catch (error) {
      Swal.fire({
        title: 'Error',
        text: error.message || 'An error occurred while rescheduling the release.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  });

  // Handle release money form submission

  const releaseMoneyForm = document.getElementById('releaseMoneyForm')

  releaseMoneyForm.addEventListener('submit', async function (event) {
    event.preventDefault();

    const releaseId = document.getElementById('releaseId').value;
    const releaseNotes = document.getElementById('releaseNotes').value;
    try {
      Swal.fire({
        title: 'Processing',
        text: 'Releasing funds...',
        icon: 'info',
        showConfirmButton: false,
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      const response = await fetch('/admin/release-funds', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          releaseId, 
          notes : releaseNotes
        })
      });

      const result = await response.json();

      if (response.ok) {
        Swal.fire({
          title: 'Success!',
          text: `Funds have been released to ${document.getElementById('releaseBusiness').textContent}.`,
          icon: 'success',
          confirmButtonText: 'OK'
        });

        // Update the UI or refresh the data
        fetchReleases();
        releaseMoneyForm.reset(); // Reset the form fields
        document.getElementById('closeReleaseModal').click(); // Close the modal
      } else {
        throw new Error(result.error || 'Failed to release funds.');
      }
    } catch (error) {
      Swal.fire({
        title: 'Error',
        text: error.message || 'An error occurred while releasing funds.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  });


    
    function populateReleases(data) {
      console.log(data)
      tableBody.innerHTML = ''; // Clear existing rows

      data.forEach(release => {
        console.log(release)
        const row = document.createElement('tr');
        console.log(release.business)
        
        // Format payment method details
        const paymentMethod = formatPaymentMethod(release.business.paymentMethod);
        const contactInfo = formatContactInfo(release.business);
        const businessDetails = formatBusinessDetails(release.business);
        
        row.innerHTML = `
              <td>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" data-release-id="${release._id}">
                  </div>
                </td>
                <td>
                  <div class="fw-medium link-primary">#${release.releaseId}</div>
                  <small class="text-muted">${release.releaseType || 'Standard Release'}</small>
                </td>
                <td>
                  <div class="business-details">
                    <div class="fw-semibold">${release.business.brandInfo?.brandName || release.business.name || 'N/A'}</div>
                    <div class="text-muted small">${businessDetails}</div>
                  </div>
                </td>
                <td>
                  <div class="contact-info">
                    <div class="small"><i class="ri-mail-line me-1"></i>${release.business.email || 'N/A'}</div>
                    <div class="small"><i class="ri-phone-line me-1"></i>${release.business.phoneNumber || 'N/A'}</div>
                  </div>
                </td>
                <td>
                  <div class="payment-method">
                    ${paymentMethod}
                  </div>
                </td>
                <td>
                  <div class="amount-info">
                    <div class="fw-bold text-success">${release.amount.toFixed(2)} EGP</div>
                    <small class="text-muted">${release.transactionReferences?.length || 0} transactions</small>
                  </div>
                </td>
                <td>
                  <div class="release-date-info">
                    <i class="ri-calendar-event-line"></i> 
                    <div>${release.scheduledReleaseDate ? new Date(release.scheduledReleaseDate).toLocaleDateString() : (release.releaseStatus === 'released' ? new Date(release.updatedAt).toLocaleDateString() : (release.releaseStatus === 'scheduled' ? 'Scheduled' : 'Pending'))}</div>
                  </div>
                </td>
                <td>
                  <span class="status-badge status-${release.releaseStatus.toLowerCase()}">
                    <i class="ri-${getStatusIcon(release.releaseStatus)}"></i> ${release.releaseStatus}
                  </span>
                </td>
                <td>
                  <div class="d-flex gap-1 flex-wrap">
                    ${getActionButtons(release)}
                  </div>
                </td>
              `;
        tableBody.appendChild(row);
      });
    }

    function formatPaymentMethod(paymentMethod) {
      if (!paymentMethod || !paymentMethod.paymentChoice) {
        return '<span class="text-muted">Not Set</span>';
      }

      const choice = paymentMethod.paymentChoice;
      const details = paymentMethod.details;

      switch (choice) {
        case 'instaPay':
          return `
            <div class="payment-details">
              <div class="fw-semibold text-primary">InstaPay</div>
              <div class="small text-muted">${details?.IPAorPhoneNumber || 'N/A'}</div>
            </div>
          `;
        case 'mobileWallet':
          return `
            <div class="payment-details">
              <div class="fw-semibold text-info">Mobile Wallet</div>
              <div class="small text-muted">${details?.mobileWalletNumber || 'N/A'}</div>
            </div>
          `;
        case 'bankTransfer':
          return `
            <div class="payment-details">
              <div class="fw-semibold text-success">Bank Transfer</div>
              <div class="small text-muted">${details?.bankName || 'N/A'}</div>
              <div class="small text-muted">IBAN: ${details?.IBAN || 'N/A'}</div>
              <div class="small text-muted">Account: ${details?.accountName || 'N/A'}</div>
            </div>
          `;
        default:
          return '<span class="text-muted">Unknown</span>';
      }
    }

    function formatContactInfo(business) {
      return `
        <div class="contact-details">
          <div><strong>Email:</strong> ${business.email || 'N/A'}</div>
          <div><strong>Phone:</strong> ${business.phoneNumber || 'N/A'}</div>
        </div>
      `;
    }

    function formatBusinessDetails(business) {
      const details = [];
      
      if (business.brandInfo?.industry) {
        details.push(`Industry: ${business.brandInfo.industry}`);
      }
      
      if (business.brandType?.brandChoice) {
        details.push(`Type: ${business.brandType.brandChoice}`);
      }
      
      if (business.pickUpAdress?.city) {
        details.push(`City: ${business.pickUpAdress.city}`);
      }
      
      return details.join(' • ') || 'No additional details';
    }


  document.addEventListener("DOMContentLoaded", function() {

    // Initialize the page
    fetchReleases('all'); // Fetch all releases on page load






  });


        // show modal reschedule
  function showRescheduleModal(releaseId, businessName,shownReleaseId) {
      const modal = new bootstrap.Modal(document.getElementById('rescheduleModal'));
      document.getElementById('rescheduleReleaseId').value = releaseId;
      document.getElementById('rescheduleReleaseIdShown').textContent = shownReleaseId;
      document.getElementById('rescheduleBusinessShown').textContent = businessName;
      modal.show();
  }


  // release now function
  function releaseNow(releaseId, businessName,releaseAmount) {
    const modal = new bootstrap.Modal(document.getElementById('releaseMoneyModal'));
    document.getElementById('releaseId').value = releaseId;
    document.getElementById('releaseBusiness').textContent = businessName;
    document.getElementById('releaseAmount').value = releaseAmount;
    modal.show();
  }

  // Excel Export Function
  async function exportToExcel() {
    try {
      Swal.fire({
        title: 'Preparing Excel Export',
        text: 'Please wait while we prepare your data...',
        icon: 'info',
        showConfirmButton: false,
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      const response = await fetch('/admin/export-releases-excel', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = `Business_Payments_Export_${new Date().toISOString().split('T')[0]}.xlsx`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);

        Swal.fire({
          title: 'Export Successful!',
          text: 'Excel file has been downloaded successfully.',
          icon: 'success',
          confirmButtonText: 'OK'
        });
      } else {
        throw new Error('Failed to export data');
      }
    } catch (error) {
      console.error('Export error:', error);
      Swal.fire({
        title: 'Export Failed',
        text: 'Failed to export data. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  }

  // PDF Export Function
  async function exportToPDF() {
    try {
      Swal.fire({
        title: 'Preparing PDF Export',
        text: 'Please wait while we prepare your data...',
        icon: 'info',
        showConfirmButton: false,
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      const response = await fetch('/admin/export-releases-pdf', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = `Business_Payments_Report_${new Date().toISOString().split('T')[0]}.pdf`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);

        Swal.fire({
          title: 'Export Successful!',
          text: 'PDF report has been downloaded successfully.',
          icon: 'success',
          confirmButtonText: 'OK'
        });
      } else {
        throw new Error('Failed to export data');
      }
    } catch (error) {
      console.error('Export error:', error);
      Swal.fire({
        title: 'Export Failed',
        text: 'Failed to export data. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  }

  // View Release Details Function
  async function viewReleaseDetails(releaseId) {
    try {
      Swal.fire({
        title: 'Loading Details',
        text: 'Please wait while we fetch the release details...',
        icon: 'info',
        showConfirmButton: false,
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      const response = await fetch(`/admin/get-release-details/${releaseId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (response.ok) {
        const result = await response.json();
        console.log('Release details response:', result);
        if (result.success && result.data) {
          console.log('Release data:', result.data);
          console.log('Business data:', result.data.business);
          try {
            populateReleaseDetailsModal(result.data);
            const modal = new bootstrap.Modal(document.getElementById('viewDetailsModal'));
            modal.show();
            Swal.close();
          } catch (modalError) {
            console.error('Error populating modal:', modalError);
            Swal.fire({
              title: 'Error',
              text: 'Failed to display release details. Please try again.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        } else {
          throw new Error(result.error || 'Invalid response format');
        }
      } else {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || 'Failed to fetch release details');
      }
    } catch (error) {
      console.error('Error fetching release details:', error);
      Swal.fire({
        title: 'Error',
        text: 'Failed to fetch release details. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  }

  // Populate Release Details Modal
  function populateReleaseDetailsModal(release) {
    if (!release) {
      console.error('Release data is null or undefined');
      return;
    }
    
    console.log('Populating modal with release:', release);
    console.log('Business object:', release.business);
    
    const content = document.getElementById('releaseDetailsContent');
    const business = release.business || {};
    const paymentMethod = business.paymentMethod || null;
    
    console.log('Business after fallback:', business);
    console.log('Payment method:', paymentMethod);

    let paymentDetails = 'Not Set';
    if (paymentMethod && paymentMethod.paymentChoice) {
      switch (paymentMethod.paymentChoice) {
        case 'instaPay':
          paymentDetails = `InstaPay - ${paymentMethod.details?.IPAorPhoneNumber || 'N/A'}`;
          break;
        case 'mobileWallet':
          paymentDetails = `Mobile Wallet - ${paymentMethod.details?.mobileWalletNumber || 'N/A'}`;
          break;
        case 'bankTransfer':
          paymentDetails = `Bank Transfer - ${paymentMethod.details?.bankName || 'N/A'}, IBAN: ${paymentMethod.details?.IBAN || 'N/A'}`;
          break;
      }
    }

    // Calculate transaction summary
    let totalCashCycle = 0;
    let totalFees = 0;
    let totalPickupFees = 0;
    let totalReturnFees = 0;
    let totalCancellationFees = 0;
    let totalRefunds = 0;
    
    if (release.transactionReferences && release.transactionReferences.length > 0) {
      release.transactionReferences.forEach(transaction => {
        if (transaction) {
          switch (transaction.transactionType) {
            case 'cashCycle':
              totalCashCycle += transaction.transactionAmount;
              break;
            case 'fees':
              totalFees += Math.abs(transaction.transactionAmount);
              break;
            case 'pickupFees':
              totalPickupFees += Math.abs(transaction.transactionAmount);
              break;
            case 'returnFees':
            case 'returnCompletedFees':
              totalReturnFees += Math.abs(transaction.transactionAmount);
              break;
            case 'cancellationFees':
              totalCancellationFees += Math.abs(transaction.transactionAmount);
              break;
            case 'refund':
              totalRefunds += transaction.transactionAmount;
              break;
          }
        }
      });
    }

    content.innerHTML = `
      <div class="row">
        <div class="col-md-6">
          <div class="card border-0 bg-light">
            <div class="card-body">
              <h6 class="card-title text-primary">
                <i class="ri-file-list-3-line me-2"></i>Release Information
              </h6>
              <div class="mb-2">
                <strong>Release ID:</strong> ${release.releaseId}
              </div>
              <div class="mb-2">
                <strong>Status:</strong> 
                <span class="badge bg-${getStatusColor(release.releaseStatus)}">${release.releaseStatus}</span>
              </div>
              <div class="mb-2">
                <strong>Total Amount:</strong> <span class="text-success fw-bold">${release.amount.toFixed(2)} EGP</span>
              </div>
              <div class="mb-2">
                <strong>Transactions Count:</strong> ${release.transactionReferences?.length || 0}
              </div>
              <div class="mb-2">
                <strong>Created Date:</strong> ${new Date(release.createdAt).toLocaleDateString()}
              </div>
              <div class="mb-2">
                <strong>Scheduled Date:</strong> ${release.scheduledReleaseDate ? new Date(release.scheduledReleaseDate).toLocaleDateString() : 'Not Scheduled'}
              </div>
              ${release.releaseStatus === 'released' ? `<div class="mb-2"><strong>Released Date:</strong> ${new Date(release.updatedAt).toLocaleDateString()}</div>` : ''}
              ${release.releaseNotes ? `<div class="mb-2"><strong>Notes:</strong> ${release.releaseNotes}</div>` : ''}
              ${release.reason ? `<div class="mb-2"><strong>Reason:</strong> ${release.reason}</div>` : ''}
            </div>
          </div>
        </div>
        <div class="col-md-6">
          <div class="card border-0 bg-light">
            <div class="card-body">
              <h6 class="card-title text-primary">
                <i class="ri-building-line me-2"></i>Business Information
              </h6>
              <div class="mb-2">
                <strong>Business Name:</strong> ${business?.brandInfo?.brandName || business?.name || 'N/A'}
              </div>
              <div class="mb-2">
                <strong>Owner Name:</strong> ${business?.name || 'N/A'}
              </div>
              <div class="mb-2">
                <strong>Email:</strong> ${business?.email || 'N/A'}
              </div>
              <div class="mb-2">
                <strong>Phone:</strong> ${business?.phoneNumber || 'N/A'}
              </div>
              <div class="mb-2">
                <strong>Industry:</strong> ${business?.brandInfo?.industry || 'N/A'}
              </div>
              <div class="mb-2">
                <strong>Business Type:</strong> ${business?.brandType?.brandChoice || 'N/A'}
              </div>
              <div class="mb-2">
                <strong>City:</strong> ${business?.pickUpAdress?.city || 'N/A'}
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="row mt-3">
        <div class="col-md-6">
          <div class="card border-0 bg-light">
            <div class="card-body">
              <h6 class="card-title text-primary">
                <i class="ri-bank-card-line me-2"></i>Payment Information
              </h6>
              <div class="mb-2">
                <strong>Payment Method:</strong> ${paymentDetails}
              </div>
              ${paymentMethod && paymentMethod.details ? `
                <div class="mt-3">
                  <h6 class="text-muted">Payment Details:</h6>
                  ${Object.entries(paymentMethod.details).map(([key, value]) => 
                    `<div class="mb-1"><strong>${key}:</strong> ${value || 'N/A'}</div>`
                  ).join('')}
                </div>
              ` : ''}
            </div>
          </div>
        </div>
        <div class="col-md-6">
          <div class="card border-0 bg-light">
            <div class="card-body">
              <h6 class="card-title text-primary">
                <i class="ri-calculator-line me-2"></i>Financial Summary
              </h6>
              <div class="mb-2">
                <strong>Cash Cycle Earnings:</strong> <span class="text-success fw-bold">+${totalCashCycle.toFixed(2)} EGP</span>
              </div>
              <div class="mb-2">
                <strong>Service Fees:</strong> <span class="text-danger fw-bold">-${totalFees.toFixed(2)} EGP</span>
              </div>
              <div class="mb-2">
                <strong>Pickup Fees:</strong> <span class="text-danger fw-bold">-${totalPickupFees.toFixed(2)} EGP</span>
              </div>
              <div class="mb-2">
                <strong>Return Fees:</strong> <span class="text-danger fw-bold">-${totalReturnFees.toFixed(2)} EGP</span>
              </div>
              <div class="mb-2">
                <strong>Cancellation Fees:</strong> <span class="text-danger fw-bold">-${totalCancellationFees.toFixed(2)} EGP</span>
              </div>
              ${totalRefunds > 0 ? `<div class="mb-2"><strong>Refunds:</strong> <span class="text-success fw-bold">+${totalRefunds.toFixed(2)} EGP</span></div>` : ''}
              <hr>
              <div class="mb-2">
                <strong>Net Release Amount:</strong> <span class="text-primary fw-bold fs-5">${release.amount.toFixed(2)} EGP</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      ${release.transactionReferences && release.transactionReferences.length > 0 ? `
        <div class="row mt-4">
          <div class="col-12">
            <div class="card border-0 bg-light">
              <div class="card-body">
                <h6 class="card-title text-primary mb-3">
                  <i class="ri-exchange-line me-2"></i>Detailed Transaction Breakdown (${release.transactionReferences.length} transactions)
                </h6>
                <div class="table-responsive">
                  <table class="table table-sm table-hover">
                    <thead class="table-light">
                      <tr>
                        <th>Transaction ID</th>
                        <th>Type</th>
                        <th>Amount</th>
                        <th>Orders</th>
                        <th>Date</th>
                        <th>Status</th>
                        <th>Actions</th>
                      </tr>
                    </thead>
                    <tbody>
      ${release.transactionReferences.map(transaction => {
        if (!transaction) return '';
        const isPositive = ['cashCycle', 'refund', 'deposit', 'shopOrderDelivery'].includes(transaction.transactionType);
        const orderCount = transaction.orderReferences ? transaction.orderReferences.length : 0;
        const pickupCount = transaction.pickupReferences ? transaction.pickupReferences.length : 0;
        const shopOrderCount = transaction.shopOrderReferences ? transaction.shopOrderReferences.length : 0;
                        
                        return `
                          <tr>
                            <td>
                              <div class="fw-medium text-primary">${transaction.transactionId}</div>
                              <small class="text-muted">${transaction.processingBatchId ? `Batch: ${transaction.processingBatchId}` : ''}</small>
                            </td>
                            <td>
                              <span class="badge bg-${isPositive ? 'success' : 'danger'}">
                                ${getTransactionTypeLabel(transaction.transactionType)}
                              </span>
                              ${transaction.transactionNotes ? `<br><small class="text-muted mt-1 d-block">${transaction.transactionNotes.substring(0, 50)}${transaction.transactionNotes.length > 50 ? '...' : ''}</small>` : ''}
                            </td>
                            <td>
                              <span class="fw-bold ${isPositive ? 'text-success' : 'text-danger'}">
                                ${transaction.transactionAmount > 0 ? '+' : ''}${transaction.transactionAmount} EGP
                              </span>
                            </td>
                            <td>
                              <div class="small">
                                ${orderCount > 0 ? `<div><i class="ri-package-line me-1"></i>${orderCount} Orders</div>` : ''}
                                ${pickupCount > 0 ? `<div><i class="ri-truck-line me-1"></i>${pickupCount} Pickups</div>` : ''}
                                ${shopOrderCount > 0 ? `<div><i class="ri-shopping-bag-line me-1"></i>${shopOrderCount} Shop Orders</div>` : ''}
                                ${orderCount === 0 && pickupCount === 0 && shopOrderCount === 0 ? '<span class="text-muted">No items</span>' : ''}
                              </div>
                            </td>
                            <td>
                              <small class="text-muted">${new Date(transaction.createdAt).toLocaleDateString()}</small>
                              <br><small class="text-muted">${new Date(transaction.createdAt).toLocaleTimeString()}</small>
                            </td>
                            <td>
                              <span class="badge bg-${transaction.settled ? 'success' : 'warning'}">
                                ${transaction.settled ? 'Settled' : 'Pending'}
                              </span>
                            </td>
                            <td>
                              <button class="btn btn-sm btn-outline-primary" onclick="viewDetailedTransactionInfo('${transaction._id}')">
                                <i class="ri-eye-line"></i> Details
                              </button>
                            </td>
                          </tr>
                        `;
                      }).join('')}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      ` : ''}
    `;
  }

  // Get Status Color
  function getStatusColor(status) {
    switch (status.toLowerCase()) {
      case 'released': return 'success';
      case 'scheduled': return 'info';
      case 'pending': return 'warning';
      case 'canceled': return 'danger';
      default: return 'secondary';
    }
  }

  // Get Transaction Type Label
  function getTransactionTypeLabel(type) {
    const labels = {
      'cashCycle': 'Cash Cycle',
      'fees': 'Service Fees',
      'pickupFees': 'Pickup Fees',
      'flyersFees': 'Flyers Fees',
      'refund': 'Refund',
      'deposit': 'Deposit',
      'withdrawal': 'Withdrawal',
      'shopOrderDelivery': 'Shop Order Delivery'
    };
    return labels[type] || type;
  }

  // View Transaction Details (Updated)
  async function viewTransactionDetails(transactionId) {
    try {
      Swal.fire({
        title: 'Loading Transaction Details',
        text: 'Please wait while we fetch the transaction details...',
        icon: 'info',
        showConfirmButton: false,
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      const response = await fetch(`/admin/get-transaction-details/${transactionId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success && result.transaction) {
          showDetailedTransactionModal(result.transaction);
          Swal.close();
        } else {
          throw new Error(result.error || 'Invalid response format');
        }
      } else {
        throw new Error('Failed to fetch transaction details');
      }
    } catch (error) {
      console.error('Error fetching transaction details:', error);
      Swal.fire({
        title: 'Error',
        text: 'Failed to fetch transaction details. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  }

  // View Detailed Transaction Info (New function)
  async function viewDetailedTransactionInfo(transactionId) {
    try {
      Swal.fire({
        title: 'Loading Detailed Transaction Information',
        text: 'Please wait while we fetch comprehensive transaction details...',
        icon: 'info',
        showConfirmButton: false,
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      const response = await fetch(`/admin/get-detailed-transaction-info/${transactionId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success && result.data) {
          showComprehensiveTransactionModal(result.data);
          Swal.close();
        } else {
          throw new Error(result.error || 'Invalid response format');
        }
      } else {
        throw new Error('Failed to fetch detailed transaction information');
      }
    } catch (error) {
      console.error('Error fetching detailed transaction info:', error);
      Swal.fire({
        title: 'Error',
        text: 'Failed to fetch detailed transaction information. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  }

  // Show Transaction Details Modal (Updated for Admin)
  function showDetailedTransactionModal(transaction) {
    const isPositive = ['cashCycle', 'refund', 'deposit'].includes(transaction.transactionType);
    const amountClass = isPositive ? 'text-success' : 'text-danger';
    const amountSign = transaction.transactionAmount > 0 ? '+' : '';
    
    let ordersHtml = '';
    if (transaction.orderReferences && transaction.orderReferences.length > 0) {
      ordersHtml = `
        <div class="mt-3">
          <h6 class="fw-bold text-primary mb-2">
            <i class="ri-package-line me-2"></i> Orders (${transaction.orderReferences.length})
          </h6>
          <div class="table-responsive">
            <table class="table table-sm table-borderless">
              <thead>
                <tr class="bg-light">
                  <th>Order ID</th>
                  <th>Amount</th>
                  <th>Fees</th>
                  <th>Date</th>
                </tr>
              </thead>
              <tbody>
                ${transaction.orderReferences.map(order => `
                  <tr>
                    <td class="fw-medium">${order.orderNumber}</td>
                    <td>${order.orderAmount} EGP</td>
                    <td>${order.orderFees} EGP</td>
                    <td class="text-muted">${new Date(order.completedDate).toLocaleDateString()}</td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
        </div>
      `;
    }

    let pickupsHtml = '';
    if (transaction.pickupReferences && transaction.pickupReferences.length > 0) {
      pickupsHtml = `
        <div class="mt-3">
          <h6 class="fw-bold text-warning mb-2">
            <i class="ri-truck-line me-2"></i> Pickups (${transaction.pickupReferences.length})
          </h6>
          <div class="table-responsive">
            <table class="table table-sm table-borderless">
              <thead>
                <tr class="bg-light">
                  <th>Pickup ID</th>
                  <th>Fees</th>
                  <th>Date</th>
                </tr>
              </thead>
              <tbody>
                ${transaction.pickupReferences.map(pickup => `
                  <tr>
                    <td class="fw-medium">${pickup.pickupNumber}</td>
                    <td>${pickup.pickupFees} EGP</td>
                    <td class="text-muted">${new Date(pickup.completedDate).toLocaleDateString()}</td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
        </div>
      `;
    }

    Swal.fire({
      title: `<i class="ri-exchange-line me-2"></i>Transaction Details`,
      html: `
        <div class="transaction-details-modal">
          <div class="row mb-3">
            <div class="col-md-6">
              <p class="mb-1"><strong>Transaction ID:</strong> ${transaction.transactionId}</p>
              <p class="mb-1"><strong>Date:</strong> ${new Date(transaction.createdAt).toLocaleString()}</p>
              <p class="mb-1"><strong>Type:</strong> ${getTransactionTypeLabel(transaction.transactionType)}</p>
              ${transaction.processingBatchId ? `<p class="mb-1"><strong>Batch ID:</strong> ${transaction.processingBatchId}</p>` : ''}
            </div>
            <div class="col-md-6">
              <p class="mb-1"><strong>Amount:</strong> <span class="${amountClass} fw-bold">${amountSign}${transaction.transactionAmount} EGP</span></p>
              <p class="mb-1"><strong>Settled:</strong> <span class="badge bg-${transaction.settled ? 'success' : 'warning'}">${transaction.settled ? 'Yes' : 'No'}</span></p>
              <p class="mb-1"><strong>Updated:</strong> ${new Date(transaction.updatedAt).toLocaleString()}</p>
            </div>
          </div>
          
          ${transaction.transactionNotes ? `
            <div class="alert alert-info">
              <strong>Notes:</strong> ${transaction.transactionNotes}
            </div>
          ` : ''}
          
          ${ordersHtml}
          ${pickupsHtml}
        </div>
      `,
      width: '900px',
      showConfirmButton: true,
      confirmButtonText: 'Close',
      confirmButtonColor: '#3B82F6'
    });
  }

  // Show Comprehensive Transaction Modal (New function for detailed info)
  function showComprehensiveTransactionModal(data) {
    const { transaction, orders, pickups, business } = data;
    
    if (!transaction) {
      Swal.fire({
        title: 'Error',
        text: 'Transaction data not found',
        icon: 'error',
        confirmButtonText: 'OK'
      });
      return;
    }

    const isPositive = ['cashCycle', 'refund', 'deposit'].includes(transaction.transactionType);
    const amountClass = isPositive ? 'text-success' : 'text-danger';
    const amountSign = transaction.transactionAmount > 0 ? '+' : '';

    // Build comprehensive orders section
    let ordersHtml = '';
    if (orders && orders.length > 0) {
      ordersHtml = `
        <div class="mt-4">
          <h6 class="fw-bold text-primary mb-3">
            <i class="ri-package-line me-2"></i> Related Orders (${orders.length})
          </h6>
          <div class="table-responsive">
            <table class="table table-sm table-hover">
              <thead class="table-light">
                <tr>
                  <th>Order Number</th>
                  <th>Status</th>
                  <th>Type</th>
                  <th>Amount</th>
                  <th>Fees</th>
                  <th>Customer</th>
                  <th>Completed Date</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                ${orders.map(order => `
                  <tr>
                    <td class="fw-medium">${order.orderNumber}</td>
                    <td><span class="badge bg-${getOrderStatusColor(order.orderStatus)}">${order.orderStatus}</span></td>
                    <td><span class="badge bg-info">${order.orderShipping?.orderType || 'N/A'}</span></td>
                    <td>${order.orderShipping?.amount || 0} EGP</td>
                    <td>${order.orderFees} EGP</td>
                    <td>
                      <div class="small">
                        <div><strong>${order.orderCustomer?.fullName || 'N/A'}</strong></div>
                        <div class="text-muted">${order.orderCustomer?.phoneNumber || 'N/A'}</div>
                      </div>
                    </td>
                    <td>${order.completedDate ? new Date(order.completedDate).toLocaleDateString() : 'N/A'}</td>
                    <td>
                      <button class="btn btn-sm btn-outline-primary" onclick="viewOrderDetails('${order._id}')">
                        <i class="ri-eye-line"></i> View
                      </button>
                    </td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
        </div>
      `;
    }

    // Build comprehensive pickups section
    let pickupsHtml = '';
    if (pickups && pickups.length > 0) {
      pickupsHtml = `
        <div class="mt-4">
          <h6 class="fw-bold text-warning mb-3">
            <i class="ri-truck-line me-2"></i> Related Pickups (${pickups.length})
          </h6>
          <div class="table-responsive">
            <table class="table table-sm table-hover">
              <thead class="table-light">
                <tr>
                  <th>Pickup Number</th>
                  <th>Status</th>
                  <th>Orders Count</th>
                  <th>Fees</th>
                  <th>Courier</th>
                  <th>Completed Date</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                ${pickups.map(pickup => `
                  <tr>
                    <td class="fw-medium">${pickup.pickupNumber}</td>
                    <td><span class="badge bg-${getPickupStatusColor(pickup.picikupStatus)}">${pickup.picikupStatus}</span></td>
                    <td>${pickup.ordersPickedUp?.length || 0}</td>
                    <td>${pickup.pickupFees} EGP</td>
                    <td>${pickup.courierAssigned?.name || 'N/A'}</td>
                    <td>${pickup.completedAt ? new Date(pickup.completedAt).toLocaleDateString() : 'N/A'}</td>
                    <td>
                      <button class="btn btn-sm btn-outline-primary" onclick="viewPickupDetails('${pickup._id}')">
                        <i class="ri-eye-line"></i> View
                      </button>
                    </td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
        </div>
      `;
    }

    // Business information
    let businessHtml = '';
    if (business) {
      businessHtml = `
        <div class="mt-4">
          <h6 class="fw-bold text-info mb-3">
            <i class="ri-building-line me-2"></i> Business Information
          </h6>
          <div class="row">
            <div class="col-md-6">
              <div class="card bg-light">
                <div class="card-body">
                  <div class="mb-2"><strong>Business Name:</strong> ${business.brandInfo?.brandName || business.name || 'N/A'}</div>
                  <div class="mb-2"><strong>Owner:</strong> ${business.name || 'N/A'}</div>
                  <div class="mb-2"><strong>Email:</strong> ${business.email || 'N/A'}</div>
                  <div class="mb-2"><strong>Phone:</strong> ${business.phoneNumber || 'N/A'}</div>
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="card bg-light">
                <div class="card-body">
                  <div class="mb-2"><strong>Industry:</strong> ${business.brandInfo?.industry || 'N/A'}</div>
                  <div class="mb-2"><strong>Type:</strong> ${business.brandType?.brandChoice || 'N/A'}</div>
                  <div class="mb-2"><strong>City:</strong> ${business.pickUpAdress?.city || 'N/A'}</div>
                  <div class="mb-2"><strong>Balance:</strong> ${business.balance || 0} EGP</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
    }

    Swal.fire({
      title: `<i class="ri-exchange-line me-2"></i>Comprehensive Transaction Information`,
      html: `
        <div class="comprehensive-transaction-modal">
          <!-- Transaction Overview -->
          <div class="row mb-4">
            <div class="col-md-6">
              <div class="card bg-primary text-white">
                <div class="card-body">
                  <h6 class="card-title">
                    <i class="ri-exchange-line me-2"></i>Transaction Overview
                  </h6>
                  <div class="mb-2"><strong>Transaction ID:</strong> ${transaction.transactionId}</div>
                  <div class="mb-2"><strong>Type:</strong> ${getTransactionTypeLabel(transaction.transactionType)}</div>
                  <div class="mb-2"><strong>Amount:</strong> <span class="fw-bold">${amountSign}${transaction.transactionAmount} EGP</span></div>
                  <div class="mb-2"><strong>Status:</strong> <span class="badge bg-${transaction.settled ? 'success' : 'warning'}">${transaction.settled ? 'Settled' : 'Pending'}</span></div>
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="card bg-info text-white">
                <div class="card-body">
                  <h6 class="card-title">
                    <i class="ri-calendar-line me-2"></i>Timeline
                  </h6>
                  <div class="mb-2"><strong>Created:</strong> ${new Date(transaction.createdAt).toLocaleString()}</div>
                  <div class="mb-2"><strong>Updated:</strong> ${new Date(transaction.updatedAt).toLocaleString()}</div>
                  ${transaction.processingBatchId ? `<div class="mb-2"><strong>Batch ID:</strong> ${transaction.processingBatchId}</div>` : ''}
                  ${transaction.settlementStatus ? `<div class="mb-2"><strong>Settlement:</strong> ${transaction.settlementStatus}</div>` : ''}
                </div>
              </div>
            </div>
          </div>

          ${transaction.transactionNotes ? `
            <div class="alert alert-info">
              <strong><i class="ri-file-text-line me-2"></i>Transaction Notes:</strong><br>
              ${transaction.transactionNotes}
            </div>
          ` : ''}

          ${businessHtml}
          ${ordersHtml}
          ${pickupsHtml}
        </div>
      `,
      width: '1200px',
      showConfirmButton: true,
      confirmButtonText: 'Close',
      confirmButtonColor: '#3B82F6',
      customClass: {
        popup: 'swal-wide'
      }
    });
  }

  // Helper functions for status colors
  function getOrderStatusColor(status) {
    switch (status) {
      case 'completed': return 'success';
      case 'canceled': return 'danger';
      case 'returned': return 'warning';
      case 'pendingPickup': return 'info';
      default: return 'secondary';
    }
  }

  function getPickupStatusColor(status) {
    switch (status) {
      case 'completed': return 'success';
      case 'canceled': return 'danger';
      case 'inProgress': return 'info';
      case 'assigned': return 'warning';
      default: return 'secondary';
    }
  }

  // Placeholder functions for order and pickup details
  function viewOrderDetails(orderId) {
    Swal.fire({
      title: 'Order Details',
      text: `Viewing order details for: ${orderId}`,
      icon: 'info',
      confirmButtonText: 'OK'
    });
  }

  function viewPickupDetails(pickupId) {
    Swal.fire({
      title: 'Pickup Details',
      text: `Viewing pickup details for: ${pickupId}`,
      icon: 'info',
      confirmButtonText: 'OK'
    });
  }

  // Apply Filters Function
  function applyFilters() {
    const filters = {
      search: document.getElementById('searchInput').value,
      status: document.getElementById('statusFilter').value,
      amount: document.getElementById('amountFilter').value,
      dateRange: document.getElementById('datepicker-range').value,
      paymentMethod: document.getElementById('paymentMethodFilter').value,
      businessType: document.getElementById('businessTypeFilter').value,
      industry: document.getElementById('industryFilter').value,
      city: document.getElementById('cityFilter').value,
      releaseType: document.getElementById('releaseTypeFilter').value,
      sortBy: document.getElementById('sortByFilter').value,
      sortOrder: document.getElementById('sortOrderFilter').value,
      recordsPerPage: document.getElementById('recordsPerPageFilter').value
    };

    // Update the fetchReleases call with filters
    fetchReleasesWithFilters(filters);
  }

  // Clear Filters Function
  function clearFilters() {
    document.getElementById('filterForm').reset();
    fetchReleases('all');
  }

  // Export Filtered Data
  function exportFilteredData() {
    const filters = {
      search: document.getElementById('searchInput').value,
      status: document.getElementById('statusFilter').value,
      amount: document.getElementById('amountFilter').value,
      dateRange: document.getElementById('datepicker-range').value,
      paymentMethod: document.getElementById('paymentMethodFilter').value,
      businessType: document.getElementById('businessTypeFilter').value,
      industry: document.getElementById('industryFilter').value,
      city: document.getElementById('cityFilter').value,
      releaseType: document.getElementById('releaseTypeFilter').value
    };

    // Create query string from filters
    const queryString = new URLSearchParams(filters).toString();
    window.open(`/admin/export-releases-excel?${queryString}`, '_blank');
  }

  // Bulk Actions Functions
  function showBulkActions() {
    const selectedCount = document.querySelectorAll('tbody .form-check-input:checked').length;
    if (selectedCount > 0) {
      document.getElementById('selectedCount').textContent = selectedCount;
      const modal = new bootstrap.Modal(document.getElementById('bulkActionsModal'));
      modal.show();
    }
  }

  function bulkRelease() {
    const selectedIds = Array.from(document.querySelectorAll('tbody .form-check-input:checked'))
      .map(checkbox => checkbox.getAttribute('data-release-id'));
    
    if (selectedIds.length > 0) {
      Swal.fire({
        title: 'Confirm Bulk Release',
        text: `Are you sure you want to release funds for ${selectedIds.length} selected releases?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, Release All',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          // Implement bulk release logic
          console.log('Bulk releasing:', selectedIds);
        }
      });
    }
  }

  function bulkSchedule() {
    const selectedIds = Array.from(document.querySelectorAll('tbody .form-check-input:checked'))
      .map(checkbox => checkbox.getAttribute('data-release-id'));
    
    if (selectedIds.length > 0) {
      // Implement bulk schedule logic
      console.log('Bulk scheduling:', selectedIds);
    }
  }

  function bulkReschedule() {
    const selectedIds = Array.from(document.querySelectorAll('tbody .form-check-input:checked'))
      .map(checkbox => checkbox.getAttribute('data-release-id'));
    
    if (selectedIds.length > 0) {
      // Implement bulk reschedule logic
      console.log('Bulk rescheduling:', selectedIds);
    }
  }

  function bulkCancel() {
    const selectedIds = Array.from(document.querySelectorAll('tbody .form-check-input:checked'))
      .map(checkbox => checkbox.getAttribute('data-release-id'));
    
    if (selectedIds.length > 0) {
      Swal.fire({
        title: 'Confirm Bulk Cancel',
        text: `Are you sure you want to cancel ${selectedIds.length} selected releases?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, Cancel All',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          // Implement bulk cancel logic
          console.log('Bulk canceling:', selectedIds);
        }
      });
    }
  }

  // Additional Functions
  function scheduleBulkRelease() {
    Swal.fire({
      title: 'Schedule Bulk Release',
      text: 'This feature will allow you to schedule multiple releases at once.',
      icon: 'info',
      confirmButtonText: 'OK'
    });
  }

  function refreshData() {
    fetchReleases('all');
  }

  function viewAnalytics() {
    Swal.fire({
      title: 'Analytics Dashboard',
      text: 'This feature will show detailed analytics and reports.',
      icon: 'info',
      confirmButtonText: 'OK'
    });
  }

  // Enhanced fetchReleases with filters
  async function fetchReleasesWithFilters(filters) {
    try {
      document.querySelector('.noresult').style.display = 'none';
      tableBody.innerHTML = '<tr><td colspan="9" class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></td></tr>';
      
      const queryString = new URLSearchParams(filters).toString();
      const response = await fetch(`/admin/get-release-all-data?${queryString}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      const data = await response.json();
      
      if (data['releases'].length > 0) {
        // Update stats
        totalAvailable.textContent = parseFloat(data['totalFundsAvailable']).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        releaseDate.textContent = new Date(data['nextReleaseDate']).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
        completeCount.textContent = data['totalPaymentsReleasedCount'];
        completeFund.textContent = parseFloat(data['totalPaymentsReleased']).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })+ ' EGP';
        pendingCount.textContent = data['paymentsPendingCount'];
        pendingFund.textContent = parseFloat(data['paymentsPending']).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })+ ' EGP';
        scheduledCount.textContent = data['scheduledReleasesCount'];
        scheduledFund.textContent = parseFloat(data['scheduledReleases']).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })+ ' EGP';
        
        populateReleases(data['releases']);
      } else {
        tableBody.innerHTML = '';
        document.querySelector('.noresult').style.display = 'block';
      }
    } catch (error) {
      console.error('Error fetching releases:', error);
      Swal.fire({
        title: 'Error',
        text: 'Failed to fetch release data. Please try again later.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  }

  // Handle checkbox changes for bulk actions
  document.addEventListener('change', function(e) {
    if (e.target.classList.contains('form-check-input')) {
      const selectedCount = document.querySelectorAll('tbody .form-check-input:checked').length;
      const bulkActionsBtn = document.getElementById('bulkActionsBtn');
      
      if (selectedCount > 0) {
        bulkActionsBtn.disabled = false;
        bulkActionsBtn.innerHTML = `<i class="ri-checkbox-multiple-line me-1"></i> Bulk Actions (${selectedCount})`;
      } else {
        bulkActionsBtn.disabled = true;
        bulkActionsBtn.innerHTML = `<i class="ri-checkbox-multiple-line me-1"></i> Bulk Actions`;
      }
    }
  });

  // Handle select all checkbox
  document.addEventListener('change', function(e) {
    if (e.target.id === 'checkAll') {
      const isChecked = e.target.checked;
      document.querySelectorAll('tbody .form-check-input').forEach(checkbox => {
        checkbox.checked = isChecked;
      });
      
      const selectedCount = isChecked ? document.querySelectorAll('tbody .form-check-input').length : 0;
      const bulkActionsBtn = document.getElementById('bulkActionsBtn');
      
      if (selectedCount > 0) {
        bulkActionsBtn.disabled = false;
        bulkActionsBtn.innerHTML = `<i class="ri-checkbox-multiple-line me-1"></i> Bulk Actions (${selectedCount})`;
      } else {
        bulkActionsBtn.disabled = true;
        bulkActionsBtn.innerHTML = `<i class="ri-checkbox-multiple-line me-1"></i> Bulk Actions`;
      }
    }
  });




</script>


<!-- <script>
  document.addEventListener("DOMContentLoaded", function() {
    // Initialize flatpickr date range picker
    flatpickr("#datepicker-range", {
      mode: "range",
      dateFormat: "d M, Y",
    });
    
    // Initialize flatpickr for new release date
    flatpickr("#newReleaseDate", {
      dateFormat: "d M, Y",
      minDate: "today",
    });
    
    // Initialize choices for select dropdowns
    const selectElements = document.querySelectorAll('[data-choices]');
    selectElements.forEach(element => {
      const choices = new Choices(element, {
        searchEnabled: element.getAttribute('data-choices-search-false') !== 'true',
        itemSelectText: '',
      });
    });
    
    // Initialize choices for reschedule reason
    const rescheduleReason = document.getElementById('rescheduleReason');
    if (rescheduleReason) {
      new Choices(rescheduleReason, {
        searchEnabled: false,
        itemSelectText: '',
      });
    }
    
 
    // Initialize feather icons
    feather.replace();
    
    // Initialize list.js for table
    const options = {
      valueNames: [
        'release_id',
        'business',
        'amount',
        'orders',
        'release_date',
        'status',
      ],
      page: 10,
      pagination: true,
      plugins: [
        ListPagination({})
      ]
    };
    
    // Initialize the list
    new List('releasesList', options);
    
    // Handle select all checkbox
    document.getElementById('checkAll').addEventListener('change', function() {
      const isChecked = this.checked;
      document.querySelectorAll('tbody .form-check-input').forEach(checkbox => {
        checkbox.checked = isChecked;
      });
      updateBulkReleaseButton();
    });
    
    // Update bulk release button based on selections
    function updateBulkReleaseButton() {
      const selectedCount = document.querySelectorAll('tbody .form-check-input:checked').length;
      const bulkReleaseBtn = document.getElementById('bulkReleaseBtn');
      
      if (selectedCount > 0) {
        bulkReleaseBtn.textContent = `Bulk Release (${selectedCount})`;
        bulkReleaseBtn.disabled = false;
      } else {
        bulkReleaseBtn.textContent = 'Bulk Release';
        bulkReleaseBtn.disabled = true;
      }
    }
    
    // Add event listeners to all checkboxes
    document.querySelectorAll('tbody .form-check-input').forEach(checkbox => {
      checkbox.addEventListener('change', updateBulkReleaseButton);
    });
    
    // Handle individual release buttons
    const releaseButtons = document.querySelectorAll('.btn-action');
    releaseButtons.forEach(button => {
      if (button.textContent.trim() === 'Release Now') {
        button.addEventListener('click', function() {
          const releaseId = this.getAttribute('data-release-id');
          const row = this.closest('tr');
          const businessName = row.querySelector('.business-name span').textContent;
          const amount = row.querySelector('td:nth-child(4)').textContent;
          
          // Set values in modal
          document.getElementById('releaseBusiness').textContent = businessName;
          document.getElementById('releaseAmount').value = amount.replace('$', '');
          
          // Show modal
          const releaseModal = new bootstrap.Modal(document.getElementById('releaseMoneyModal'));
          releaseModal.show();
        });
      }
    });
    
    // Handle reschedule modal
    document.getElementById('rescheduleModal').addEventListener('show.bs.modal', function(event) {
      const button = event.relatedTarget;
      const releaseId = button.getAttribute('data-release-id');
      const row = button.closest('tr');
      const businessName = row.querySelector('.business-name span').textContent;
      const releaseDate = row.querySelector('.release-date-info:not(.rescheduled)').textContent.trim();
      
      // Set values in modal
      document.getElementById('rescheduleReleaseId').textContent = releaseId;
      document.getElementById('rescheduleBusiness').textContent = businessName;
      document.getElementById('currentReleaseDate').value = releaseDate.replace('Pending', 'Not scheduled yet');
    });
    
    // Handle confirm reschedule button click
    document.getElementById('confirmRescheduleBtn').addEventListener('click', function() {
      const releaseId = document.getElementById('rescheduleReleaseId').textContent;
      const newDate = document.getElementById('newReleaseDate').value;
      const reason = document.getElementById('rescheduleReason').value;
      
      if (!newDate) {
        Swal.fire({
          title: 'Error',
          text: 'Please select a new release date',
          icon: 'error',
          confirmButtonText: 'OK'
        });
        return;
      }
      
      if (!reason) {
        Swal.fire({
          title: 'Error',
          text: 'Please select a reason for rescheduling',
          icon: 'error',
          confirmButtonText: 'OK'
        });
        return;
      }
      
      // Close modal
      const rescheduleModal = bootstrap.Modal.getInstance(document.getElementById('rescheduleModal'));
      rescheduleModal.hide();
      
      // Show loading
      Swal.fire({
        title: 'Processing',
        text: 'Rescheduling release...',
        icon: 'info',
        showConfirmButton: false,
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      
      // Simulate API call
      setTimeout(() => {
        // Find the row with the release ID
        const rows = document.querySelectorAll('tbody tr');
        let targetRow;
        
        rows.forEach(row => {
          const rowReleaseId = row.querySelector('td:nth-child(2) a').textContent;
          if (rowReleaseId === releaseId) {
            targetRow = row;
          }
        });
        
        if (targetRow) {
          // Get the current release date
          const releaseDateCell = targetRow.querySelector('td:nth-child(6)');
          const currentDateInfo = releaseDateCell.querySelector('.release-date-info:not(.rescheduled)');
          
          // Create a new element for the old date (now rescheduled)
          const oldDateInfo = document.createElement('div');
          oldDateInfo.className = 'release-date-info rescheduled';
          oldDateInfo.innerHTML = currentDateInfo.innerHTML;
          
          // Update the current date info with the new date
          currentDateInfo.innerHTML = `<i class="ri-calendar-event-line"></i> ${newDate}`;
          
          // Insert the old date before the new date
          releaseDateCell.insertBefore(oldDateInfo, currentDateInfo);
          
          // Update the status
          const statusCell = targetRow.querySelector('td:nth-child(7)');
          statusCell.innerHTML = `
            <span class="status-badge status-rescheduled">
              <i class="ri-time-line"></i> Rescheduled
            </span>
          `;
          
          // Show success message
          Swal.fire({
            title: 'Success!',
            text: `Release ${releaseId} has been rescheduled to ${newDate}.`,
            icon: 'success',
            confirmButtonText: 'OK'
          });
        }
      }, 1500);
    });
    
    // Handle confirm release button click
    document.getElementById('confirmReleaseBtn').addEventListener('click', function() {
      const businessName = document.getElementById('releaseBusiness').textContent;
      const amount = document.getElementById('releaseAmount').value;
      const notes = document.getElementById('releaseNotes').value;
      
      // Close modal
      const releaseModal = bootstrap.Modal.getInstance(document.getElementById('releaseMoneyModal'));
      releaseModal.hide();
      
      // Show loading
      Swal.fire({
        title: 'Processing',
        text: 'Releasing funds...',
        icon: 'info',
        showConfirmButton: false,
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      
      // Simulate API call
      setTimeout(() => {
        // Find all rows with release buttons
        const releaseButtons = document.querySelectorAll('.btn-action');
        
        releaseButtons.forEach(button => {
          if (button.textContent.trim() === 'Release Now' && button.closest('tr').querySelector('.business-name span').textContent === businessName) {
            const row = button.closest('tr');
            
            // Update status cell
            const statusCell = row.querySelector('td:nth-child(7)');
            statusCell.innerHTML = `
              <span class="status-badge status-released">
                <i class="ri-checkbox-circle-line"></i> Released
              </span>
            `;
            
            // Update action cell
            const actionCell = row.querySelector('td:nth-child(8)');
            actionCell.innerHTML = `
              <button type="button" class="btn btn-soft-info btn-sm btn-action">
                View Details
              </button>
            `;
          }
        });
        
        // Update stats (for demo purposes)
        const pendingReleasesElement = document.querySelector('.counter-value[data-target="86"]');
        const newPendingValue = parseInt(pendingReleasesElement.getAttribute('data-target')) - 1;
        pendingReleasesElement.setAttribute('data-target', newPendingValue);
        pendingReleasesElement.textContent = newPendingValue.toLocaleString();
        
        const completedReleasesElement = document.querySelector('.counter-value[data-target="1248"]');
        const newCompletedValue = parseInt(completedReleasesElement.getAttribute('data-target')) + 1;
        completedReleasesElement.setAttribute('data-target', newCompletedValue);
        completedReleasesElement.textContent = newCompletedValue.toLocaleString();
        
        // Show success message
        Swal.fire({
          title: 'Success!',
          text: `Funds have been successfully released to ${businessName}.`,
          icon: 'success',
          confirmButtonText: 'OK'
        });
      }, 1500);
    });
    
    // Countdown timer for next release
    function updateCountdown() {
      // Set the target date (April 15, 2023)
      const targetDate = new Date('April 15, 2023 00:00:00').getTime();
      const now = new Date().getTime();
      const difference = targetDate - now;
      
      // Calculate days, hours, minutes, seconds
      const days = Math.floor(difference / (1000 * 60 * 60 * 24));
      const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((difference % (1000 * 60)) / 1000);
      
      // Update the countdown elements
      document.getElementById('days').textContent = days < 10 ? '0' + days : days;
      document.getElementById('hours').textContent = hours < 10 ? '0' + hours : hours;
      document.getElementById('minutes').textContent = minutes < 10 ? '0' + minutes : minutes;
      document.getElementById('seconds').textContent = seconds < 10 ? '0' + seconds : seconds;
      
      // If the countdown is over, display a message
      if (difference < 0) {
        clearInterval(countdownInterval);
        document.getElementById('days').textContent = '00';
        document.getElementById('hours').textContent = '00';
        document.getElementById('minutes').textContent = '00';
        document.getElementById('seconds').textContent = '00';
      }
    }
    
    // Update the countdown every second
    updateCountdown();
    const countdownInterval = setInterval(updateCountdown, 1000);
  });
  
  // Search function
  function SearchData() {
    const releaseStatus = document.getElementById('releaseStatus').value;
    const amountRange = document.getElementById('amountRange').value;
    const dateRange = document.getElementById('datepicker-range').value;
    
    console.log(`Searching with filters: Release Status=${releaseStatus}, Amount Range=${amountRange}, Date=${dateRange}`);
    
    // Here you would typically make an API call with these filters
    // For demo purposes, just show a success message
    Swal.fire({
      title: 'Filters Applied',
      text: 'The releases list has been filtered according to your criteria',
      icon: 'success',
      timer: 1500,
      showConfirmButton: false
    });
  }
</script> -->
</script> -->