<%- contentFor('HeaderCss') %>
<link href="/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
<!-- Remix Icons -->
<link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
<!-- Flatpickr CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<%- contentFor('body') %>
<style>
  /* Fix for dropdown menus in tables */
  .dropdown-fix .dropdown-menu {
    position: fixed !important;
    z-index: 1050 !important;
  }

  /* Ensure the table doesn't constrain the dropdown */
  #orderTable {
    overflow: visible !important;
  }

  /* Make sure parent containers don't clip the dropdown */

  .card-body,
  .card {
    overflow: visible !important;
  }
   .table-responsive{
    overflow: scroll;
  }

  .btn-close {
    filter: brightness(0) invert(1);
  }

  .form-control:focus,
  .form-check-input:focus {
    border-color: #F39720;
    box-shadow: 0 0 0 0.25rem rgba(76, 175, 80, 0.25);
  }

  .form-label {
    font-weight: 500;
    color: #333;
  }

  .readonly-field {
    background-color: #f8f9fa;
    border-left: 4px solid #F39720;
  }

  .feature-box {
    transition: all 0.3s ease;
    border: 1px solid #dee2e6;
    border-radius: 8px;
  }

  .feature-box:hover {
    background-color: #f0f9f0 !important;
    border-color: #F39720;
  }

  .feature-box .form-check-input:checked {
    background-color: #F39720;
    border-color: #F39720;
  }

  .btn-success {
    background-color: #F39720;
    border-color: #F39720;
  }

  .btn-success:hover {
    background-color: #F39720;
    border-color: #F39720;
  }

  .order-warning {
    display: none;
    color: #ff9800;
    font-size: 0.875rem;
    margin-top: 0.25rem;
  }

  .flatpickr-input {
    background-color: white !important;
  }

  .contact-info-note {
    font-size: 0.8rem;
    color: #666;
    margin-top: 0.25rem;
  }

  .required-asterisk {
    color: #dc3545;
    margin-left: 2px;
  }

  .sort {
    cursor: pointer !important;

  }


  .sort {
    cursor: pointer;
    position: relative;
  }

  .sort:after {
    content: "â†•";
    position: absolute;
    right: 8px;
    color: #6c757d;
    font-size: 0.8em;
  }

  .noresult {
    padding: 2rem;
    text-align: center;
  }

  /* Additional styling to match your design */
  .form-check {
    min-height: 1.5rem;
  }

  .form-check-input {
    width: 1em;
    height: 1em;
    margin-top: 0.25em;
    vertical-align: top;
  }
</style>
<div class="row">
  <div class="col-lg-12">
    <div class="card" id="orderList">
      <div class="card-header border-0">
        <div class="row align-items-center gy-3">
          <div class="col-sm">
            <h5 class="card-title mb-0">Pick UPs </h5>
          </div>
     
        </div>
      </div>
      <div class="card-body border border-dashed border-end-0 border-start-0">
        <form>
          <div class="row g-3">
            <div class="col-xxl-5 col-sm-6">
              <div class="search-box">
                <input type="text" class="form-control search" placeholder="Search for order ID, customer, order status or something...">
                <i class="ri-search-line search-icon"></i>
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-2 col-sm-6">
              <div>
                <input type="text" class="form-control" data-provider="flatpickr" data-date-format="d M, Y" data-range-date="true" id="demo-datepicker" placeholder="Select date">
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-2 col-sm-4">
              <div>
                <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="idStatus">
                  <option value="">Status</option>
                  <option value="all" selected>All</option>
                  <option value="Pending">Pending</option>
                  <option value="Inprogress">Inprogress</option>
                  <option value="Cancelled">Cancelled</option>
                  <option value="Pickups">Pickups</option>
                  <option value="Returns">Returns</option>
                  <option value="Delivered">Delivered</option>
                </select>
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-2 col-sm-4">
              <div>
                <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="idPayment">
                  <option value="">Select Payment</option>
                  <option value="all" selected>All</option>
                  <option value="Mastercard">Mastercard</option>
                  <option value="Paypal">Paypal</option>
                  <option value="Visa">Visa</option>
                  <option value="COD">COD</option>
                </select>
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-1 col-sm-4">
              <div>
                <button type="button" class="btn btn-primary w-100" onclick="SearchData();"> <i class="ri-equalizer-fill me-1 align-bottom"></i>
                  Filters
                </button>
              </div>
            </div>
            <!--end col-->
          </div>
          <!--end row-->
        </form>
      </div>
      <div class="card-body pt-0">
        <div>
          <ul class="nav nav-tabs nav-tabs-custom nav-success mb-3" role="tablist">
            <li class="nav-item">
              <button class="btn btn-link nav-link active All py-3" data-bs-toggle="tab" id="All" role="tab" aria-selected="true" onClick="filterPickups('Upcoming')">
                <i class="ri-calendar-event-fill me-1 align-bottom"></i> Upcoming Pickups
              </button>
            </li>
            <li class="nav-item">
              <button class="btn btn-link nav-link py-3 Delivered" data-bs-toggle="tab" id="Delivered" role="tab" aria-selected="false" onClick="filterPickups('Completed')">
                <i class="ri-history-line me-1 align-bottom"></i> Past Pickups
              </button>
            </li>
          </ul>

          <div class="table-responsive table-card mb-1">
            <table class="table table-nowrap align-middle" id="orderTable">
              <thead class="text-muted table-light">
                <tr class="text-uppercase">
                  <th scope="col" style="width: 25px;">
                    <div class="form-check"> <input class="form-check-input" type="checkbox" id="checkAll" value="option"> </div>
                  </th>
                  <th >Pickup Number</th>
                  <th >Business</th>
                  <th >Pickup Address</th>
                  <th >Contact Info</th>
                  <th >Pickup Date</th>
                  <th >Number of Items</th>
                  <th >Status</th>
                  <th >Delivery Man</th>
                  <th >Action</th>
                </tr>
              </thead>
              <tbody class="list form-check-all " id="TBody">

              </tbody>
            </table>
            <div class="noresult" style="display: none">
              <div class="text-center">
                <lord-icon src="https://cdn.lordicon.com/msoeawqm.json" trigger="loop" colors="primary:#405189,secondary:#0ab39c" style="width:75px;height:75px"></lord-icon>
                <h5 class="mt-2">Sorry! No Result Found</h5>
              
              </div>
            </div>
          </div>
          <div class="d-flex justify-content-end">
            <div class="pagination-wrap hstack gap-2">
              <a class="page-item pagination-prev disabled" href="javascript:void(0);">
                Previous
              </a>
              <ul class="pagination listjs-pagination mb-0"></ul>
              <a class="page-item pagination-next" href="javascript:void(0);">
                Next
              </a>
            </div>
          </div>
        </div>
  
        


  

          <!-- Assign Delivery Man Modal -->
          <div class="modal fade" id="assignDeliveryManModal" tabindex="-1" aria-labelledby="assignDeliveryManModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="assignDeliveryManModalLabel">Assign Delivery Man</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                  <div id="loader" class="text-center" style="display: none;">
                    <div class="spinner-border text-primary" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                  </div>
                  <form id="assignDeliveryManForm">
                    <input type="hidden" id="pickupId" name="pickupId" value="">
                    <div class="mb-3">
                      <label for="deliveryMan" class="form-label">Select Delivery Man</label>
                      <select class="form-select" id="deliveryMan" name="deliveryMan" required>
                        <option value="">Select a delivery man</option>
                      </select>
                    </div>
                    <div class="d-flex justify-content-end">
                      <button type="submit" class="btn btn-primary">Assign</button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
         <!--end modal -->


      </div>
    </div>

  </div>
  <!--end col-->
</div>
<!--end row-->

<%- contentFor('FooterJs') %>

<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="/assets/libs/sweetalert2/sweetalert2.min.js"></script>

<script>
  const tableBody = document.getElementById('TBody');
  const NoResult = document.querySelector('.noresult');
  const checkAll = document.getElementById('checkAll');

  function getFilters(){
    const search = document.querySelector('.search')?.value?.trim() || '';
    const status = document.getElementById('idStatus')?.value || 'all';
    const dateInput = document.getElementById('demo-datepicker');
    let dateFrom = '', dateTo = '';
    if (dateInput && dateInput.value) {
      if (dateInput.value.includes('to')) {
        const [from, to] = dateInput.value.split('to').map(s => s.trim());
        dateFrom = from; dateTo = to;
      } else { dateFrom = dateInput.value.trim(); dateTo = dateInput.value.trim(); }
    }
    return { search, status, dateFrom, dateTo };
  }

  async function fetchPickups(pickupType = "Upcoming") {
    try {
      tableBody.innerHTML = `
        <tr>
          <td colspan="10" class="text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </td>
        </tr>`;

      const filters = getFilters();
      const params = new URLSearchParams();
      params.append('pickupType', pickupType);
      if (filters.status && filters.status !== 'all') params.append('statusCategory', filters.status);
      if (filters.search) params.append('search', filters.search);
      if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);
      if (filters.dateTo) params.append('dateTo', filters.dateTo);

      const response = await fetch(`/admin/get-pickups?${params.toString()}`);
      const pickups = await response.json();
      if (response.ok) {
        tableBody.innerHTML = ""; // Clear existing rows
        NoResult.style.display = "none";
        if (!pickups.length) {
          NoResult.style.display = "block";
          return;
        }
        populatePickupsTable(pickups);
      } else {
        Swal.fire({ icon:'error', title:'Oops...', text:`Error fetching pickups: ${pickups.message || 'Unknown error'}` });
      }
    } catch (error) {
      console.error("Error fetching pickups:", error);
    }
  }

  function filterPickups(status) { fetchPickups(status); }
  function SearchData(){ fetchPickups(document.querySelector('.nav-tabs .nav-link.active')?.textContent?.includes('Past') ? 'Completed' : 'Upcoming'); }

  document.addEventListener("DOMContentLoaded", () => fetchPickups());

  // document.addEventListener('DOMContentLoaded', function() {


  //   // Initialize flatpickr with custom formatting
  //   flatpickr("#date-field", {
  //     dateFormat: "D, d M Y",
  //     minDate: "today",
  //     altInput: true,
  //     altFormat: "D, d M Y",
  //     disableMobile: true,
  //     onChange: function(selectedDates, dateStr) {
  //       const today = new Date();
  //       const tomorrow = new Date();
  //       tomorrow.setDate(today.getDate() + 1);

  //       if (selectedDates[0].toDateString() === tomorrow.toDateString()) {
  //         this.altInput.value = "Tomorrow, " + selectedDates[0].toLocaleDateString('en-US', {
  //           day: 'numeric',
  //           month: 'short'
  //         });
  //       }
  //     }
  //   });

  //   // Add validation for number of orders
  //   const numberOfOrdersInput = document.getElementById('numberOfOrders');
  //   const orderWarning = document.getElementById('orderWarning');

  //   numberOfOrdersInput.addEventListener('input', function() {
  //     const value = parseInt(this.value);
  //     if (value < 3) {
  //       orderWarning.style.display = 'block';
  //     } else {
  //       orderWarning.style.display = 'none';
  //     }
  //   });

  //   // Form submission
  //   const createPickupForm = document.querySelector('.tablelist-form');
  //   createPickupForm.addEventListener('submit', async (e) => {
  //     e.preventDefault();

  //     const formData = new FormData(createPickupForm);
  //     const data = Object.fromEntries(formData.entries());

  //     try {

  //       const response = await fetch('/business/pickup/create-pickup', {
  //         method: 'POST',
  //         headers: {
  //           'Content-Type': 'application/json'
  //         },
  //         body: JSON.stringify(data)
  //       });

  //       if (!response.ok) {
  //         throw new Error('Failed to create pickup');
  //       } else {
  //         Swal.fire({
  //           icon: 'success',
  //           title: 'Pickup Created',
  //           text: 'Your pickup has been successfully created!',
  //           showConfirmButton: true,
  //           timer: 1500
  //         }).then(() => {
  //           window.location.reload();
  //         });
  //       }

  //     } catch (error) {
  //       console.error(error);
  //     }


  //   });

  // });

</script>

<script>
  (function initAdminPickupFilterDate(){
    function init() {
      var el = document.getElementById('demo-datepicker');
      if (!el) return;
      try {
        flatpickr(el, { mode: 'range', dateFormat: 'd M, Y', allowInput: true });
        el.addEventListener('focus', function(){ if (el._flatpickr) { el._flatpickr.open(); } });
      } catch (e) { console.error('Flatpickr init error:', e); }
    }
    if (typeof window.flatpickr === 'undefined') {
      var s = document.createElement('script');
      s.src = '/assets/libs/flatpickr/flatpickr.min.js';
      s.onload = init;
      document.head.appendChild(s);
    } else { init(); }
  })();
</script>


<script>
  async function assignDeliveryMan(pickupId, city) {
    console.log(city, pickupId);
    document.getElementById('pickupId').value = pickupId;
    const deliveryManSelect = document.getElementById('deliveryMan');
    deliveryManSelect.innerHTML = '<option value="">Select a delivery man</option>';
    document.getElementById('loader').style.display = 'block';

    try {
      const response = await fetch(`/admin/get-pickup-men?pickupNumber=${pickupId}&city=${city}`);
      const deliveryMen = await response.json();

      if (response.ok) {
        deliveryMen.forEach(man => {
          const option = document.createElement('option');
          option.value = man._id;
          option.textContent = man.name;
          deliveryManSelect.appendChild(option);
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: `Error fetching Pickup men: ${deliveryMen.message || 'Unknown error'}`,
        });
      }
    } catch (error) {
      console.error('Error fetching Pickup men:', error);
    } finally {
      document.getElementById('loader').style.display = 'none';
    }

    const assignDeliveryManModal = new bootstrap.Modal(document.getElementById('assignDeliveryManModal'));
    assignDeliveryManModal.show();
  }

  document.getElementById('assignDeliveryManForm').addEventListener('submit', async function(event) {
    event.preventDefault();
    const pickupNumber = document.getElementById('pickupId').value;
    const deliveryManId = document.getElementById('deliveryMan').value;
    console.log(pickupNumber, deliveryManId);
    try {
      const response = await fetch(`/admin/assign-pickup-man`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          pickupId: pickupNumber,
          courierId: deliveryManId,
        }),
      });
      const result = await response.json();
      if (response.ok) {
        Swal.fire({
          title: 'Assigned!',
          text: 'Delivery man has been assigned successfully.',
          icon: 'success',
          confirmButtonText: 'OK',
        }).then(() => {
          window.location.reload();
        });
      } else {

        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: `Error assigning delivery man: ${result.message || 'Unknown error'}`,
        });
      }
    } catch (error) {
      console.error('Error assigning delivery man:', error);
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: 'There was an error assigning the delivery man. Please try again later.',
      });
    }
  });

  function getPickupStatusDetails(status) {
    let badgeClass = '';
    let statusText = '';

    if (status === 'new') {
      badgeClass = 'bg-primary-subtle text-primary';
      statusText = 'New';
    } else if (status === 'driverAssigned') {
      badgeClass = 'bg-secondary-subtle text-secondary';
      statusText = 'Driver Assigned';
    } else if (status === 'pickedUp') {
      badgeClass = 'bg-info-subtle text-info';
      statusText = 'Picked Up';
    } else if (status === 'inStock') {
      badgeClass = 'bg-warning-subtle text-warning';
      statusText = 'In Stock';
    } else if (status === 'inProgress') {
      badgeClass = 'bg-success-subtle text-success';
      statusText = 'In Progress';
    } else if (status === 'completed') {
      badgeClass = 'bg-success-subtle text-success';
      statusText = 'Completed';
    } else if (status === 'canceled') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Canceled';
    } else if (status === 'rejected') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Rejected';
    } else if (status === 'returned') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Returned';
    } else if (status === 'terminated') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Terminated';
    } else {
      statusText = 'Unknown';
    }

    return { badgeClass, statusText };
  }

  // Render grouped pickups (returned by /admin/get-pickups) into the admin table
  if (typeof populatePickupsTable !== 'function') {
    function populatePickupsTable(groupedPickups) {
      try {
        tableBody.innerHTML = "";
        const groups = Array.isArray(groupedPickups) ? groupedPickups : [];
        groups.forEach((group) => {
          const city = group?._id || 'Unknown City';
          const cityHeaderRow = document.createElement('tr');
          cityHeaderRow.innerHTML = `<td colspan="10" class="bg-light fw-semibold text-uppercase">${city}</td>`;
          tableBody.appendChild(cityHeaderRow);

          (group.pickups || []).forEach((pickup) => {
            const row = document.createElement('tr');

            if (pickup.picikupStatus === 'new') {
              row.classList.add('table-warning');
            } else if (pickup.picikupStatus === 'rejected' || pickup.picikupStatus === 'returned') {
              row.classList.add('table-danger');
            }

            const details = getPickupStatusDetails(pickup.picikupStatus);
            const businessName = pickup.business?.brandInfo?.brandName || pickup.business?.name || '';
            const businessCity = pickup.business?.pickUpAdress?.city || city || '';
            const businessAddress = pickup.business?.pickUpAdress?.adressDetails || '';
            const driverName = pickup.assignedDriver?.name ? pickup.assignedDriver.name.split(' ').slice(0,2).join(' ') : 'Not Assigned';

            row.innerHTML = `
              <th scope="row">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" name="checkAll[]" value="${pickup.pickupNumber}">
                </div>
              </th>
              <td class="id"><a href="/admin/pickup-details/${pickup.pickupNumber}" class="fw-medium link-primary">${pickup.pickupNumber}</a></td>
              <td class="business">${businessName}</td>
              <td class="pickup_address">
                ${businessAddress}<br>
                <span class="text-muted">${businessCity}</span>
              </td>
              <td class="contact_info">${pickup.phoneNumber || ''}</td>
              <td class="pickup_date">
                ${pickup.pickupDate ? new Date(pickup.pickupDate).toLocaleDateString('en-US', { weekday: 'long' }) : ''}<br>
                ${pickup.pickupDate ? new Date(pickup.pickupDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) : ''}
              </td>
              <td class="number_of_items text-center">${pickup.numberOfOrders || 0}</td>
              <td class="status"><span class="badge text-uppercase fs-6 ${details.badgeClass}">${details.statusText}</span></td>
              <td class="delivery_man">${driverName}</td>
              <td>
                <div class="dropdown dropdown-fix">
                  <button class="btn btn-soft-secondary btn-sm dropdown" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="ri-more-fill align-middle"></i>
                  </button>
                  <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="/admin/pickup-details/${pickup.pickupNumber}"><i class="ri-eye-fill align-bottom me-2 text-primary"></i> <span class="fs-6">View Details</span></a></li>
                    <li><a class="dropdown-item" href="javascript:void(0);" onclick="assignDeliveryMan('${pickup._id}', '${businessCity.replace(/'/g, "\\'")}')"><i class="ri-user-add-line align-bottom me-2 text-success"></i> <span class="fs-6">Assign Delivery Man</span></a></li>
                  </ul>
                </div>
              </td>
            `;

            tableBody.appendChild(row);
          });
        });

        // Handle empty state
        NoResult.style.display = groups.length ? 'none' : 'block';
      } catch (e) {
        console.error('Error rendering pickups table:', e);
      }
    }
  }

</script>


<!-- ecommerce-order init js -->

<!-- App js -->