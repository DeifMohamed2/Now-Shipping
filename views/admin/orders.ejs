<%- contentFor('HeaderCss') %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.7.6/lottie.min.js"></script>

<link href="/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
<%- contentFor('body') %>
<style>
  /* Fix for dropdown menus in tables */
  .dropdown-fix .dropdown-menu {
    position: fixed !important;
    z-index: 1050 !important;
  }

  /* Ensure the table doesn't constrain the dropdown */
  #orderTable {
    overflow: visible !important;
  }
  
  /* Make sure parent containers don't clip the dropdown */
  .card-body,
  .card {
    overflow: visible !important;
  }
  .table-responsive{
    overflow: scroll !important;
  }
</style>
<div class="row">
  <div class="col-lg-12">
    <div class="card" id="orderList">
      <div class="card-header border-0">
        <div class="row align-items-center gy-3">
          <div class="col-sm">
            <h5 class="card-title mb-0">Orders</h5>
          </div>
          <div class="col-sm-auto">
            <div class="d-flex gap-1 flex-wrap">
              <button type="button" class="btn btn-info"><i class="ri-file-download-line align-bottom me-1"></i> Import</button>
              <button class="btn btn-soft-danger" id="remove-actions" onClick="deleteMultiple()"><i class="ri-delete-bin-2-line"></i></button>
            </div>
          </div>
        </div>
      </div>
      <div class="card-body border border-dashed border-end-0 border-start-0">
        <form>
          <div class="row g-3">
            <div class="col-xxl-5 col-sm-6">
              <div class="search-box">
                <input type="text" class="form-control search" placeholder="Search for order ID, customer, order status or something...">
                <i class="ri-search-line search-icon"></i>
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-2 col-sm-6">
              <div>
                <input type="text" class="form-control" data-provider="flatpickr" data-date-format="d M, Y" data-range-date="true" id="demo-datepicker" placeholder="Select date">
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-2 col-sm-4">
                <div>
                <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="orderStatus">
                  <option value="">Status</option>
                  <option value="all" selected>All</option>
                  <option value="new">New</option>
                  <option value="pickedUp">Picked Up</option>
                  <option value="inStock">In Stock</option>
                  <option value="inProgress">In Progress</option>
                  <option value="headingToCustomer">Heading To Customer</option>
                  <option value="headingToYou">Heading To You</option>
                  <option value="completed">Completed</option>
                  <option value="canceled">Canceled</option>
                  <option value="rejected">Rejected</option>
                  <option value="returned">Returned</option>
                  <option value="terminated">Terminated</option>
                  <option value="waitingAction">Waiting Action</option>
                  <option value="returnInitiated">Return Initiated</option>
                  <option value="returnAssigned">Return Assigned</option>
                  <option value="returnPickedUp">Return Picked Up</option>
                  <option value="returnAtWarehouse">At Warehouse</option>
                  <option value="returnToBusiness">Returning to Business</option>
                  <option value="inReturnStock">In Return Stock</option>
                  <option value="returnInProgress">Return In Progress</option>
                  <option value="returnCompleted">Return Completed</option>
                </select>
                </div>
            </div>
            <!--end col-->
            <div class="col-xxl-2 col-sm-4">
              <div>
                <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="idPayment">
                  <option value="">Select Payment</option>
                  <option value="all" selected>All</option>
                  <option value="Mastercard">Mastercard</option>
                  <option value="Paypal">Paypal</option>
                  <option value="Visa">Visa</option>
                  <option value="COD">COD</option>
                </select>
              </div>
            </div>
            <!--end col-->
            <div class="col-xxl-1 col-sm-4">
              <div>
                <button type="button" class="btn btn-primary w-100" onclick="SearchData()"> <i class="ri-equalizer-fill me-1 align-bottom"></i>
                  Filters
                </button>
              </div>
            </div>
            <!--end col-->
          </div>
          <!--end row-->
        </form>
      </div>
      <div class="card-body pt-0">
        <div>
          <ul class="nav nav-tabs nav-tabs-custom nav-success mb-3" role="tablist">
            <li class="nav-item">
              <button class="btn orderType btn-link nav-link active All py-3" data-bs-toggle="tab" id="All" role="tab" aria-selected="true" onClick="filterOrders('All')">
                <i class="ri-store-2-fill me-1 align-bottom"></i> All Orders
              </button>
            </li>
            <li class="nav-item">
              <button class="btn orderType btn-link nav-link py-3 Delivered" data-bs-toggle="tab" id="Delivered" role="tab" aria-selected="false" onClick="filterOrders('Deliver')">
                <i class="ri-truck-line me-1 align-bottom"></i> Deliver
              </button>
            </li>
            <li class="nav-item">
              <button class="btn orderType btn-link nav-link py-3 Returns" data-bs-toggle="tab" id="Returns" role="tab" aria-selected="false" onClick="filterOrders('Return')">
                <i class="ri-arrow-left-right-fill me-1 align-bottom"></i> Returns
              </button>
            </li>
            <li class="nav-item">
              <button class="btn orderType btn-link nav-link py-3 CashCollection" data-bs-toggle="tab" id="CashCollection" role="tab" aria-selected="false" onClick="filterOrders('Exchange')">
                <i class="ri-exchange-line me-1 align-bottom"></i> Exchange
              </button>
            </li>

            <li class="nav-item">
              <button class="btn orderType btn-link nav-link py-3 CashCollection" data-bs-toggle="tab" id="CashCollection" role="tab" aria-selected="false" onClick="filterOrders('CashCollection')">
                <i class="ri-money-dollar-circle-line me-1 align-bottom"></i> Cash Collection
              </button>
            </li>

          </ul>

          <div class="table-responsive table-card mb-1">
            <table class="table table-nowrap align-middle" id="orderTable">
              <thead class="text-muted table-light">
                <tr class="text-uppercase">
                  <th scope="col" style="width: 25px;">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" id="checkAll" value="option">
                    </div>
                  </th>
                  <th >Order ID</th>
                  <th >Business</th>
                  <th >Customer</th>
                  <th data-sort="order-type">Order Type</th>
                  <th data-sort="order-Location">Order Location</th>
                  <th data-sort="amount">Amount</th>
                  <th data-sort="status">Delivery Status</th>
                  <th data-sort="status">Assign To</th>
                  <th data-sort="date">Order Date</th>
                  <th >Action</th>
                </tr>
              </thead>
              <tbody class="list form-check-all" id="ordersTable">
                <!-- Orders will be inserted here dynamically -->
              </tbody>
            </table>


            <div class="noresult" id="NoResult" style="display: none">
              <div class="text-center">
                <lord-icon src="https://cdn.lordicon.com/msoeawqm.json" trigger="loop" colors="primary:#405189,secondary:#0ab39c" style="width:75px;height:75px"></lord-icon>
                <h5 class="mt-2">Sorry! No Result Found</h5>
              </div>
            </div>
          </div>
        </div>
        <div class="d-flex justify-content-end">
          <div class="pagination-wrap hstack gap-2">
            <a class="page-item pagination-prev disabled" href="javascript:void(0);">
              Previous
            </a>
            <ul class="pagination listjs-pagination mb-0"></ul>
            <a class="page-item pagination-next" href="javascript:void(0);">
              Next
            </a>
          </div>
        </div>
      </div>

      <!-- Assign Delivery Man Modal -->
      <div class="modal fade" id="assignDeliveryManModal" tabindex="-1" aria-labelledby="assignDeliveryManModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="assignDeliveryManModalLabel">Assign Delivery Man</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div id="loader" class="text-center" style="display: none;">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </div>
              <form id="assignDeliveryManForm">
                <input type="hidden" id="orderId" name="orderId" value="">
                <div class="mb-3">
                  <label for="deliveryMan" class="form-label">Select Delivery Man</label>
                  <select class="form-select" id="deliveryMan" name="deliveryMan" required>
                    <option value="">Select a delivery man</option>
                  </select>
                </div>
                <div class="d-flex justify-content-end">
                  <button type="submit" class="btn btn-primary">Assign</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- Print Policy Modal -->
      <div class="modal fade" id="printPolicyModal" tabindex="-1" aria-labelledby="printPolicyModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="printPolicyModalLabel">Print Delivery Policy</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <p>Select the paper size for printing the delivery policy:</p>
              <form id="printPolicyForm">
                <input type="hidden" id="orderId" name="orderId" value="">
                <div class="d-flex justify-content-around">
                  <div class="paper-size-option" onclick="selectPaperSize('A4')">
                    <img src="/assets/images/a4.png" alt="A4" style="width: 100px; height: 100px;">
                    <p>A4</p>
                  </div>
                  <div class="paper-size-option" onclick="selectPaperSize('A6')">
                    <img src="/assets/images/a6.png" alt="A6" style="width: 100px; height: 100px;">
                    <p>A6</p>
                  </div>
                </div>
                <input type="hidden" id="paperSize" name="paperSize" value="">
                <div class="d-flex justify-content-end mt-3">
                  <button type="button" class="btn btn-primary" onclick="printPolicy()">Print</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- Assign Return Courier Modal -->
      <div class="modal fade" id="assignReturnCourierModal" tabindex="-1" aria-labelledby="assignReturnCourierModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="assignReturnCourierModalLabel">Assign Courier for Return</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div id="returnCourierLoader" class="text-center" style="display: none;">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </div>
              <form id="assignReturnCourierForm">
                <input type="hidden" id="returnOrderId" name="returnOrderId" value="">
                <div class="mb-3">
                  <label for="returnCourier" class="form-label">Select Courier</label>
                  <select class="form-select" id="returnCourier" name="returnCourier" required>
                    <option value="">Select a courier</option>
                  </select>
                </div>
                <div class="d-flex justify-content-end">
                  <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Cancel</button>
                  <button type="submit" class="btn btn-primary">Assign</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

    </div>
  </div>

</div>
<!--end col-->
</div>
<!--end row-->

<%- contentFor('FooterJs') %>

<script>
  async function assignDeliveryMan(orderId, zone) {
    console.log(zone, orderId);
    document.getElementById('orderId').value = orderId;
    const deliveryManSelect = document.getElementById('deliveryMan');
    deliveryManSelect.innerHTML = '<option value="">Select a delivery man</option>';
    document.getElementById('loader').style.display = 'block';

    try {
      const response = await fetch(`/admin/get-delivery-men?orderId=${orderId}&zone=${zone}`);
      const deliveryMen = await response.json();

      if (response.ok) {
        deliveryMen.forEach(man => {
          const option = document.createElement('option');
          option.value = man._id;
          option.textContent = man.name;
          deliveryManSelect.appendChild(option);
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: `Error fetching delivery men: ${deliveryMen.message || 'Unknown error'}`,
        });
      }
    } catch (error) {
      console.error('Error fetching delivery men:', error);
    } finally {
      document.getElementById('loader').style.display = 'none';
    }

    const assignDeliveryManModal = new bootstrap.Modal(document.getElementById('assignDeliveryManModal'));
    assignDeliveryManModal.show();
  }

  document.getElementById('assignDeliveryManForm').addEventListener('submit', async function(event) {
    event.preventDefault();
    const orderId = document.getElementById('orderId').value;
    const deliveryManId = document.getElementById('deliveryMan').value;

    try {
      const response = await fetch(`/admin/assign-delivery-man`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderNumbers: [orderId],
          courierId: deliveryManId
        }),
      });

      if (response.ok) {
        Swal.fire({
          title: 'Assigned!',
          text: 'Delivery man has been assigned successfully.',
          icon: 'success',
          confirmButtonText: 'OK',
        }).then(() => {
          window.location.reload();
        });
      } else {
        const result = await response.json();
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: `Error assigning delivery man: ${result.message || 'Unknown error'}`,
        });
      }
    } catch (error) {
      console.error('Error assigning delivery man:', error);
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: 'There was an error assigning the delivery man. Please try again later.',
      });
    }
  });
</script>


<script>
  const tableBody = document.getElementById("ordersTable");
  const NoResult = document.getElementById("NoResult");
  const checkAll = document.getElementById("checkAll");


  if (checkAll) {
    checkAll.addEventListener("change", function() {
      const checkboxes = document.querySelectorAll("input[name='checkAll[]']");
      checkboxes.forEach(checkbox => {
        checkbox.checked = checkAll.checked;
      });
    });
  }

  async function fetchOrders(orderType = "All",status='') {
    try {

      // Show loading spinner
      tableBody.innerHTML = `
        <tr>
          <td colspan="9" class="text-center">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
          </td>
        </tr>
      `;


      const response = await fetch(`/admin/get-orders?orderType=${orderType}&status=${status}`);
      const orders = await response.json();
      if (response.ok) {
        tableBody.innerHTML = ""; // Clear existing rows
        NoResult.style.display = "none";
        if (orders.length === 0) {
          NoResult.style.display = "block";
          return;
        }
        populateOrdersTable(orders);
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: `Error fetching orders: ${orders.message || 'Unknown error'}`,
        });
      }
    } catch (error) {
      console.error("Error fetching orders:", error);
    }
  }

  function populateOrdersTable(orders) {
    tableBody.innerHTML = ""; // Clear existing rows
    orders.forEach(order => {
      const row = document.createElement("tr");
        // Add highlighting for different important statuses
        if (order.orderStatus === 'new') {
          row.classList.add('table-warning'); // Yellow highlight for new orders
        } else if (order.orderStatus === 'rejected' || order.orderStatus === 'returned') {
          row.classList.add('table-danger'); // Red highlight for problem orders
        } else if (order.orderStatus === 'inReturnStock' || order.orderStatus === 'returnInProgress' || order.orderStatus === 'returnCompleted' || order.orderShipping.orderType === 'Return') {
          row.classList.add('table-info'); // Blue highlight for return orders
        }
      row.innerHTML = `
        <th scope="row">
          <div class="form-check">
            <input class="form-check-input" type="checkbox" name="checkAll[]" value="${order.orderNumber}">
          </div>
        </th>
        <td class="id">
          <a href="/admin/order-details/${order.orderNumber}" class="fw-medium link-primary">
            ${order.orderNumber}
            ${order.orderShipping.orderType === 'Return' ? '<i class="ri-arrow-go-back-line text-warning ms-1" title="Return Order"></i>' : ''}
          </a>
        </td>
        <td class="business_name">${order.business.brandInfo.brandName}</td>
        <td class="customer_name">${order.orderCustomer.fullName.split(' ').slice(0, 2).join(' ')}</td>
        <td class="product_name">
          ${order.orderShipping.orderType}
          ${order.orderShipping.orderType === 'Return' && order.orderShipping.returnReason ? 
            `<small class="d-block text-muted">Reason: ${order.orderShipping.returnReason.substring(0, 15)}${order.orderShipping.returnReason.length > 15 ? '...' : ''}</small>` : ''}
          ${order.isFastShipping ? '<span class="badge bg-warning text-dark ms-1"><i class="ri-flashlight-line me-1"></i>Fast</span>' : ''}
        </td>
        <td class="location">
          <div>${order.orderCustomer.government}</div>
          <div class="text-muted">${order.orderCustomer.zone}</div>
        </td>
        <td class="amount">
          <div>${order.orderShipping.amount || 0} EGP</div>
          <div class="text-muted">${order.orderShipping.amountType}</div>
        </td>
        <td class="status">
            <span class="badge text-uppercase fs-6 ${getStatusDetails(order.orderStatus).badgeClass}">${getStatusDetails(order.orderStatus).statusText}</span>
        </td>
        <td class="assign_to">
          ${order.deliveryMan ? `
            <div class="fw-bold">${order.deliveryMan.name}</div>
            <div class="text-muted small">#${order.deliveryMan.courierID}</div>
          ` : 'N/A'}
        </td>
        <td class="date">${new Date(order.orderDate).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</td>
        <td>
          <div class="dropdown dropdown-fix">
            <button class="btn btn-soft-secondary btn-sm dropdown" type="button" data-bs-toggle="dropdown" aria-expanded="false">
              <i class="ri-more-fill align-middle"></i>
            </button>
            <ul class="dropdown-menu">
                ${(order.orderShipping.orderType === 'Exchange' || (order.orderShipping.orderType === 'Deliver' && order.isFastShipping && order.readyForCourierAssignment) || order.orderStatus === 'pickedUp') ? 
                  `<li><button class="dropdown-item" onclick="assignDeliveryMan('${order.orderNumber}','${order.orderCustomer.zone}')" data-bs-toggle="modal" data-bs-target="#assignDeliveryManModal"><i class="ri-user-add-line align-bottom me-2 text-success"></i> <span class="fs-6">Assign Delivery Man</span>${order.isFastShipping ? ' <span class="badge bg-warning text-dark ms-1">Fast</span>' : ''}</button></li>` 
                  : ''}
                ${(order.orderStatus === 'inReturnStock' || order.orderStatus === 'returnInitiated' || (order.orderShipping.orderType === 'Return' && order.orderStatus === 'new')) ? 
                  `<li><button class="dropdown-item" onclick="assignCourierToReturn('${order.orderNumber}','${order.orderCustomer.zone}')"><i class="ri-user-received-2-line align-bottom me-2 text-success"></i> <span class="fs-6">Assign Courier (Return)</span></button></li>` 
                  : ''}
                <li><a class="dropdown-item" href="/business/edit-order/${order.orderNumber}">
                <i class="ri-edit-2-fill align-bottom me-2 text-warning"></i> <span class="fs-6">Edit Order</span>
              </a></li>
              <li><button class="dropdown-item" onclick="cancelOrder('${order._id}')"><i class="ri-delete-bin-6-fill align-bottom me-2 text-danger"></i> <span class="fs-6">Delete Order</span></button></li>
                <li><a class="dropdown-item" href="/business/order-details/${order.orderNumber}"><i class="ri-truck-line align-bottom me-2 text-info"></i> <span class="fs-6">Track Order</span></a></li>
            </ul>
          </div>
        </td>
      `;

      tableBody.appendChild(row);
    });
  }

  async function filterOrders(status) {
    console.log("Filtering orders by status:", status);
    await fetchOrders(status);
  }

  // Fetch orders on page load
  document.addEventListener("DOMContentLoaded", () => fetchOrders());


  function SearchData() {
    const search = document.querySelector('.search').value;
    const status = document.getElementById('orderStatus').value;
    const payment = document.getElementById('idPayment').value;
    const activeOrderType = document.querySelector('.orderType.active').id;
    fetchOrders(activeOrderType, status);
  }
  function getStatusDetails(status) {
    let badgeClass = '';
    let statusText = '';

    if (status === 'new') {
      badgeClass = 'bg-primary-subtle text-primary';
      statusText = 'New';
    } else if (status === 'pickedUp') {
      badgeClass = 'bg-secondary-subtle text-secondary';
      statusText = 'Picked Up';
    } else if (status === 'inStock') {
      badgeClass = 'bg-info-subtle text-info';
      statusText = 'In Stock';
    } else if (status === 'inProgress') {
      badgeClass = 'bg-warning-subtle text-warning';
      statusText = 'In Progress';
    } else if (status === 'headingToCustomer') {
      badgeClass = 'bg-success-subtle text-success';
      statusText = 'Heading To Customer';
    } else if (status === 'headingToYou') {
      badgeClass = 'bg-success-subtle text-success';
      statusText = 'Heading To Business';
    } else if (status === 'completed') {
      badgeClass = 'bg-success-subtle text-success';
      statusText = 'Completed';
    } else if (status === 'canceled') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Canceled';
    } else if (status === 'rejected') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Rejected';
    } else if (status === 'returned') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Returned';
    } else if (status === 'terminated') {
      badgeClass = 'bg-danger-subtle text-danger';
      statusText = 'Terminated';
    }else if(status === 'waitingAction'){
      statusText = 'Waiting Action';
      badgeClass = 'bg-danger-subtle text-danger';
    }else if(status === 'inReturnStock'){
      statusText = 'In Return Stock';
      badgeClass = 'bg-warning-subtle text-warning';
    }else if(status === 'returnInitiated'){
      statusText = 'Return Initiated';
      badgeClass = 'bg-secondary-subtle text-secondary';
    }else if(status === 'returnInProgress'){
      statusText = 'Return In Progress';
      badgeClass = 'bg-info-subtle text-info';
    }else if(status === 'returnCompleted'){
      statusText = 'Return Completed';
      badgeClass = 'bg-success-subtle text-success';
    }else if(status === 'returnAssigned'){
      statusText = 'Return Assigned';
      badgeClass = 'bg-info-subtle text-info';
    }else if(status === 'returnPickedUp'){
      statusText = 'Return Picked Up';
      badgeClass = 'bg-warning-subtle text-warning';
    }else if(status === 'returnAtWarehouse'){
      statusText = 'At Warehouse';
      badgeClass = 'bg-secondary-subtle text-secondary';
    }else if(status === 'returnToBusiness'){
      statusText = 'Returning to Business';
      badgeClass = 'bg-primary-subtle text-primary';
    } else {
      // Default case for unknown statuses
      statusText = status || 'Unknown';
      badgeClass = 'bg-light-subtle text-muted';
    }

    return { badgeClass, statusText };
  }

// cancel order
  async function cancelOrder(orderId) {
    console.log('Cancelling order:', orderId);
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it!',
      })
      .then(async (result) => {
        if (result.isConfirmed) {
          const response = await fetch(
            `/business/orders/delete-order/${orderId}`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              },
            }
          );

          if (response.ok) {
            Swal.fire({
              title: 'Cancelled!',
              text: 'Your order has been cancelled.',
              icon: 'success',
              confirmButtonText: 'OK',
            }).then(() => {
              window.location.href = '/business/orders';
            });
          }
        }
      })
      .catch((error) => {
        console.error('Error:', error);
        Swal.fire({
          title: 'Error!',
          text: 'There was an error cancelling the order. Please try again later.',
          icon: 'error',
          confirmButtonText: 'OK',
        });
      });
  }

  async function assignCourierToReturn(orderNumber, zone) {
    document.getElementById('returnOrderId').value = orderNumber;
    const courierSelect = document.getElementById('returnCourier');
    courierSelect.innerHTML = '<option value="">Select a courier</option>';
    document.getElementById('returnCourierLoader').style.display = 'block';

    try {
      // Using the same endpoint to get couriers by zone
      const response = await fetch(`/admin/get-couriers-by-zone?zone=${zone || ''}`);
      const couriers = await response.json();

      if (response.ok) {
        couriers.forEach(courier => {
          const option = document.createElement('option');
          option.value = courier._id;
          option.textContent = courier.name;
          courierSelect.appendChild(option);
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: `Error fetching couriers: ${couriers.message || 'Unknown error'}`,
        });
      }
    } catch (error) {
      console.error('Error fetching couriers:', error);
    } finally {
      document.getElementById('returnCourierLoader').style.display = 'none';
    }

    const assignReturnCourierModal = new bootstrap.Modal(document.getElementById('assignReturnCourierModal'));
    assignReturnCourierModal.show();
  }

  document.getElementById('assignReturnCourierForm').addEventListener('submit', async function(event) {
    event.preventDefault();
    const orderNumber = document.getElementById('returnOrderId').value;
    const courierId = document.getElementById('returnCourier').value;

    if (!courierId) {
      Swal.fire({
        icon: 'warning',
        title: 'Select Courier',
        text: 'Please select a courier'
      });
      return;
    }

    try {
      // Assign the courier directly for returnInitiated status
      const response = await fetch('/admin/return-assign-courier', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          orderNumbers: [orderNumber],
          courierId
        })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error('Failed to assign courier ' + (data.error || ''));
      }

      // Close modal
      const modal = bootstrap.Modal.getInstance(document.getElementById('assignReturnCourierModal'));
      modal.hide();

      // Show success message
      Swal.fire({
        icon: 'success',
        title: 'Assigned to Courier',
        text: `Return #${orderNumber} has been assigned to courier for pickup`,
        timer: 2000
      }).then(() => {
        window.location.reload();
      });

    } catch (error) {
      console.error('Error assigning courier:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to assign courier. Please try again.'
      });
    }
  });

</script>


<!-- list.js min js -->
<script src="/assets/libs/list.js/list.min.js"></script>

<!--list pagination js-->
<script src="/assets/libs/list.pagination.js/list.pagination.min.js"></script>

<!-- ecommerce-order init js -->
<!-- <script src="/assets/js/pages/ecommerce-order.init.js"></script> -->

<script src="/assets/libs/sweetalert2/sweetalert2.min.js"></script>


<!-- <script src="/assets/rJS/business/orders.js"></script> -->