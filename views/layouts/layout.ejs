<!doctype html>
<html lang="en" data-layout="vertical" data-topbar="light" data-sidebar="dark" data-sidebar-size="lg" data-sidebar-image="none" data-preloader="disable" data-theme="default" data-theme-colors="default">

<head>

  <meta charset="utf-8" />
  <title>Starter | Velzon - Admin & Dashboard Template</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta content="Professional shipping services - fast and reliable delivery for your cargo." name="description" />
<meta content="Now Shipping" name="author" />
  <!-- Font Awesome CDN -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">
  <!-- App favicon -->
  <link rel="shortcut icon" href="/assets/rImages/mainlogospining.png">
<%- typeof HeaderCss !== 'undefined' ? HeaderCss : '' %>
  <%- include ('../partials/head-css.ejs') %>


</head>

<body>

  <!-- Begin page -->
  <div id="layout-wrapper">

    <%- include ('../partials/topbar') %>
    <%- include ('../partials/sidebar') %>
    <!-- Left Sidebar End -->
 
    <!-- ============================================================== -->
    <!-- Start right Content here -->
    <!-- ============================================================== -->
    <div class="main-content">

      <div class="page-content">
        <div class="container-fluid">

          <!-- start page title -->
            <%- include ('../partials/page-title') %>
          <%- body%>


          <!-- end page title -->

        </div>
        <!-- container-fluid -->
      </div>
      <!-- End Page-content -->
    </div>
    <!-- end main content-->

  </div>
  <!-- END layout-wrapper -->


  <%- include ('../partials/vendor-scripts') %>
  <%- typeof FooterJs !== 'undefined' ? FooterJs : '' %>

  <!-- Add the assistant floating button and container before the closing body tag -->

  <!-- AI Assistant Floating Button -->
  <div class="assistant-floating-button" id="assistant-floating-button" style="display: none;">
      <button class="btn btn-primary btn-lg rounded-circle">
          <i class="ri-robot-line"></i>
      </button>
  </div>

  <div class="assistant-floating-container" id="assistant-floating-container" style="display: none;">
      <div class="assistant-floating-header">
          <h5 class="mb-0">Virtual Assistant</h5>
          <div>
              <button class="btn btn-sm btn-light" id="assistant-floating-minimize">
                  <i class="ri-subtract-line"></i>
              </button>
              <button class="btn btn-sm btn-light" id="assistant-floating-close">
                  <i class="ri-close-line"></i>
              </button>
          </div>
      </div>
      <div class="assistant-floating-body">
          <div class="assistant-floating-messages" id="assistant-floating-messages">
              <!-- Messages will be loaded here -->
              <div class="d-flex justify-content-center mt-4 mb-4">
                  <div class="spinner-border text-primary" role="status">
                      <span class="visually-hidden">Loading...</span>
                  </div>
              </div>
          </div>
          
          <div class="assistant-floating-suggestions mt-2" id="assistant-floating-suggestions">
              <!-- Suggestions will be loaded here -->
          </div>
      </div>
      <div class="assistant-floating-footer">
          <div class="input-group">
              <input type="text" class="form-control" id="assistant-floating-input" 
                     placeholder="Type your message..." aria-label="Message">
              <button class="btn btn-primary" type="button" id="assistant-floating-send">
                  <i class="ri-send-plane-fill"></i>
              </button>
          </div>
      </div>
  </div>

  <style>
      /* Floating Assistant Styles */
      .assistant-floating-button {
          position: fixed;
          bottom: 2rem;
          right: 2rem;
          z-index: 1040;
          box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
          border-radius: 50%;
      }
      
      .assistant-floating-container {
          position: fixed;
          bottom: 6rem;
          right: 2rem;
          width: 350px;
          height: 500px;
          background-color: white;
          border-radius: 0.5rem;
          box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
          display: flex;
          flex-direction: column;
          z-index: 1030;
      }
      
      .assistant-floating-header {
          padding: 1rem;
          border-bottom: 1px solid #dee2e6;
          display: flex;
          justify-content: space-between;
          align-items: center;
      }
      
      .assistant-floating-body {
          flex: 1;
          overflow-y: auto;
          padding: 1rem;
          background-color: #f8f9fa;
      }
      
      .assistant-floating-footer {
          padding: 1rem;
          border-top: 1px solid #dee2e6;
      }
      
      .assistant-floating-messages {
          display: flex;
          flex-direction: column;
      }
      
      .assistant-floating-message {
          margin-bottom: 1rem;
          max-width: 80%;
      }
      
      .assistant-floating-message.user {
          margin-left: auto;
          background-color: #0d6efd;
          color: white;
          border-radius: 1rem 1rem 0 1rem;
          padding: 0.75rem 1rem;
      }
      
      .assistant-floating-message.assistant {
          margin-right: auto;
          background-color: white;
          border: 1px solid #dee2e6;
          border-radius: 1rem 1rem 1rem 0;
          padding: 0.75rem 1rem;
      }
      
      .assistant-floating-suggestions {
          display: flex;
          flex-wrap: wrap;
          gap: 0.5rem;
      }
      
      .assistant-floating-suggestion {
          cursor: pointer;
          background-color: #e9ecef;
          border-radius: 1rem;
          padding: 0.5rem 1rem;
          font-size: 0.875rem;
          transition: background-color 0.2s;
      }
      
      .assistant-floating-suggestion:hover {
          background-color: #dee2e6;
      }
      
      .assistant-data-card {
          background-color: white;
          border: 1px solid #dee2e6;
          border-radius: 0.5rem;
          padding: 1rem;
          margin-top: 0.5rem;
          margin-bottom: 0.5rem;
      }
      
      .assistant-actions {
          display: flex;
          gap: 0.5rem;
          margin-top: 0.5rem;
      }
      
      /* Dark theme */
      .assistant-dark .assistant-floating-body {
          background-color: #343a40;
      }
      
      .assistant-dark .assistant-floating-message.assistant,
      .assistant-dark .assistant-data-card {
          background-color: #495057;
          border-color: #6c757d;
          color: white;
      }
      
      .assistant-dark .assistant-floating-suggestion {
          background-color: #495057;
          color: white;
      }
      
      .assistant-dark .assistant-floating-suggestion:hover {
          background-color: #6c757d;
      }
      
      /* Responsive adjustments */
      @media (max-width: 576px) {
          .assistant-floating-container {
              width: calc(100% - 2rem);
              height: 60vh;
              right: 1rem;
              left: 1rem;
          }
          
          .assistant-floating-button {
              right: 1rem;
          }
      }
  </style>

  <!-- AI Assistant Script -->
  <script>
      document.addEventListener('DOMContentLoaded', function() {
          // Only initialize if we're not on the assistant page
          if (!window.location.pathname.includes('/business/assistant')) {
              initializeFloatingAssistant();
          }
          
          function initializeFloatingAssistant() {
              // DOM Elements
              const floatingButton = document.getElementById('assistant-floating-button');
              const floatingContainer = document.getElementById('assistant-floating-container');
              const floatingMessages = document.getElementById('assistant-floating-messages');
              const floatingSuggestions = document.getElementById('assistant-floating-suggestions');
              const floatingInput = document.getElementById('assistant-floating-input');
              const floatingSend = document.getElementById('assistant-floating-send');
              const floatingMinimize = document.getElementById('assistant-floating-minimize');
              const floatingClose = document.getElementById('assistant-floating-close');
              
              // State
              let preferences = {
                  enabled: true,
                  showSuggestions: true,
                  autoOpen: false,
                  theme: 'system'
              };
              
              // Functions
              function loadPreferences() {
                  fetch('/business/assistant/preferences')
                      .then(response => response.json())
                      .then(data => {
                          preferences = data;
                          
                          // Apply theme
                          applyTheme();
                          
                          // Show/hide floating button based on preferences
                          floatingButton.style.display = preferences.enabled ? 'block' : 'none';
                          
                          // Auto-open if enabled
                          if (preferences.autoOpen && preferences.enabled) {
                              setTimeout(() => {
                                  floatingContainer.style.display = 'flex';
                              }, 1000);
                          }
                      })
                      .catch(error => console.error('Error loading preferences:', error));
              }
              
              function applyTheme() {
                  const isDarkMode = preferences.theme === 'dark' || 
                      (preferences.theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches);
                  
                  if (isDarkMode) {
                      floatingContainer.classList.add('assistant-dark');
                  } else {
                      floatingContainer.classList.remove('assistant-dark');
                  }
              }
              
              function loadConversation() {
                  fetch('/business/assistant/conversation')
                      .then(response => response.json())
                      .then(data => {
                          // Clear existing messages
                          floatingMessages.innerHTML = '';
                          
                          // Display messages
                          data.messages.forEach(message => {
                              displayMessage(message);
                          });
                          
                          // Scroll to bottom
                          floatingMessages.scrollTop = floatingMessages.scrollHeight;
                      })
                      .catch(error => console.error('Error loading conversation:', error));
              }
              
              function displayMessage(message) {
                  // Parse content if it's a JSON string
                  let content = message.content;
                  let parsedContent = null;
                  
                  try {
                      parsedContent = JSON.parse(content);
                      content = parsedContent.text || content;
                  } catch (e) {
                      // Not JSON, use as is
                  }
                  
                  // Create message element for floating container
                  const floatingMessageEl = document.createElement('div');
                  floatingMessageEl.className = `assistant-floating-message ${message.sender}`;
                  floatingMessageEl.textContent = content;
                  floatingMessages.appendChild(floatingMessageEl);
                  
                  // If assistant message has data, display it
                  if (parsedContent && parsedContent.data) {
                      displayData(parsedContent.data);
                  }
                  
                  // If assistant message has actions, display them
                  if (parsedContent && parsedContent.actions) {
                      displayActions(parsedContent.actions);
                  }
                  
                  // If assistant message has suggestions and preferences allow it, display them
                  if (parsedContent && parsedContent.suggestions && preferences.showSuggestions) {
                      displaySuggestions(parsedContent.suggestions);
                  }
              }
              
              function displayData(data) {
                  if (!data) return;
                  
                  const dataCard = document.createElement('div');
                  dataCard.className = 'assistant-data-card';
                  
                  // Check if data is an array
                  if (Array.isArray(data)) {
                      const list = document.createElement('ul');
                      list.className = 'list-group list-group-flush';
                      
                      data.forEach(item => {
                          const listItem = document.createElement('li');
                          listItem.className = 'list-group-item';
                          
                          // Format based on data type
                          if (typeof item === 'object') {
                              let content = '';
                              for (const [key, value] of Object.entries(item)) {
                                  content += `<strong>${key}:</strong> ${value}<br>`;
                              }
                              listItem.innerHTML = content;
                          } else {
                              listItem.textContent = item;
                          }
                          
                          list.appendChild(listItem);
                      });
                      
                      dataCard.appendChild(list);
                  } else if (typeof data === 'object') {
                      // Format object data
                      const table = document.createElement('table');
                      table.className = 'table table-sm';
                      
                      for (const [key, value] of Object.entries(data)) {
                          const row = document.createElement('tr');
                          const keyCell = document.createElement('th');
                          const valueCell = document.createElement('td');
                          
                          keyCell.textContent = key;
                          
                          // Format value based on type
                          if (typeof value === 'number' && key.toLowerCase().includes('rate')) {
                              valueCell.textContent = `${value}%`;
                          } else {
                              valueCell.textContent = value;
                          }
                          
                          row.appendChild(keyCell);
                          row.appendChild(valueCell);
                          table.appendChild(row);
                      }
                      
                      dataCard.appendChild(table);
                  } else {
                      // Simple data
                      dataCard.textContent = data;
                  }
                  
                  floatingMessages.appendChild(dataCard);
              }
              
              function displayActions(actions) {
                  if (!actions || !actions.length) return;
                  
                  const actionsDiv = document.createElement('div');
                  actionsDiv.className = 'assistant-actions';
                  
                  actions.forEach(action => {
                      const actionButton = document.createElement('a');
                      actionButton.className = 'btn btn-sm btn-primary';
                      actionButton.href = action.url;
                      actionButton.textContent = action.text;
                      actionsDiv.appendChild(actionButton);
                  });
                  
                  floatingMessages.appendChild(actionsDiv);
              }
              
              function displaySuggestions(suggestions) {
                  if (!suggestions || !suggestions.length) return;
                  
                  // Clear existing suggestions
                  floatingSuggestions.innerHTML = '';
                  
                  // Add new suggestions to floating container
                  suggestions.forEach(suggestion => {
                      const suggestionEl = document.createElement('div');
                      suggestionEl.className = 'assistant-floating-suggestion';
                      suggestionEl.textContent = suggestion;
                      suggestionEl.addEventListener('click', () => {
                          floatingInput.value = suggestion;
                          sendMessage(suggestion);
                      });
                      floatingSuggestions.appendChild(suggestionEl);
                  });
              }
              
              function sendMessage(message) {
                  if (!message.trim()) return;
                  
                  // Clear input field
                  floatingInput.value = '';
                  
                  // Clear suggestions
                  floatingSuggestions.innerHTML = '';
                  
                  // Create temporary user message
                  const userMessage = {
                      sender: 'user',
                      content: message
                  };
                  
                  // Display user message immediately
                  displayMessage(userMessage);
                  
                  // Scroll to bottom
                  floatingMessages.scrollTop = floatingMessages.scrollHeight;
                  
                  // Send to server
                  fetch('/business/assistant/send', {
                      method: 'POST',
                      headers: {
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({ message })
                  })
                  .then(response => response.json())
                  .then(data => {
                      // Display assistant response
                      const assistantMessage = {
                          sender: 'assistant',
                          content: JSON.stringify(data.response)
                      };
                      
                      displayMessage(assistantMessage);
                      
                      // Scroll to bottom
                      floatingMessages.scrollTop = floatingMessages.scrollHeight;
                  })
                  .catch(error => {
                      console.error('Error sending message:', error);
                      
                      // Display error message
                      const errorMessage = {
                          sender: 'assistant',
                          content: JSON.stringify({
                              text: "Sorry, I encountered an error. Please try again later.",
                              suggestions: ["Start over", "Help"]
                          })
                      };
                      
                      displayMessage(errorMessage);
                      
                      // Scroll to bottom
                      floatingMessages.scrollTop = floatingMessages.scrollHeight;
                  });
              }
              
              // Event Listeners
              floatingButton.addEventListener('click', () => {
                  floatingContainer.style.display = 'flex';
                  // Load conversation when opening
                  loadConversation();
              });
              
              floatingSend.addEventListener('click', () => {
                  sendMessage(floatingInput.value);
              });
              
              floatingInput.addEventListener('keypress', (e) => {
                  if (e.key === 'Enter') {
                      sendMessage(floatingInput.value);
                  }
              });
              
              floatingMinimize.addEventListener('click', () => {
                  floatingContainer.style.display = 'none';
              });
              
              floatingClose.addEventListener('click', () => {
                  floatingContainer.style.display = 'none';
              });
              
              // Listen for dark mode changes
              window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', applyTheme);
              
              // Initialize
              loadPreferences();
          }
      });
  </script>
</body>

</html>